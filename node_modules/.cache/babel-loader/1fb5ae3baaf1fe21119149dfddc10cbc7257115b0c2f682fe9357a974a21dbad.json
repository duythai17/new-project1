{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { getWidget, getUiOptions, optionsList, hasWidget } from '@rjsf/utils';\n/** The `StringField` component is used to render a schema field that represents a string type\n *\n * @param props - The `FieldProps` for this template\n */\nfunction StringField(props) {\n  var _a;\n  const {\n    schema,\n    name,\n    uiSchema,\n    idSchema,\n    formData,\n    required,\n    disabled = false,\n    readonly = false,\n    autofocus = false,\n    onChange,\n    onBlur,\n    onFocus,\n    registry,\n    rawErrors,\n    hideError\n  } = props;\n  const {\n    title,\n    format\n  } = schema;\n  const {\n    widgets,\n    formContext,\n    schemaUtils,\n    globalUiOptions\n  } = registry;\n  const enumOptions = schemaUtils.isSelect(schema) ? optionsList(schema) : undefined;\n  let defaultWidget = enumOptions ? 'select' : 'text';\n  if (format && hasWidget(schema, format, widgets)) {\n    defaultWidget = format;\n  }\n  const {\n    widget = defaultWidget,\n    placeholder = '',\n    title: uiTitle,\n    ...options\n  } = getUiOptions(uiSchema);\n  const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema, globalUiOptions);\n  const label = (_a = uiTitle !== null && uiTitle !== void 0 ? uiTitle : title) !== null && _a !== void 0 ? _a : name;\n  const Widget = getWidget(schema, widget, widgets);\n  return _jsx(Widget, {\n    options: {\n      ...options,\n      enumOptions\n    },\n    schema: schema,\n    uiSchema: uiSchema,\n    id: idSchema.$id,\n    name: name,\n    label: label,\n    hideLabel: !displayLabel,\n    hideError: hideError,\n    value: formData,\n    onChange: onChange,\n    onBlur: onBlur,\n    onFocus: onFocus,\n    required: required,\n    disabled: disabled,\n    readonly: readonly,\n    formContext: formContext,\n    autofocus: autofocus,\n    registry: registry,\n    placeholder: placeholder,\n    rawErrors: rawErrors\n  });\n}\nexport default StringField;","map":{"version":3,"names":["getWidget","getUiOptions","optionsList","hasWidget","StringField","props","schema","name","uiSchema","idSchema","formData","required","disabled","readonly","autofocus","onChange","onBlur","onFocus","registry","rawErrors","hideError","title","format","widgets","formContext","schemaUtils","globalUiOptions","enumOptions","isSelect","undefined","defaultWidget","widget","placeholder","uiTitle","options","displayLabel","getDisplayLabel","label","_a","Widget","_jsx","id","$id","hideLabel","value"],"sources":["D:\\Reactjs\\my-app\\node_modules\\@rjsf\\core\\src\\components\\fields\\StringField.tsx"],"sourcesContent":["import {\n  getWidget,\n  getUiOptions,\n  optionsList,\n  hasWidget,\n  FieldProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from '@rjsf/utils';\n\n/** The `StringField` component is used to render a schema field that represents a string type\n *\n * @param props - The `FieldProps` for this template\n */\nfunction StringField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: FieldProps<T, S, F>\n) {\n  const {\n    schema,\n    name,\n    uiSchema,\n    idSchema,\n    formData,\n    required,\n    disabled = false,\n    readonly = false,\n    autofocus = false,\n    onChange,\n    onBlur,\n    onFocus,\n    registry,\n    rawErrors,\n    hideError,\n  } = props;\n  const { title, format } = schema;\n  const { widgets, formContext, schemaUtils, globalUiOptions } = registry;\n  const enumOptions = schemaUtils.isSelect(schema) ? optionsList(schema) : undefined;\n  let defaultWidget = enumOptions ? 'select' : 'text';\n  if (format && hasWidget<T, S, F>(schema, format, widgets)) {\n    defaultWidget = format;\n  }\n  const { widget = defaultWidget, placeholder = '', title: uiTitle, ...options } = getUiOptions<T, S, F>(uiSchema);\n  const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema, globalUiOptions);\n  const label = uiTitle ?? title ?? name;\n  const Widget = getWidget<T, S, F>(schema, widget, widgets);\n  return (\n    <Widget\n      options={{ ...options, enumOptions }}\n      schema={schema}\n      uiSchema={uiSchema}\n      id={idSchema.$id}\n      name={name}\n      label={label}\n      hideLabel={!displayLabel}\n      hideError={hideError}\n      value={formData}\n      onChange={onChange}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      required={required}\n      disabled={disabled}\n      readonly={readonly}\n      formContext={formContext}\n      autofocus={autofocus}\n      registry={registry}\n      placeholder={placeholder}\n      rawErrors={rawErrors}\n    />\n  );\n}\n\nexport default StringField;\n"],"mappings":";AAAA,SACEA,SAAS,EACTC,YAAY,EACZC,WAAW,EACXC,SAAS,QAKJ,aAAa;AAEpB;;;;AAIA,SAASC,WAAWA,CAClBC,KAA0B;;EAE1B,MAAM;IACJC,MAAM;IACNC,IAAI;IACJC,QAAQ;IACRC,QAAQ;IACRC,QAAQ;IACRC,QAAQ;IACRC,QAAQ,GAAG,KAAK;IAChBC,QAAQ,GAAG,KAAK;IAChBC,SAAS,GAAG,KAAK;IACjBC,QAAQ;IACRC,MAAM;IACNC,OAAO;IACPC,QAAQ;IACRC,SAAS;IACTC;EAAS,CACV,GAAGf,KAAK;EACT,MAAM;IAAEgB,KAAK;IAAEC;EAAM,CAAE,GAAGhB,MAAM;EAChC,MAAM;IAAEiB,OAAO;IAAEC,WAAW;IAAEC,WAAW;IAAEC;EAAe,CAAE,GAAGR,QAAQ;EACvE,MAAMS,WAAW,GAAGF,WAAW,CAACG,QAAQ,CAACtB,MAAM,CAAC,GAAGJ,WAAW,CAACI,MAAM,CAAC,GAAGuB,SAAS;EAClF,IAAIC,aAAa,GAAGH,WAAW,GAAG,QAAQ,GAAG,MAAM;EACnD,IAAIL,MAAM,IAAInB,SAAS,CAAUG,MAAM,EAAEgB,MAAM,EAAEC,OAAO,CAAC,EAAE;IACzDO,aAAa,GAAGR,MAAM;;EAExB,MAAM;IAAES,MAAM,GAAGD,aAAa;IAAEE,WAAW,GAAG,EAAE;IAAEX,KAAK,EAAEY,OAAO;IAAE,GAAGC;EAAO,CAAE,GAAGjC,YAAY,CAAUO,QAAQ,CAAC;EAChH,MAAM2B,YAAY,GAAGV,WAAW,CAACW,eAAe,CAAC9B,MAAM,EAAEE,QAAQ,EAAEkB,eAAe,CAAC;EACnF,MAAMW,KAAK,GAAG,CAAAC,EAAA,GAAAL,OAAO,aAAPA,OAAO,cAAPA,OAAO,GAAIZ,KAAK,cAAAiB,EAAA,cAAAA,EAAA,GAAI/B,IAAI;EACtC,MAAMgC,MAAM,GAAGvC,SAAS,CAAUM,MAAM,EAAEyB,MAAM,EAAER,OAAO,CAAC;EAC1D,OACEiB,IAAA,CAACD,MAAM;IACLL,OAAO,EAAE;MAAE,GAAGA,OAAO;MAAEP;IAAW,CAAE;IACpCrB,MAAM,EAAEA,MAAM;IACdE,QAAQ,EAAEA,QAAQ;IAClBiC,EAAE,EAAEhC,QAAQ,CAACiC,GAAG;IAChBnC,IAAI,EAAEA,IAAI;IACV8B,KAAK,EAAEA,KAAK;IACZM,SAAS,EAAE,CAACR,YAAY;IACxBf,SAAS,EAAEA,SAAS;IACpBwB,KAAK,EAAElC,QAAQ;IACfK,QAAQ,EAAEA,QAAQ;IAClBC,MAAM,EAAEA,MAAM;IACdC,OAAO,EAAEA,OAAO;IAChBN,QAAQ,EAAEA,QAAQ;IAClBC,QAAQ,EAAEA,QAAQ;IAClBC,QAAQ,EAAEA,QAAQ;IAClBW,WAAW,EAAEA,WAAW;IACxBV,SAAS,EAAEA,SAAS;IACpBI,QAAQ,EAAEA,QAAQ;IAClBc,WAAW,EAAEA,WAAW;IACxBb,SAAS,EAAEA;EAAS,EACpB;AAEN;AAEA,eAAef,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}