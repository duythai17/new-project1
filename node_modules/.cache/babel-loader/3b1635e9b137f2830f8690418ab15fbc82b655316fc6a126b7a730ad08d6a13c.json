{"ast":null,"code":"import get from 'lodash/get';\nimport isString from 'lodash/isString';\n/** Returns the `discriminator.propertyName` when defined in the `schema` if it is a string. A warning is generated when\n * it is not a string. Returns `undefined` when a valid discriminator is not present.\n *\n * @param schema - The schema from which the discriminator is potentially obtained\n * @returns - The `discriminator.propertyName` if it exists in the schema, otherwise `undefined`\n */\nexport default function getDiscriminatorFieldFromSchema(schema) {\n  let discriminator;\n  const maybeString = get(schema, 'discriminator.propertyName', undefined);\n  if (isString(maybeString)) {\n    discriminator = maybeString;\n  } else if (maybeString !== undefined) {\n    console.warn(\"Expecting discriminator to be a string, got \\\"\".concat(typeof maybeString, \"\\\" instead\"));\n  }\n  return discriminator;\n}","map":{"version":3,"names":["get","isString","getDiscriminatorFieldFromSchema","schema","discriminator","maybeString","undefined","console","warn","concat"],"sources":["D:\\Reactjs\\my-app\\node_modules\\@rjsf\\utils\\src\\getDiscriminatorFieldFromSchema.ts"],"sourcesContent":["import get from 'lodash/get';\nimport isString from 'lodash/isString';\n\nimport { RJSFSchema, StrictRJSFSchema } from './types';\n\n/** Returns the `discriminator.propertyName` when defined in the `schema` if it is a string. A warning is generated when\n * it is not a string. Returns `undefined` when a valid discriminator is not present.\n *\n * @param schema - The schema from which the discriminator is potentially obtained\n * @returns - The `discriminator.propertyName` if it exists in the schema, otherwise `undefined`\n */\nexport default function getDiscriminatorFieldFromSchema<S extends StrictRJSFSchema = RJSFSchema>(schema: S) {\n  let discriminator: string | undefined;\n  const maybeString = get(schema, 'discriminator.propertyName', undefined);\n  if (isString(maybeString)) {\n    discriminator = maybeString;\n  } else if (maybeString !== undefined) {\n    console.warn(`Expecting discriminator to be a string, got \"${typeof maybeString}\" instead`);\n  }\n  return discriminator;\n}\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,YAAY;AAC5B,OAAOC,QAAQ,MAAM,iBAAiB;AAItC;;;;;;AAMA,eAAc,SAAUC,+BAA+BA,CAA0CC,MAAS;EACxG,IAAIC,aAAiC;EACrC,MAAMC,WAAW,GAAGL,GAAG,CAACG,MAAM,EAAE,4BAA4B,EAAEG,SAAS,CAAC;EACxE,IAAIL,QAAQ,CAACI,WAAW,CAAC,EAAE;IACzBD,aAAa,GAAGC,WAAW;GAC5B,MAAM,IAAIA,WAAW,KAAKC,SAAS,EAAE;IACpCC,OAAO,CAACC,IAAI,kDAAAC,MAAA,CAAiD,OAAOJ,WAAW,eAAW,CAAC;;EAE7F,OAAOD,aAAa;AACtB"},"metadata":{},"sourceType":"module","externalDependencies":[]}