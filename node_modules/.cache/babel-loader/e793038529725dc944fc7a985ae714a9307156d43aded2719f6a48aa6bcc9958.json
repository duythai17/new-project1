{"ast":null,"code":"import get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\nimport { hashForSchema, ID_KEY, JUNK_OPTION_ID, toErrorList, retrieveSchema } from '@rjsf/utils';\nimport processRawValidationErrors from './processRawValidationErrors';\n/** `ValidatorType` implementation that uses an AJV 8 precompiled validator as created by the\n * `compileSchemaValidators()` function provided by the `@rjsf/validator-ajv8` library.\n */\nexport default class AJV8PrecompiledValidator {\n  /** Constructs an `AJV8PrecompiledValidator` instance using the `validateFns` and `rootSchema`\n   *\n   * @param validateFns - The map of the validation functions that are generated by the `schemaCompile()` function\n   * @param rootSchema - The root schema that was used with the `compileSchema()` function\n   * @param [localizer] - If provided, is used to localize a list of Ajv `ErrorObject`s\n   * @throws - Error when the base schema of the precompiled validator does not have a matching validator function\n   */\n  constructor(validateFns, rootSchema, localizer) {\n    this.rootSchema = rootSchema;\n    this.validateFns = validateFns;\n    this.localizer = localizer;\n    this.mainValidator = this.getValidator(rootSchema);\n  }\n  /** Returns the precompiled validator associated with the given `schema` from the map of precompiled validator\n   * functions.\n   *\n   * @param schema - The schema for which a precompiled validator function is desired\n   * @returns - The precompiled validator function associated with this schema\n   */\n  getValidator(schema) {\n    const key = get(schema, ID_KEY) || hashForSchema(schema);\n    const validator = this.validateFns[key];\n    if (!validator) {\n      throw new Error(`No precompiled validator function was found for the given schema for \"${key}\"`);\n    }\n    return validator;\n  }\n  /** Ensures that the validator is using the same schema as the root schema used to construct the precompiled\n   * validator. It first compares the given `schema` against the root schema and if they aren't the same, then it\n   * checks against the resolved root schema, on the chance that a resolved version of the root schema was passed in\n   * instead of the raw root schema.\n   *\n   * @param schema - The schema against which to validate the form data\n   * @param [formData] - The form data to validate if any\n   */\n  ensureSameRootSchema(schema, formData) {\n    if (!isEqual(schema, this.rootSchema)) {\n      // Resolve the root schema with the passed in form data since that may affect the resolution\n      const resolvedRootSchema = retrieveSchema(this, this.rootSchema, this.rootSchema, formData);\n      if (!isEqual(schema, resolvedRootSchema)) {\n        throw new Error('The schema associated with the precompiled validator differs from the rootSchema provided for validation');\n      }\n    }\n    return true;\n  }\n  /** Converts an `errorSchema` into a list of `RJSFValidationErrors`\n   *\n   * @param errorSchema - The `ErrorSchema` instance to convert\n   * @param [fieldPath=[]] - The current field path, defaults to [] if not specified\n   * @deprecated - Use the `toErrorList()` function provided by `@rjsf/utils` instead. This function will be removed in\n   *        the next major release.\n   */\n  toErrorList(errorSchema, fieldPath = []) {\n    return toErrorList(errorSchema, fieldPath);\n  }\n  /** Runs the pure validation of the `schema` and `formData` without any of the RJSF functionality. Provided for use\n   * by the playground. Returns the `errors` from the validation\n   *\n   * @param schema - The schema against which to validate the form data\n   * @param [formData] - The form data to validate, if any\n   * @throws - Error when the schema provided does not match the base schema of the precompiled validator\n   */\n  rawValidation(schema, formData) {\n    this.ensureSameRootSchema(schema, formData);\n    this.mainValidator(formData);\n    if (typeof this.localizer === 'function') {\n      this.localizer(this.mainValidator.errors);\n    }\n    const errors = this.mainValidator.errors || undefined;\n    // Clear errors to prevent persistent errors, see #1104\n    this.mainValidator.errors = null;\n    return {\n      errors: errors\n    };\n  }\n  /** This function processes the `formData` with an optional user contributed `customValidate` function, which receives\n   * the form data and a `errorHandler` function that will be used to add custom validation errors for each field. Also\n   * supports a `transformErrors` function that will take the raw AJV validation errors, prior to custom validation and\n   * transform them in what ever way it chooses.\n   *\n   * @param formData - The form data to validate\n   * @param schema - The schema against which to validate the form data\n   * @param [customValidate] - An optional function that is used to perform custom validation\n   * @param [transformErrors] - An optional function that is used to transform errors after AJV validation\n   * @param [uiSchema] - An optional uiSchema that is passed to `transformErrors` and `customValidate`\n   */\n  validateFormData(formData, schema, customValidate, transformErrors, uiSchema) {\n    const rawErrors = this.rawValidation(schema, formData);\n    return processRawValidationErrors(this, rawErrors, formData, schema, customValidate, transformErrors, uiSchema);\n  }\n  /** Validates data against a schema, returning true if the data is valid, or false otherwise. If the schema is\n   * invalid, then this function will return false.\n   *\n   * @param schema - The schema against which to validate the form data\n   * @param formData - The form data to validate\n   * @param rootSchema - The root schema used to provide $ref resolutions\n   * @returns - true if the formData validates against the schema, false otherwise\n   * @throws - Error when the schema provided does not match the base schema of the precompiled validator OR if there\n   *        isn't a precompiled validator function associated with the schema\n   */\n  isValid(schema, formData, rootSchema) {\n    this.ensureSameRootSchema(rootSchema, formData);\n    if (get(schema, ID_KEY) === JUNK_OPTION_ID) {\n      return false;\n    }\n    const validator = this.getValidator(schema);\n    return validator(formData);\n  }\n}","map":{"version":3,"names":["get","isEqual","hashForSchema","ID_KEY","JUNK_OPTION_ID","toErrorList","retrieveSchema","processRawValidationErrors","AJV8PrecompiledValidator","constructor","validateFns","rootSchema","localizer","mainValidator","getValidator","schema","key","validator","Error","ensureSameRootSchema","formData","resolvedRootSchema","errorSchema","fieldPath","rawValidation","errors","undefined","validateFormData","customValidate","transformErrors","uiSchema","rawErrors","isValid"],"sources":["D:\\Reactjs\\my-app\\node_modules\\@rjsf\\validator-ajv8\\src\\precompiledValidator.ts"],"sourcesContent":["import { ErrorObject } from 'ajv';\nimport get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\nimport {\n  CustomValidator,\n  ErrorSchema,\n  ErrorTransformer,\n  FormContextType,\n  hashForSchema,\n  ID_KEY,\n  JUNK_OPTION_ID,\n  RJSFSchema,\n  StrictRJSFSchema,\n  toErrorList,\n  UiSchema,\n  ValidationData,\n  ValidatorType,\n  retrieveSchema,\n} from '@rjsf/utils';\n\nimport { CompiledValidateFunction, Localizer, ValidatorFunctions } from './types';\nimport processRawValidationErrors, { RawValidationErrorsType } from './processRawValidationErrors';\n\n/** `ValidatorType` implementation that uses an AJV 8 precompiled validator as created by the\n * `compileSchemaValidators()` function provided by the `@rjsf/validator-ajv8` library.\n */\nexport default class AJV8PrecompiledValidator<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> implements ValidatorType<T, S, F>\n{\n  /** The root schema object used to construct this validator\n   *\n   * @private\n   */\n  readonly rootSchema: S;\n\n  /** The `ValidatorFunctions` map used to construct this validator\n   *\n   * @private\n   */\n  readonly validateFns: ValidatorFunctions;\n\n  /** The main validator function associated with the base schema in the `precompiledValidator`\n   *\n   * @private\n   */\n  readonly mainValidator: CompiledValidateFunction;\n\n  /** The Localizer function to use for localizing Ajv errors\n   *\n   * @private\n   */\n  readonly localizer?: Localizer;\n\n  /** Constructs an `AJV8PrecompiledValidator` instance using the `validateFns` and `rootSchema`\n   *\n   * @param validateFns - The map of the validation functions that are generated by the `schemaCompile()` function\n   * @param rootSchema - The root schema that was used with the `compileSchema()` function\n   * @param [localizer] - If provided, is used to localize a list of Ajv `ErrorObject`s\n   * @throws - Error when the base schema of the precompiled validator does not have a matching validator function\n   */\n  constructor(validateFns: ValidatorFunctions, rootSchema: S, localizer?: Localizer) {\n    this.rootSchema = rootSchema;\n    this.validateFns = validateFns;\n    this.localizer = localizer;\n    this.mainValidator = this.getValidator(rootSchema);\n  }\n\n  /** Returns the precompiled validator associated with the given `schema` from the map of precompiled validator\n   * functions.\n   *\n   * @param schema - The schema for which a precompiled validator function is desired\n   * @returns - The precompiled validator function associated with this schema\n   */\n  getValidator(schema: S) {\n    const key = get(schema, ID_KEY) || hashForSchema(schema);\n    const validator = this.validateFns[key];\n    if (!validator) {\n      throw new Error(`No precompiled validator function was found for the given schema for \"${key}\"`);\n    }\n    return validator;\n  }\n\n  /** Ensures that the validator is using the same schema as the root schema used to construct the precompiled\n   * validator. It first compares the given `schema` against the root schema and if they aren't the same, then it\n   * checks against the resolved root schema, on the chance that a resolved version of the root schema was passed in\n   * instead of the raw root schema.\n   *\n   * @param schema - The schema against which to validate the form data\n   * @param [formData] - The form data to validate if any\n   */\n  ensureSameRootSchema(schema: S, formData?: T) {\n    if (!isEqual(schema, this.rootSchema)) {\n      // Resolve the root schema with the passed in form data since that may affect the resolution\n      const resolvedRootSchema = retrieveSchema(this, this.rootSchema, this.rootSchema, formData);\n      if (!isEqual(schema, resolvedRootSchema)) {\n        throw new Error(\n          'The schema associated with the precompiled validator differs from the rootSchema provided for validation'\n        );\n      }\n    }\n    return true;\n  }\n\n  /** Converts an `errorSchema` into a list of `RJSFValidationErrors`\n   *\n   * @param errorSchema - The `ErrorSchema` instance to convert\n   * @param [fieldPath=[]] - The current field path, defaults to [] if not specified\n   * @deprecated - Use the `toErrorList()` function provided by `@rjsf/utils` instead. This function will be removed in\n   *        the next major release.\n   */\n  toErrorList(errorSchema?: ErrorSchema<T>, fieldPath: string[] = []) {\n    return toErrorList(errorSchema, fieldPath);\n  }\n\n  /** Runs the pure validation of the `schema` and `formData` without any of the RJSF functionality. Provided for use\n   * by the playground. Returns the `errors` from the validation\n   *\n   * @param schema - The schema against which to validate the form data\n   * @param [formData] - The form data to validate, if any\n   * @throws - Error when the schema provided does not match the base schema of the precompiled validator\n   */\n  rawValidation<Result = any>(schema: S, formData?: T): RawValidationErrorsType<Result> {\n    this.ensureSameRootSchema(schema, formData);\n    this.mainValidator(formData);\n\n    if (typeof this.localizer === 'function') {\n      this.localizer(this.mainValidator.errors);\n    }\n    const errors = this.mainValidator.errors || undefined;\n\n    // Clear errors to prevent persistent errors, see #1104\n    this.mainValidator.errors = null;\n\n    return { errors: errors as unknown as Result[] };\n  }\n\n  /** This function processes the `formData` with an optional user contributed `customValidate` function, which receives\n   * the form data and a `errorHandler` function that will be used to add custom validation errors for each field. Also\n   * supports a `transformErrors` function that will take the raw AJV validation errors, prior to custom validation and\n   * transform them in what ever way it chooses.\n   *\n   * @param formData - The form data to validate\n   * @param schema - The schema against which to validate the form data\n   * @param [customValidate] - An optional function that is used to perform custom validation\n   * @param [transformErrors] - An optional function that is used to transform errors after AJV validation\n   * @param [uiSchema] - An optional uiSchema that is passed to `transformErrors` and `customValidate`\n   */\n  validateFormData(\n    formData: T | undefined,\n    schema: S,\n    customValidate?: CustomValidator<T, S, F>,\n    transformErrors?: ErrorTransformer<T, S, F>,\n    uiSchema?: UiSchema<T, S, F>\n  ): ValidationData<T> {\n    const rawErrors = this.rawValidation<ErrorObject>(schema, formData);\n    return processRawValidationErrors(this, rawErrors, formData, schema, customValidate, transformErrors, uiSchema);\n  }\n\n  /** Validates data against a schema, returning true if the data is valid, or false otherwise. If the schema is\n   * invalid, then this function will return false.\n   *\n   * @param schema - The schema against which to validate the form data\n   * @param formData - The form data to validate\n   * @param rootSchema - The root schema used to provide $ref resolutions\n   * @returns - true if the formData validates against the schema, false otherwise\n   * @throws - Error when the schema provided does not match the base schema of the precompiled validator OR if there\n   *        isn't a precompiled validator function associated with the schema\n   */\n  isValid(schema: S, formData: T | undefined, rootSchema: S) {\n    this.ensureSameRootSchema(rootSchema, formData);\n    if (get(schema, ID_KEY) === JUNK_OPTION_ID) {\n      return false;\n    }\n    const validator = this.getValidator(schema);\n    return validator(formData);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}