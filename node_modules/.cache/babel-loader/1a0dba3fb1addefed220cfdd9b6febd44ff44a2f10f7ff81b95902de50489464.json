{"ast":null,"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useCallback } from 'react';\nimport { ariaDescribedByIds, enumOptionsDeselectValue, enumOptionsIsSelected, enumOptionsSelectValue, enumOptionsValueForIndex, optionId } from '@rjsf/utils';\n/** The `CheckboxesWidget` is a widget for rendering checkbox groups.\n *  It is typically used to represent an array of enums.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction CheckboxesWidget({\n  id,\n  disabled,\n  options: {\n    inline = false,\n    enumOptions,\n    enumDisabled,\n    emptyValue\n  },\n  value,\n  autofocus = false,\n  readonly,\n  onChange,\n  onBlur,\n  onFocus\n}) {\n  const checkboxesValues = Array.isArray(value) ? value : [value];\n  const handleBlur = useCallback(({\n    target: {\n      value\n    }\n  }) => onBlur(id, enumOptionsValueForIndex(value, enumOptions, emptyValue)), [onBlur, id]);\n  const handleFocus = useCallback(({\n    target: {\n      value\n    }\n  }) => onFocus(id, enumOptionsValueForIndex(value, enumOptions, emptyValue)), [onFocus, id]);\n  return _jsx(\"div\", {\n    className: 'checkboxes',\n    id: id,\n    children: Array.isArray(enumOptions) && enumOptions.map((option, index) => {\n      const checked = enumOptionsIsSelected(option.value, checkboxesValues);\n      const itemDisabled = Array.isArray(enumDisabled) && enumDisabled.indexOf(option.value) !== -1;\n      const disabledCls = disabled || itemDisabled || readonly ? 'disabled' : '';\n      const handleChange = event => {\n        if (event.target.checked) {\n          onChange(enumOptionsSelectValue(index, checkboxesValues, enumOptions));\n        } else {\n          onChange(enumOptionsDeselectValue(index, checkboxesValues, enumOptions));\n        }\n      };\n      const checkbox = _jsxs(\"span\", {\n        children: [_jsx(\"input\", {\n          type: 'checkbox',\n          id: optionId(id, index),\n          name: id,\n          checked: checked,\n          value: String(index),\n          disabled: disabled || itemDisabled || readonly,\n          autoFocus: autofocus && index === 0,\n          onChange: handleChange,\n          onBlur: handleBlur,\n          onFocus: handleFocus,\n          \"aria-describedby\": ariaDescribedByIds(id)\n        }), _jsx(\"span\", {\n          children: option.label\n        })]\n      });\n      return inline ? _jsx(\"label\", {\n        className: `checkbox-inline ${disabledCls}`,\n        children: checkbox\n      }, index) : _jsx(\"div\", {\n        className: `checkbox ${disabledCls}`,\n        children: _jsx(\"label\", {\n          children: checkbox\n        })\n      }, index);\n    })\n  });\n}\nexport default CheckboxesWidget;","map":{"version":3,"names":["useCallback","ariaDescribedByIds","enumOptionsDeselectValue","enumOptionsIsSelected","enumOptionsSelectValue","enumOptionsValueForIndex","optionId","CheckboxesWidget","id","disabled","options","inline","enumOptions","enumDisabled","emptyValue","value","autofocus","readonly","onChange","onBlur","onFocus","checkboxesValues","Array","isArray","handleBlur","target","handleFocus","_jsx","className","children","map","option","index","checked","itemDisabled","indexOf","disabledCls","handleChange","event","checkbox","_jsxs","type","name","String","autoFocus","label"],"sources":["D:\\Reactjs\\my-app\\node_modules\\@rjsf\\core\\src\\components\\widgets\\CheckboxesWidget.tsx"],"sourcesContent":["import { ChangeEvent, FocusEvent, useCallback } from 'react';\nimport {\n  ariaDescribedByIds,\n  enumOptionsDeselectValue,\n  enumOptionsIsSelected,\n  enumOptionsSelectValue,\n  enumOptionsValueForIndex,\n  optionId,\n  FormContextType,\n  WidgetProps,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from '@rjsf/utils';\n\n/** The `CheckboxesWidget` is a widget for rendering checkbox groups.\n *  It is typically used to represent an array of enums.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction CheckboxesWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  id,\n  disabled,\n  options: { inline = false, enumOptions, enumDisabled, emptyValue },\n  value,\n  autofocus = false,\n  readonly,\n  onChange,\n  onBlur,\n  onFocus,\n}: WidgetProps<T, S, F>) {\n  const checkboxesValues = Array.isArray(value) ? value : [value];\n\n  const handleBlur = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLInputElement>) =>\n      onBlur(id, enumOptionsValueForIndex<S>(value, enumOptions, emptyValue)),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLInputElement>) =>\n      onFocus(id, enumOptionsValueForIndex<S>(value, enumOptions, emptyValue)),\n    [onFocus, id]\n  );\n  return (\n    <div className='checkboxes' id={id}>\n      {Array.isArray(enumOptions) &&\n        enumOptions.map((option, index) => {\n          const checked = enumOptionsIsSelected<S>(option.value, checkboxesValues);\n          const itemDisabled = Array.isArray(enumDisabled) && enumDisabled.indexOf(option.value) !== -1;\n          const disabledCls = disabled || itemDisabled || readonly ? 'disabled' : '';\n\n          const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n            if (event.target.checked) {\n              onChange(enumOptionsSelectValue<S>(index, checkboxesValues, enumOptions));\n            } else {\n              onChange(enumOptionsDeselectValue<S>(index, checkboxesValues, enumOptions));\n            }\n          };\n\n          const checkbox = (\n            <span>\n              <input\n                type='checkbox'\n                id={optionId(id, index)}\n                name={id}\n                checked={checked}\n                value={String(index)}\n                disabled={disabled || itemDisabled || readonly}\n                autoFocus={autofocus && index === 0}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                onFocus={handleFocus}\n                aria-describedby={ariaDescribedByIds<T>(id)}\n              />\n              <span>{option.label}</span>\n            </span>\n          );\n          return inline ? (\n            <label key={index} className={`checkbox-inline ${disabledCls}`}>\n              {checkbox}\n            </label>\n          ) : (\n            <div key={index} className={`checkbox ${disabledCls}`}>\n              <label>{checkbox}</label>\n            </div>\n          );\n        })}\n    </div>\n  );\n}\n\nexport default CheckboxesWidget;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}