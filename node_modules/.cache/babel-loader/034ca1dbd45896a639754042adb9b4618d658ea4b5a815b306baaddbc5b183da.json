{"ast":null,"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useCallback } from 'react';\nimport { ariaDescribedByIds, descriptionId, getTemplate, labelValue, schemaRequiresTrueValue } from '@rjsf/utils';\n/** The `CheckBoxWidget` is a widget for rendering boolean properties.\n *  It is typically used to represent a boolean.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction CheckboxWidget(_ref) {\n  let {\n    schema,\n    uiSchema,\n    options,\n    id,\n    value,\n    disabled,\n    readonly,\n    label,\n    hideLabel,\n    autofocus = false,\n    onBlur,\n    onFocus,\n    onChange,\n    registry\n  } = _ref;\n  var _a;\n  const DescriptionFieldTemplate = getTemplate('DescriptionFieldTemplate', registry, options);\n  // Because an unchecked checkbox will cause html5 validation to fail, only add\n  // the \"required\" attribute if the field value must be \"true\", due to the\n  // \"const\" or \"enum\" keywords\n  const required = schemaRequiresTrueValue(schema);\n  const handleChange = useCallback(event => onChange(event.target.checked), [onChange]);\n  const handleBlur = useCallback(event => onBlur(id, event.target.checked), [onBlur, id]);\n  const handleFocus = useCallback(event => onFocus(id, event.target.checked), [onFocus, id]);\n  const description = (_a = options.description) !== null && _a !== void 0 ? _a : schema.description;\n  return _jsxs(\"div\", {\n    className: \"checkbox \".concat(disabled || readonly ? 'disabled' : ''),\n    children: [!hideLabel && !!description && _jsx(DescriptionFieldTemplate, {\n      id: descriptionId(id),\n      description: description,\n      schema: schema,\n      uiSchema: uiSchema,\n      registry: registry\n    }), _jsxs(\"label\", {\n      children: [_jsx(\"input\", {\n        type: 'checkbox',\n        id: id,\n        name: id,\n        checked: typeof value === 'undefined' ? false : value,\n        required: required,\n        disabled: disabled || readonly,\n        autoFocus: autofocus,\n        onChange: handleChange,\n        onBlur: handleBlur,\n        onFocus: handleFocus,\n        \"aria-describedby\": ariaDescribedByIds(id)\n      }), labelValue(_jsx(\"span\", {\n        children: label\n      }), hideLabel)]\n    })]\n  });\n}\nexport default CheckboxWidget;","map":{"version":3,"names":["useCallback","ariaDescribedByIds","descriptionId","getTemplate","labelValue","schemaRequiresTrueValue","CheckboxWidget","_ref","schema","uiSchema","options","id","value","disabled","readonly","label","hideLabel","autofocus","onBlur","onFocus","onChange","registry","DescriptionFieldTemplate","required","handleChange","event","target","checked","handleBlur","handleFocus","description","_a","_jsxs","className","concat","children","_jsx","type","name","autoFocus"],"sources":["D:\\Reactjs\\my-app\\node_modules\\@rjsf\\core\\src\\components\\widgets\\CheckboxWidget.tsx"],"sourcesContent":["import { ChangeEvent, FocusEvent, useCallback } from 'react';\nimport {\n  ariaDescribedByIds,\n  descriptionId,\n  getTemplate,\n  labelValue,\n  schemaRequiresTrueValue,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from '@rjsf/utils';\n\n/** The `CheckBoxWidget` is a widget for rendering boolean properties.\n *  It is typically used to represent a boolean.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction CheckboxWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  schema,\n  uiSchema,\n  options,\n  id,\n  value,\n  disabled,\n  readonly,\n  label,\n  hideLabel,\n  autofocus = false,\n  onBlur,\n  onFocus,\n  onChange,\n  registry,\n}: WidgetProps<T, S, F>) {\n  const DescriptionFieldTemplate = getTemplate<'DescriptionFieldTemplate', T, S, F>(\n    'DescriptionFieldTemplate',\n    registry,\n    options\n  );\n  // Because an unchecked checkbox will cause html5 validation to fail, only add\n  // the \"required\" attribute if the field value must be \"true\", due to the\n  // \"const\" or \"enum\" keywords\n  const required = schemaRequiresTrueValue<S>(schema);\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => onChange(event.target.checked),\n    [onChange]\n  );\n\n  const handleBlur = useCallback(\n    (event: FocusEvent<HTMLInputElement>) => onBlur(id, event.target.checked),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    (event: FocusEvent<HTMLInputElement>) => onFocus(id, event.target.checked),\n    [onFocus, id]\n  );\n  const description = options.description ?? schema.description;\n\n  return (\n    <div className={`checkbox ${disabled || readonly ? 'disabled' : ''}`}>\n      {!hideLabel && !!description && (\n        <DescriptionFieldTemplate\n          id={descriptionId<T>(id)}\n          description={description}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      <label>\n        <input\n          type='checkbox'\n          id={id}\n          name={id}\n          checked={typeof value === 'undefined' ? false : value}\n          required={required}\n          disabled={disabled || readonly}\n          autoFocus={autofocus}\n          onChange={handleChange}\n          onBlur={handleBlur}\n          onFocus={handleFocus}\n          aria-describedby={ariaDescribedByIds<T>(id)}\n        />\n        {labelValue(<span>{label}</span>, hideLabel)}\n      </label>\n    </div>\n  );\n}\n\nexport default CheckboxWidget;\n"],"mappings":";AAAA,SAAkCA,WAAW,QAAQ,OAAO;AAC5D,SACEC,kBAAkB,EAClBC,aAAa,EACbC,WAAW,EACXC,UAAU,EACVC,uBAAuB,QAKlB,aAAa;AAEpB;;;;;AAKA,SAASC,cAAcA,CAAAC,IAAA,EAeA;EAAA,IAfoF;IACzGC,MAAM;IACNC,QAAQ;IACRC,OAAO;IACPC,EAAE;IACFC,KAAK;IACLC,QAAQ;IACRC,QAAQ;IACRC,KAAK;IACLC,SAAS;IACTC,SAAS,GAAG,KAAK;IACjBC,MAAM;IACNC,OAAO;IACPC,QAAQ;IACRC;EAAQ,CACa,GAAAd,IAAA;;EACrB,MAAMe,wBAAwB,GAAGnB,WAAW,CAC1C,0BAA0B,EAC1BkB,QAAQ,EACRX,OAAO,CACR;EACD;EACA;EACA;EACA,MAAMa,QAAQ,GAAGlB,uBAAuB,CAAIG,MAAM,CAAC;EAEnD,MAAMgB,YAAY,GAAGxB,WAAW,CAC7ByB,KAAoC,IAAKL,QAAQ,CAACK,KAAK,CAACC,MAAM,CAACC,OAAO,CAAC,EACxE,CAACP,QAAQ,CAAC,CACX;EAED,MAAMQ,UAAU,GAAG5B,WAAW,CAC3ByB,KAAmC,IAAKP,MAAM,CAACP,EAAE,EAAEc,KAAK,CAACC,MAAM,CAACC,OAAO,CAAC,EACzE,CAACT,MAAM,EAAEP,EAAE,CAAC,CACb;EAED,MAAMkB,WAAW,GAAG7B,WAAW,CAC5ByB,KAAmC,IAAKN,OAAO,CAACR,EAAE,EAAEc,KAAK,CAACC,MAAM,CAACC,OAAO,CAAC,EAC1E,CAACR,OAAO,EAAER,EAAE,CAAC,CACd;EACD,MAAMmB,WAAW,GAAG,CAAAC,EAAA,GAAArB,OAAO,CAACoB,WAAW,cAAAC,EAAA,cAAAA,EAAA,GAAIvB,MAAM,CAACsB,WAAW;EAE7D,OACEE,KAAA;IAAKC,SAAS,cAAAC,MAAA,CAAcrB,QAAQ,IAAIC,QAAQ,GAAG,UAAU,GAAG,EAAE,CAAE;IAAAqB,QAAA,GACjE,CAACnB,SAAS,IAAI,CAAC,CAACc,WAAW,IAC1BM,IAAA,CAACd,wBAAwB;MACvBX,EAAE,EAAET,aAAa,CAAIS,EAAE,CAAC;MACxBmB,WAAW,EAAEA,WAAW;MACxBtB,MAAM,EAAEA,MAAM;MACdC,QAAQ,EAAEA,QAAQ;MAClBY,QAAQ,EAAEA;IAAQ,EAErB,EACDW,KAAA;MAAAG,QAAA,GACEC,IAAA;QACEC,IAAI,EAAC,UAAU;QACf1B,EAAE,EAAEA,EAAE;QACN2B,IAAI,EAAE3B,EAAE;QACRgB,OAAO,EAAE,OAAOf,KAAK,KAAK,WAAW,GAAG,KAAK,GAAGA,KAAK;QACrDW,QAAQ,EAAEA,QAAQ;QAClBV,QAAQ,EAAEA,QAAQ,IAAIC,QAAQ;QAC9ByB,SAAS,EAAEtB,SAAS;QACpBG,QAAQ,EAAEI,YAAY;QACtBN,MAAM,EAAEU,UAAU;QAClBT,OAAO,EAAEU,WAAW;QAAA,oBACF5B,kBAAkB,CAAIU,EAAE;MAAC,EAC3C,EACDP,UAAU,CAACgC,IAAA;QAAAD,QAAA,EAAOpB;MAAK,EAAQ,EAAEC,SAAS,CAAC;IAAA,EACtC;EAAA,EACJ;AAEV;AAEA,eAAeV,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}