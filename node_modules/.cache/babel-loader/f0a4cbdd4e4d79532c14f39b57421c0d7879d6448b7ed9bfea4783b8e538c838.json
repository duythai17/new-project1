{"ast":null,"code":"import get from 'lodash/get';\nimport { PROPERTIES_KEY } from './constants';\n/** Compares the value of `discriminatorField` within `formData` against the value of `discriminatorField` within schema for each `option`.\n * Returns index of first `option` whose discriminator matches formData. Returns `undefined` if there is no match.\n * This function does not work with discriminators of `\"type\": \"object\"` and `\"type\": \"array\"`\n *\n * @param formData - The current formData, if any, used to figure out a match\n * @param options - The list of options to find a matching options from\n * @param [discriminatorField] - The optional name of the field within the options object whose value is used to\n *          determine which option is selected\n * @returns - The index of the matched option or undefined if there is no match\n */\nexport default function getOptionMatchingSimpleDiscriminator(formData, options, discriminatorField) {\n  var _a;\n  if (formData && discriminatorField) {\n    const value = get(formData, discriminatorField);\n    if (value === undefined) {\n      return;\n    }\n    for (let i = 0; i < options.length; i++) {\n      const option = options[i];\n      const discriminator = get(option, [PROPERTIES_KEY, discriminatorField], {});\n      if (discriminator.type === 'object' || discriminator.type === 'array') {\n        continue;\n      }\n      if (discriminator.const === value) {\n        return i;\n      }\n      if ((_a = discriminator.enum) === null || _a === void 0 ? void 0 : _a.includes(value)) {\n        return i;\n      }\n    }\n  }\n  return;\n}","map":{"version":3,"names":["get","PROPERTIES_KEY","getOptionMatchingSimpleDiscriminator","formData","options","discriminatorField","value","undefined","i","length","option","discriminator","type","const","_a","enum","includes"],"sources":["D:\\Reactjs\\my-app\\node_modules\\@rjsf\\utils\\src\\getOptionMatchingSimpleDiscriminator.ts"],"sourcesContent":["import get from 'lodash/get';\nimport { PROPERTIES_KEY } from './constants';\nimport { RJSFSchema, StrictRJSFSchema } from './types';\n\n/** Compares the value of `discriminatorField` within `formData` against the value of `discriminatorField` within schema for each `option`.\n * Returns index of first `option` whose discriminator matches formData. Returns `undefined` if there is no match.\n * This function does not work with discriminators of `\"type\": \"object\"` and `\"type\": \"array\"`\n *\n * @param formData - The current formData, if any, used to figure out a match\n * @param options - The list of options to find a matching options from\n * @param [discriminatorField] - The optional name of the field within the options object whose value is used to\n *          determine which option is selected\n * @returns - The index of the matched option or undefined if there is no match\n */\nexport default function getOptionMatchingSimpleDiscriminator<T = any, S extends StrictRJSFSchema = RJSFSchema>(\n  formData: T | undefined,\n  options: S[],\n  discriminatorField?: string\n): number | undefined {\n  if (formData && discriminatorField) {\n    const value = get(formData, discriminatorField);\n\n    if (value === undefined) {\n      return;\n    }\n\n    for (let i = 0; i < options.length; i++) {\n      const option = options[i];\n      const discriminator = get(option, [PROPERTIES_KEY, discriminatorField], {});\n\n      if (discriminator.type === 'object' || discriminator.type === 'array') {\n        continue;\n      }\n\n      if (discriminator.const === value) {\n        return i;\n      }\n\n      if (discriminator.enum?.includes(value)) {\n        return i;\n      }\n    }\n  }\n\n  return;\n}\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,YAAY;AAC5B,SAASC,cAAc,QAAQ,aAAa;AAG5C;;;;;;;;;;AAUA,eAAc,SAAUC,oCAAoCA,CAC1DC,QAAuB,EACvBC,OAAY,EACZC,kBAA2B;;EAE3B,IAAIF,QAAQ,IAAIE,kBAAkB,EAAE;IAClC,MAAMC,KAAK,GAAGN,GAAG,CAACG,QAAQ,EAAEE,kBAAkB,CAAC;IAE/C,IAAIC,KAAK,KAAKC,SAAS,EAAE;MACvB;;IAGF,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,OAAO,CAACK,MAAM,EAAED,CAAC,EAAE,EAAE;MACvC,MAAME,MAAM,GAAGN,OAAO,CAACI,CAAC,CAAC;MACzB,MAAMG,aAAa,GAAGX,GAAG,CAACU,MAAM,EAAE,CAACT,cAAc,EAAEI,kBAAkB,CAAC,EAAE,EAAE,CAAC;MAE3E,IAAIM,aAAa,CAACC,IAAI,KAAK,QAAQ,IAAID,aAAa,CAACC,IAAI,KAAK,OAAO,EAAE;QACrE;;MAGF,IAAID,aAAa,CAACE,KAAK,KAAKP,KAAK,EAAE;QACjC,OAAOE,CAAC;;MAGV,IAAI,CAAAM,EAAA,GAAAH,aAAa,CAACI,IAAI,cAAAD,EAAA,uBAAAA,EAAA,CAAEE,QAAQ,CAACV,KAAK,CAAC,EAAE;QACvC,OAAOE,CAAC;;;;EAKd;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}