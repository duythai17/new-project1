{"ast":null,"code":"import isPlainObject from 'lodash/isPlainObject';\nimport { ERRORS_KEY } from './constants';\n/** Given a `formData` object, recursively creates a `FormValidation` error handling structure around it\n *\n * @param formData - The form data around which the error handler is created\n * @returns - A `FormValidation` object based on the `formData` structure\n */\nexport default function createErrorHandler(formData) {\n  const handler = {\n    // We store the list of errors for this node in a property named __errors\n    // to avoid name collision with a possible sub schema field named\n    // 'errors' (see `utils.toErrorSchema`).\n    [ERRORS_KEY]: [],\n    addError(message) {\n      this[ERRORS_KEY].push(message);\n    }\n  };\n  if (Array.isArray(formData)) {\n    return formData.reduce((acc, value, key) => {\n      return {\n        ...acc,\n        [key]: createErrorHandler(value)\n      };\n    }, handler);\n  }\n  if (isPlainObject(formData)) {\n    const formObject = formData;\n    return Object.keys(formObject).reduce((acc, key) => {\n      return {\n        ...acc,\n        [key]: createErrorHandler(formObject[key])\n      };\n    }, handler);\n  }\n  return handler;\n}","map":{"version":3,"names":["isPlainObject","ERRORS_KEY","createErrorHandler","formData","handler","addError","message","push","Array","isArray","reduce","acc","value","key","formObject","Object","keys"],"sources":["D:\\Reactjs\\my-app\\node_modules\\@rjsf\\utils\\src\\createErrorHandler.ts"],"sourcesContent":["import isPlainObject from 'lodash/isPlainObject';\n\nimport { ERRORS_KEY } from './constants';\nimport { FieldValidation, FormValidation, GenericObjectType } from './types';\n\n/** Given a `formData` object, recursively creates a `FormValidation` error handling structure around it\n *\n * @param formData - The form data around which the error handler is created\n * @returns - A `FormValidation` object based on the `formData` structure\n */\nexport default function createErrorHandler<T = any>(formData: T): FormValidation<T> {\n  const handler: FieldValidation = {\n    // We store the list of errors for this node in a property named __errors\n    // to avoid name collision with a possible sub schema field named\n    // 'errors' (see `utils.toErrorSchema`).\n    [ERRORS_KEY]: [],\n    addError(message: string) {\n      this[ERRORS_KEY]!.push(message);\n    },\n  };\n  if (Array.isArray(formData)) {\n    return formData.reduce((acc, value, key) => {\n      return { ...acc, [key]: createErrorHandler(value) };\n    }, handler);\n  }\n  if (isPlainObject(formData)) {\n    const formObject: GenericObjectType = formData as GenericObjectType;\n    return Object.keys(formObject).reduce((acc, key) => {\n      return { ...acc, [key]: createErrorHandler(formObject[key]) };\n    }, handler as FormValidation<T>);\n  }\n  return handler as FormValidation<T>;\n}\n"],"mappings":"AAAA,OAAOA,aAAa,MAAM,sBAAsB;AAEhD,SAASC,UAAU,QAAQ,aAAa;AAGxC;;;;;AAKA,eAAc,SAAUC,kBAAkBA,CAAUC,QAAW;EAC7D,MAAMC,OAAO,GAAoB;IAC/B;IACA;IACA;IACA,CAACH,UAAU,GAAG,EAAE;IAChBI,QAAQA,CAACC,OAAe;MACtB,IAAI,CAACL,UAAU,CAAE,CAACM,IAAI,CAACD,OAAO,CAAC;IACjC;GACD;EACD,IAAIE,KAAK,CAACC,OAAO,CAACN,QAAQ,CAAC,EAAE;IAC3B,OAAOA,QAAQ,CAACO,MAAM,CAAC,CAACC,GAAG,EAAEC,KAAK,EAAEC,GAAG,KAAI;MACzC,OAAO;QAAE,GAAGF,GAAG;QAAE,CAACE,GAAG,GAAGX,kBAAkB,CAACU,KAAK;MAAC,CAAE;IACrD,CAAC,EAAER,OAAO,CAAC;;EAEb,IAAIJ,aAAa,CAACG,QAAQ,CAAC,EAAE;IAC3B,MAAMW,UAAU,GAAsBX,QAA6B;IACnE,OAAOY,MAAM,CAACC,IAAI,CAACF,UAAU,CAAC,CAACJ,MAAM,CAAC,CAACC,GAAG,EAAEE,GAAG,KAAI;MACjD,OAAO;QAAE,GAAGF,GAAG;QAAE,CAACE,GAAG,GAAGX,kBAAkB,CAACY,UAAU,CAACD,GAAG,CAAC;MAAC,CAAE;IAC/D,CAAC,EAAET,OAA4B,CAAC;;EAElC,OAAOA,OAA4B;AACrC"},"metadata":{},"sourceType":"module","externalDependencies":[]}