{"ast":null,"code":"/** JS has no built-in hashing function, so rolling our own\n *  based on Java's hashing fn:\n *  http://www.java2s.com/example/nodejs-utility-method/string-hash/hashcode-4dc2b.html\n *\n * @param string - The string for which to get the hash\n * @returns - The resulting hash of the string in hex format\n */\nfunction hashString(string) {\n  let hash = 0;\n  for (let i = 0; i < string.length; i += 1) {\n    const chr = string.charCodeAt(i);\n    hash = (hash << 5) - hash + chr;\n    hash = hash & hash; // Convert to 32bit integer\n  }\n  return hash.toString(16);\n}\n/** Stringifies the schema and returns the hash of the resulting string. Sorts schema fields\n * in consistent order before stringify to prevent different hash ids for the same schema.\n *\n * @param schema - The schema for which the hash is desired\n * @returns - The string obtained from the hash of the stringified schema\n */\nexport default function hashForSchema(schema) {\n  const allKeys = new Set();\n  // solution source: https://stackoverflow.com/questions/16167581/sort-object-properties-and-json-stringify/53593328#53593328\n  JSON.stringify(schema, (key, value) => (allKeys.add(key), value));\n  return hashString(JSON.stringify(schema, Array.from(allKeys).sort()));\n}","map":{"version":3,"names":["hashString","string","hash","i","length","chr","charCodeAt","toString","hashForSchema","schema","allKeys","Set","JSON","stringify","key","value","add","Array","from","sort"],"sources":["D:\\Reactjs\\my-app\\node_modules\\@rjsf\\utils\\src\\hashForSchema.ts"],"sourcesContent":["import { RJSFSchema, StrictRJSFSchema } from './types';\n\n/** JS has no built-in hashing function, so rolling our own\n *  based on Java's hashing fn:\n *  http://www.java2s.com/example/nodejs-utility-method/string-hash/hashcode-4dc2b.html\n *\n * @param string - The string for which to get the hash\n * @returns - The resulting hash of the string in hex format\n */\nfunction hashString(string: string): string {\n  let hash = 0;\n  for (let i = 0; i < string.length; i += 1) {\n    const chr = string.charCodeAt(i);\n    hash = (hash << 5) - hash + chr;\n    hash = hash & hash; // Convert to 32bit integer\n  }\n  return hash.toString(16);\n}\n\n/** Stringifies the schema and returns the hash of the resulting string. Sorts schema fields\n * in consistent order before stringify to prevent different hash ids for the same schema.\n *\n * @param schema - The schema for which the hash is desired\n * @returns - The string obtained from the hash of the stringified schema\n */\nexport default function hashForSchema<S extends StrictRJSFSchema = RJSFSchema>(schema: S) {\n  const allKeys = new Set<string>();\n  // solution source: https://stackoverflow.com/questions/16167581/sort-object-properties-and-json-stringify/53593328#53593328\n  JSON.stringify(schema, (key, value) => (allKeys.add(key), value));\n  return hashString(JSON.stringify(schema, Array.from(allKeys).sort()));\n}\n"],"mappings":"AAEA;;;;;;;AAOA,SAASA,UAAUA,CAACC,MAAc;EAChC,IAAIC,IAAI,GAAG,CAAC;EACZ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,MAAM,CAACG,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;IACzC,MAAME,GAAG,GAAGJ,MAAM,CAACK,UAAU,CAACH,CAAC,CAAC;IAChCD,IAAI,GAAG,CAACA,IAAI,IAAI,CAAC,IAAIA,IAAI,GAAGG,GAAG;IAC/BH,IAAI,GAAGA,IAAI,GAAGA,IAAI,CAAC,CAAC;;EAEtB,OAAOA,IAAI,CAACK,QAAQ,CAAC,EAAE,CAAC;AAC1B;AAEA;;;;;;AAMA,eAAc,SAAUC,aAAaA,CAA0CC,MAAS;EACtF,MAAMC,OAAO,GAAG,IAAIC,GAAG,EAAU;EACjC;EACAC,IAAI,CAACC,SAAS,CAACJ,MAAM,EAAE,CAACK,GAAG,EAAEC,KAAK,MAAML,OAAO,CAACM,GAAG,CAACF,GAAG,CAAC,EAAEC,KAAK,CAAC,CAAC;EACjE,OAAOf,UAAU,CAACY,IAAI,CAACC,SAAS,CAACJ,MAAM,EAAEQ,KAAK,CAACC,IAAI,CAACR,OAAO,CAAC,CAACS,IAAI,EAAE,CAAC,CAAC;AACvE"},"metadata":{},"sourceType":"module","externalDependencies":[]}