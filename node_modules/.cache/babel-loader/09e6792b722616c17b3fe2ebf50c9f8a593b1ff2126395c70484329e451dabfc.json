{"ast":null,"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useCallback } from 'react';\nimport { ariaDescribedByIds, enumOptionsIsSelected, enumOptionsValueForIndex, optionId } from '@rjsf/utils';\n/** The `RadioWidget` is a widget for rendering a radio group.\n *  It is typically used with a string property constrained with enum options.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction RadioWidget(_ref) {\n  let {\n    options,\n    value,\n    required,\n    disabled,\n    readonly,\n    autofocus = false,\n    onBlur,\n    onFocus,\n    onChange,\n    id\n  } = _ref;\n  const {\n    enumOptions,\n    enumDisabled,\n    inline,\n    emptyValue\n  } = options;\n  const handleBlur = useCallback(_ref2 => {\n    let {\n      target: {\n        value\n      }\n    } = _ref2;\n    return onBlur(id, enumOptionsValueForIndex(value, enumOptions, emptyValue));\n  }, [onBlur, id]);\n  const handleFocus = useCallback(_ref3 => {\n    let {\n      target: {\n        value\n      }\n    } = _ref3;\n    return onFocus(id, enumOptionsValueForIndex(value, enumOptions, emptyValue));\n  }, [onFocus, id]);\n  return _jsx(\"div\", {\n    className: 'field-radio-group',\n    id: id,\n    children: Array.isArray(enumOptions) && enumOptions.map((option, i) => {\n      const checked = enumOptionsIsSelected(option.value, value);\n      const itemDisabled = Array.isArray(enumDisabled) && enumDisabled.indexOf(option.value) !== -1;\n      const disabledCls = disabled || itemDisabled || readonly ? 'disabled' : '';\n      const handleChange = () => onChange(option.value);\n      const radio = _jsxs(\"span\", {\n        children: [_jsx(\"input\", {\n          type: 'radio',\n          id: optionId(id, i),\n          checked: checked,\n          name: id,\n          required: required,\n          value: String(i),\n          disabled: disabled || itemDisabled || readonly,\n          autoFocus: autofocus && i === 0,\n          onChange: handleChange,\n          onBlur: handleBlur,\n          onFocus: handleFocus,\n          \"aria-describedby\": ariaDescribedByIds(id)\n        }), _jsx(\"span\", {\n          children: option.label\n        })]\n      });\n      return inline ? _jsx(\"label\", {\n        className: \"radio-inline \".concat(disabledCls),\n        children: radio\n      }, i) : _jsx(\"div\", {\n        className: \"radio \".concat(disabledCls),\n        children: _jsx(\"label\", {\n          children: radio\n        })\n      }, i);\n    })\n  });\n}\nexport default RadioWidget;","map":{"version":3,"names":["useCallback","ariaDescribedByIds","enumOptionsIsSelected","enumOptionsValueForIndex","optionId","RadioWidget","_ref","options","value","required","disabled","readonly","autofocus","onBlur","onFocus","onChange","id","enumOptions","enumDisabled","inline","emptyValue","handleBlur","_ref2","target","handleFocus","_ref3","_jsx","className","children","Array","isArray","map","option","i","checked","itemDisabled","indexOf","disabledCls","handleChange","radio","_jsxs","type","name","String","autoFocus","label","concat"],"sources":["D:\\Reactjs\\my-app\\node_modules\\@rjsf\\core\\src\\components\\widgets\\RadioWidget.tsx"],"sourcesContent":["import { FocusEvent, useCallback } from 'react';\nimport {\n  ariaDescribedByIds,\n  enumOptionsIsSelected,\n  enumOptionsValueForIndex,\n  optionId,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from '@rjsf/utils';\n\n/** The `RadioWidget` is a widget for rendering a radio group.\n *  It is typically used with a string property constrained with enum options.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction RadioWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  options,\n  value,\n  required,\n  disabled,\n  readonly,\n  autofocus = false,\n  onBlur,\n  onFocus,\n  onChange,\n  id,\n}: WidgetProps<T, S, F>) {\n  const { enumOptions, enumDisabled, inline, emptyValue } = options;\n\n  const handleBlur = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLInputElement>) =>\n      onBlur(id, enumOptionsValueForIndex<S>(value, enumOptions, emptyValue)),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLInputElement>) =>\n      onFocus(id, enumOptionsValueForIndex<S>(value, enumOptions, emptyValue)),\n    [onFocus, id]\n  );\n\n  return (\n    <div className='field-radio-group' id={id}>\n      {Array.isArray(enumOptions) &&\n        enumOptions.map((option, i) => {\n          const checked = enumOptionsIsSelected<S>(option.value, value);\n          const itemDisabled = Array.isArray(enumDisabled) && enumDisabled.indexOf(option.value) !== -1;\n          const disabledCls = disabled || itemDisabled || readonly ? 'disabled' : '';\n\n          const handleChange = () => onChange(option.value);\n\n          const radio = (\n            <span>\n              <input\n                type='radio'\n                id={optionId(id, i)}\n                checked={checked}\n                name={id}\n                required={required}\n                value={String(i)}\n                disabled={disabled || itemDisabled || readonly}\n                autoFocus={autofocus && i === 0}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                onFocus={handleFocus}\n                aria-describedby={ariaDescribedByIds<T>(id)}\n              />\n              <span>{option.label}</span>\n            </span>\n          );\n\n          return inline ? (\n            <label key={i} className={`radio-inline ${disabledCls}`}>\n              {radio}\n            </label>\n          ) : (\n            <div key={i} className={`radio ${disabledCls}`}>\n              <label>{radio}</label>\n            </div>\n          );\n        })}\n    </div>\n  );\n}\n\nexport default RadioWidget;\n"],"mappings":";AAAA,SAAqBA,WAAW,QAAQ,OAAO;AAC/C,SACEC,kBAAkB,EAClBC,qBAAqB,EACrBC,wBAAwB,EACxBC,QAAQ,QAKH,aAAa;AAEpB;;;;;AAKA,SAASC,WAAWA,CAAAC,IAAA,EAWG;EAAA,IAXiF;IACtGC,OAAO;IACPC,KAAK;IACLC,QAAQ;IACRC,QAAQ;IACRC,QAAQ;IACRC,SAAS,GAAG,KAAK;IACjBC,MAAM;IACNC,OAAO;IACPC,QAAQ;IACRC;EAAE,CACmB,GAAAV,IAAA;EACrB,MAAM;IAAEW,WAAW;IAAEC,YAAY;IAAEC,MAAM;IAAEC;EAAU,CAAE,GAAGb,OAAO;EAEjE,MAAMc,UAAU,GAAGrB,WAAW,CAC5BsB,KAAA;IAAA,IAAC;MAAEC,MAAM,EAAE;QAAEf;MAAK;IAAE,CAAgC,GAAAc,KAAA;IAAA,OAClDT,MAAM,CAACG,EAAE,EAAEb,wBAAwB,CAAIK,KAAK,EAAES,WAAW,EAAEG,UAAU,CAAC,CAAC;EAAA,GACzE,CAACP,MAAM,EAAEG,EAAE,CAAC,CACb;EAED,MAAMQ,WAAW,GAAGxB,WAAW,CAC7ByB,KAAA;IAAA,IAAC;MAAEF,MAAM,EAAE;QAAEf;MAAK;IAAE,CAAgC,GAAAiB,KAAA;IAAA,OAClDX,OAAO,CAACE,EAAE,EAAEb,wBAAwB,CAAIK,KAAK,EAAES,WAAW,EAAEG,UAAU,CAAC,CAAC;EAAA,GAC1E,CAACN,OAAO,EAAEE,EAAE,CAAC,CACd;EAED,OACEU,IAAA;IAAKC,SAAS,EAAC,mBAAmB;IAACX,EAAE,EAAEA,EAAE;IAAAY,QAAA,EACtCC,KAAK,CAACC,OAAO,CAACb,WAAW,CAAC,IACzBA,WAAW,CAACc,GAAG,CAAC,CAACC,MAAM,EAAEC,CAAC,KAAI;MAC5B,MAAMC,OAAO,GAAGhC,qBAAqB,CAAI8B,MAAM,CAACxB,KAAK,EAAEA,KAAK,CAAC;MAC7D,MAAM2B,YAAY,GAAGN,KAAK,CAACC,OAAO,CAACZ,YAAY,CAAC,IAAIA,YAAY,CAACkB,OAAO,CAACJ,MAAM,CAACxB,KAAK,CAAC,KAAK,CAAC,CAAC;MAC7F,MAAM6B,WAAW,GAAG3B,QAAQ,IAAIyB,YAAY,IAAIxB,QAAQ,GAAG,UAAU,GAAG,EAAE;MAE1E,MAAM2B,YAAY,GAAGA,CAAA,KAAMvB,QAAQ,CAACiB,MAAM,CAACxB,KAAK,CAAC;MAEjD,MAAM+B,KAAK,GACTC,KAAA;QAAAZ,QAAA,GACEF,IAAA;UACEe,IAAI,EAAC,OAAO;UACZzB,EAAE,EAAEZ,QAAQ,CAACY,EAAE,EAAEiB,CAAC,CAAC;UACnBC,OAAO,EAAEA,OAAO;UAChBQ,IAAI,EAAE1B,EAAE;UACRP,QAAQ,EAAEA,QAAQ;UAClBD,KAAK,EAAEmC,MAAM,CAACV,CAAC,CAAC;UAChBvB,QAAQ,EAAEA,QAAQ,IAAIyB,YAAY,IAAIxB,QAAQ;UAC9CiC,SAAS,EAAEhC,SAAS,IAAIqB,CAAC,KAAK,CAAC;UAC/BlB,QAAQ,EAAEuB,YAAY;UACtBzB,MAAM,EAAEQ,UAAU;UAClBP,OAAO,EAAEU,WAAW;UAAA,oBACFvB,kBAAkB,CAAIe,EAAE;QAAC,EAC3C,EACFU,IAAA;UAAAE,QAAA,EAAOI,MAAM,CAACa;QAAK,EAAQ;MAAA,EAE9B;MAED,OAAO1B,MAAM,GACXO,IAAA;QAAeC,SAAS,kBAAAmB,MAAA,CAAkBT,WAAW,CAAE;QAAAT,QAAA,EACpDW;MAAK,GADIN,CAAC,CAEL,GAERP,IAAA;QAAaC,SAAS,WAAAmB,MAAA,CAAWT,WAAW,CAAE;QAAAT,QAAA,EAC5CF,IAAA;UAAAE,QAAA,EAAQW;QAAK;MAAS,GADdN,CAAC,CAGZ;IACH,CAAC;EAAC,EACA;AAEV;AAEA,eAAe5B,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}