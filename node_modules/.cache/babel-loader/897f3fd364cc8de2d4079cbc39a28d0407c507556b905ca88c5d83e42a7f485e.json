{"ast":null,"code":"import get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\nimport { ID_KEY } from '../constants';\nimport hashForSchema from '../hashForSchema';\n/** An implementation of the `ValidatorType` interface that is designed for use in capturing schemas used by the\n * `isValid()` function. The rest of the implementation of the interface throws errors when it is attempted to be used.\n * An instance of the object allows the caller to capture the schemas used in calls to the `isValid()` function. These\n * captured schema, along with the root schema used to construct the object are stored in the map of schemas keyed by\n * the hashed value of the schema. NOTE: After hashing the schema, an $id with the hash value is added to the\n * schema IF that schema doesn't already have an $id, prior to putting the schema into the map.\n */\nexport default class ParserValidator {\n  /** Construct the ParserValidator for the given `rootSchema`. This `rootSchema` will be stashed in the `schemaMap`\n   * first.\n   *\n   * @param rootSchema - The root schema against which this validator will be executed\n   */\n  constructor(rootSchema) {\n    /** The map of schemas encountered by the ParserValidator */\n    this.schemaMap = {};\n    this.rootSchema = rootSchema;\n    this.addSchema(rootSchema, hashForSchema(rootSchema));\n  }\n  /** Adds the given `schema` to the `schemaMap` keyed by the `hash` or `ID_KEY` if present on the `schema`. If the\n   * schema does not have an `ID_KEY`, then the `hash` will be added as the `ID_KEY` to allow the schema to be\n   * associated with it's `hash` for future use (by a schema compiler).\n   *\n   * @param schema - The schema which is to be added to the map\n   * @param hash - The hash value at which to map the schema\n   */\n  addSchema(schema, hash) {\n    const key = get(schema, ID_KEY, hash);\n    const identifiedSchema = {\n      ...schema,\n      [ID_KEY]: key\n    };\n    const existing = this.schemaMap[key];\n    if (!existing) {\n      this.schemaMap[key] = identifiedSchema;\n    } else if (!isEqual(existing, identifiedSchema)) {\n      console.error('existing schema:', JSON.stringify(existing, null, 2));\n      console.error('new schema:', JSON.stringify(identifiedSchema, null, 2));\n      throw new Error(\"Two different schemas exist with the same key \".concat(key, \"! What a bad coincidence. If possible, try adding an $id to one of the schemas\"));\n    }\n  }\n  /** Returns the current `schemaMap` to the caller\n   */\n  getSchemaMap() {\n    return this.schemaMap;\n  }\n  /** Implements the `ValidatorType` `isValid()` method to capture the `schema` in the `schemaMap`. Throws an error when\n   * the `rootSchema` is not the same as the root schema provided during construction.\n   *\n   * @param schema - The schema to record in the `schemaMap`\n   * @param _formData - The formData parameter that is ignored\n   * @param rootSchema - The root schema associated with the schema\n   * @throws - Error when the given `rootSchema` differs from the root schema provided during construction\n   */\n  isValid(schema, _formData, rootSchema) {\n    if (!isEqual(rootSchema, this.rootSchema)) {\n      throw new Error('Unexpectedly calling isValid() with a rootSchema that differs from the construction rootSchema');\n    }\n    this.addSchema(schema, hashForSchema(schema));\n    return false;\n  }\n  /** Implements the `ValidatorType` `rawValidation()` method to throw an error since it is never supposed to be called\n   *\n   * @param _schema - The schema parameter that is ignored\n   * @param _formData - The formData parameter that is ignored\n   */\n  rawValidation(_schema, _formData) {\n    throw new Error('Unexpectedly calling the `rawValidation()` method during schema parsing');\n  }\n  /** Implements the `ValidatorType` `toErrorList()` method to throw an error since it is never supposed to be called\n   *\n   * @param _errorSchema - The error schema parameter that is ignored\n   * @param _fieldPath - The field path parameter that is ignored\n   */\n  toErrorList(_errorSchema, _fieldPath) {\n    throw new Error('Unexpectedly calling the `toErrorList()` method during schema parsing');\n  }\n  /** Implements the `ValidatorType` `validateFormData()` method to throw an error since it is never supposed to be\n   * called\n   *\n   * @param _formData - The formData parameter that is ignored\n   * @param _schema - The schema parameter that is ignored\n   * @param _customValidate - The customValidate parameter that is ignored\n   * @param _transformErrors - The transformErrors parameter that is ignored\n   * @param _uiSchema - The uiSchema parameter that is ignored\n   */\n  validateFormData(_formData, _schema, _customValidate, _transformErrors, _uiSchema) {\n    throw new Error('Unexpectedly calling the `validateFormData()` method during schema parsing');\n  }\n}","map":{"version":3,"names":["get","isEqual","ID_KEY","hashForSchema","ParserValidator","constructor","rootSchema","schemaMap","addSchema","schema","hash","key","identifiedSchema","existing","console","error","JSON","stringify","Error","concat","getSchemaMap","isValid","_formData","rawValidation","_schema","toErrorList","_errorSchema","_fieldPath","validateFormData","_customValidate","_transformErrors","_uiSchema"],"sources":["D:\\Reactjs\\my-app\\node_modules\\@rjsf\\utils\\src\\parser\\ParserValidator.ts"],"sourcesContent":["import get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\n\nimport { ID_KEY } from '../constants';\nimport hashForSchema from '../hashForSchema';\nimport {\n  CustomValidator,\n  ErrorSchema,\n  ErrorTransformer,\n  FormContextType,\n  RJSFSchema,\n  RJSFValidationError,\n  StrictRJSFSchema,\n  UiSchema,\n  ValidationData,\n  ValidatorType,\n} from '../types';\n\n/** The type of the map of schema hash to schema\n */\nexport type SchemaMap<S extends StrictRJSFSchema = RJSFSchema> = {\n  [hash: string]: S;\n};\n\n/** An implementation of the `ValidatorType` interface that is designed for use in capturing schemas used by the\n * `isValid()` function. The rest of the implementation of the interface throws errors when it is attempted to be used.\n * An instance of the object allows the caller to capture the schemas used in calls to the `isValid()` function. These\n * captured schema, along with the root schema used to construct the object are stored in the map of schemas keyed by\n * the hashed value of the schema. NOTE: After hashing the schema, an $id with the hash value is added to the\n * schema IF that schema doesn't already have an $id, prior to putting the schema into the map.\n */\nexport default class ParserValidator<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>\n  implements ValidatorType<T, S, F>\n{\n  /** The rootSchema provided during construction of the class */\n  readonly rootSchema: S;\n\n  /** The map of schemas encountered by the ParserValidator */\n  schemaMap: SchemaMap<S> = {};\n\n  /** Construct the ParserValidator for the given `rootSchema`. This `rootSchema` will be stashed in the `schemaMap`\n   * first.\n   *\n   * @param rootSchema - The root schema against which this validator will be executed\n   */\n  constructor(rootSchema: S) {\n    this.rootSchema = rootSchema;\n    this.addSchema(rootSchema, hashForSchema<S>(rootSchema));\n  }\n\n  /** Adds the given `schema` to the `schemaMap` keyed by the `hash` or `ID_KEY` if present on the `schema`. If the\n   * schema does not have an `ID_KEY`, then the `hash` will be added as the `ID_KEY` to allow the schema to be\n   * associated with it's `hash` for future use (by a schema compiler).\n   *\n   * @param schema - The schema which is to be added to the map\n   * @param hash - The hash value at which to map the schema\n   */\n  addSchema(schema: S, hash: string) {\n    const key = get(schema, ID_KEY, hash);\n    const identifiedSchema = { ...schema, [ID_KEY]: key };\n    const existing = this.schemaMap[key];\n    if (!existing) {\n      this.schemaMap[key] = identifiedSchema;\n    } else if (!isEqual(existing, identifiedSchema)) {\n      console.error('existing schema:', JSON.stringify(existing, null, 2));\n      console.error('new schema:', JSON.stringify(identifiedSchema, null, 2));\n      throw new Error(\n        `Two different schemas exist with the same key ${key}! What a bad coincidence. If possible, try adding an $id to one of the schemas`\n      );\n    }\n  }\n\n  /** Returns the current `schemaMap` to the caller\n   */\n  getSchemaMap() {\n    return this.schemaMap;\n  }\n\n  /** Implements the `ValidatorType` `isValid()` method to capture the `schema` in the `schemaMap`. Throws an error when\n   * the `rootSchema` is not the same as the root schema provided during construction.\n   *\n   * @param schema - The schema to record in the `schemaMap`\n   * @param _formData - The formData parameter that is ignored\n   * @param rootSchema - The root schema associated with the schema\n   * @throws - Error when the given `rootSchema` differs from the root schema provided during construction\n   */\n  isValid(schema: S, _formData: T, rootSchema: S): boolean {\n    if (!isEqual(rootSchema, this.rootSchema)) {\n      throw new Error('Unexpectedly calling isValid() with a rootSchema that differs from the construction rootSchema');\n    }\n    this.addSchema(schema, hashForSchema<S>(schema));\n\n    return false;\n  }\n\n  /** Implements the `ValidatorType` `rawValidation()` method to throw an error since it is never supposed to be called\n   *\n   * @param _schema - The schema parameter that is ignored\n   * @param _formData - The formData parameter that is ignored\n   */\n  rawValidation<Result = any>(_schema: S, _formData?: T): { errors?: Result[]; validationError?: Error } {\n    throw new Error('Unexpectedly calling the `rawValidation()` method during schema parsing');\n  }\n\n  /** Implements the `ValidatorType` `toErrorList()` method to throw an error since it is never supposed to be called\n   *\n   * @param _errorSchema - The error schema parameter that is ignored\n   * @param _fieldPath - The field path parameter that is ignored\n   */\n  toErrorList(_errorSchema?: ErrorSchema<T>, _fieldPath?: string[]): RJSFValidationError[] {\n    throw new Error('Unexpectedly calling the `toErrorList()` method during schema parsing');\n  }\n\n  /** Implements the `ValidatorType` `validateFormData()` method to throw an error since it is never supposed to be\n   * called\n   *\n   * @param _formData - The formData parameter that is ignored\n   * @param _schema - The schema parameter that is ignored\n   * @param _customValidate - The customValidate parameter that is ignored\n   * @param _transformErrors - The transformErrors parameter that is ignored\n   * @param _uiSchema - The uiSchema parameter that is ignored\n   */\n  validateFormData(\n    _formData: T,\n    _schema: S,\n    _customValidate?: CustomValidator<T, S, F>,\n    _transformErrors?: ErrorTransformer<T, S, F>,\n    _uiSchema?: UiSchema<T, S, F>\n  ): ValidationData<T> {\n    throw new Error('Unexpectedly calling the `validateFormData()` method during schema parsing');\n  }\n}\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,YAAY;AAC5B,OAAOC,OAAO,MAAM,gBAAgB;AAEpC,SAASC,MAAM,QAAQ,cAAc;AACrC,OAAOC,aAAa,MAAM,kBAAkB;AAoB5C;;;;;;;AAOA,eAAc,MAAOC,eAAe;EASlC;;;;;EAKAC,YAAYC,UAAa;IARzB;IACA,KAAAC,SAAS,GAAiB,EAAE;IAQ1B,IAAI,CAACD,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACE,SAAS,CAACF,UAAU,EAAEH,aAAa,CAAIG,UAAU,CAAC,CAAC;EAC1D;EAEA;;;;;;;EAOAE,SAASA,CAACC,MAAS,EAAEC,IAAY;IAC/B,MAAMC,GAAG,GAAGX,GAAG,CAACS,MAAM,EAAEP,MAAM,EAAEQ,IAAI,CAAC;IACrC,MAAME,gBAAgB,GAAG;MAAE,GAAGH,MAAM;MAAE,CAACP,MAAM,GAAGS;IAAG,CAAE;IACrD,MAAME,QAAQ,GAAG,IAAI,CAACN,SAAS,CAACI,GAAG,CAAC;IACpC,IAAI,CAACE,QAAQ,EAAE;MACb,IAAI,CAACN,SAAS,CAACI,GAAG,CAAC,GAAGC,gBAAgB;KACvC,MAAM,IAAI,CAACX,OAAO,CAACY,QAAQ,EAAED,gBAAgB,CAAC,EAAE;MAC/CE,OAAO,CAACC,KAAK,CAAC,kBAAkB,EAAEC,IAAI,CAACC,SAAS,CAACJ,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;MACpEC,OAAO,CAACC,KAAK,CAAC,aAAa,EAAEC,IAAI,CAACC,SAAS,CAACL,gBAAgB,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;MACvE,MAAM,IAAIM,KAAK,kDAAAC,MAAA,CACoCR,GAAG,mFAAgF,CACrI;;EAEL;EAEA;;EAEAS,YAAYA,CAAA;IACV,OAAO,IAAI,CAACb,SAAS;EACvB;EAEA;;;;;;;;EAQAc,OAAOA,CAACZ,MAAS,EAAEa,SAAY,EAAEhB,UAAa;IAC5C,IAAI,CAACL,OAAO,CAACK,UAAU,EAAE,IAAI,CAACA,UAAU,CAAC,EAAE;MACzC,MAAM,IAAIY,KAAK,CAAC,gGAAgG,CAAC;;IAEnH,IAAI,CAACV,SAAS,CAACC,MAAM,EAAEN,aAAa,CAAIM,MAAM,CAAC,CAAC;IAEhD,OAAO,KAAK;EACd;EAEA;;;;;EAKAc,aAAaA,CAAeC,OAAU,EAAEF,SAAa;IACnD,MAAM,IAAIJ,KAAK,CAAC,yEAAyE,CAAC;EAC5F;EAEA;;;;;EAKAO,WAAWA,CAACC,YAA6B,EAAEC,UAAqB;IAC9D,MAAM,IAAIT,KAAK,CAAC,uEAAuE,CAAC;EAC1F;EAEA;;;;;;;;;EASAU,gBAAgBA,CACdN,SAAY,EACZE,OAAU,EACVK,eAA0C,EAC1CC,gBAA4C,EAC5CC,SAA6B;IAE7B,MAAM,IAAIb,KAAK,CAAC,4EAA4E,CAAC;EAC/F"},"metadata":{},"sourceType":"module","externalDependencies":[]}