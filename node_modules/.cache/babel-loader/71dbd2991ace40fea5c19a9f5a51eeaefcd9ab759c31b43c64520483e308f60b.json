{"ast":null,"code":"import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useCallback, useState } from 'react';\nimport { dataURItoBlob, getTemplate, TranslatableString } from '@rjsf/utils';\nimport Markdown from 'markdown-to-jsx';\nfunction addNameToDataURL(dataURL, name) {\n  if (dataURL === null) {\n    return null;\n  }\n  return dataURL.replace(';base64', `;name=${encodeURIComponent(name)};base64`);\n}\nfunction processFile(file) {\n  const {\n    name,\n    size,\n    type\n  } = file;\n  return new Promise((resolve, reject) => {\n    const reader = new window.FileReader();\n    reader.onerror = reject;\n    reader.onload = event => {\n      var _a;\n      if (typeof ((_a = event.target) === null || _a === void 0 ? void 0 : _a.result) === 'string') {\n        resolve({\n          dataURL: addNameToDataURL(event.target.result, name),\n          name,\n          size,\n          type\n        });\n      } else {\n        resolve({\n          dataURL: null,\n          name,\n          size,\n          type\n        });\n      }\n    };\n    reader.readAsDataURL(file);\n  });\n}\nfunction processFiles(files) {\n  return Promise.all(Array.from(files).map(processFile));\n}\nfunction FileInfoPreview({\n  fileInfo,\n  registry\n}) {\n  const {\n    translateString\n  } = registry;\n  const {\n    dataURL,\n    type,\n    name\n  } = fileInfo;\n  if (!dataURL) {\n    return null;\n  }\n  if (type.indexOf('image') !== -1) {\n    return _jsx(\"img\", {\n      src: dataURL,\n      style: {\n        maxWidth: '100%'\n      },\n      className: 'file-preview'\n    });\n  }\n  return _jsxs(_Fragment, {\n    children: [' ', _jsx(\"a\", {\n      download: `preview-${name}`,\n      href: dataURL,\n      className: 'file-download',\n      children: translateString(TranslatableString.PreviewLabel)\n    })]\n  });\n}\nfunction FilesInfo({\n  filesInfo,\n  registry,\n  preview\n}) {\n  if (filesInfo.length === 0) {\n    return null;\n  }\n  const {\n    translateString\n  } = registry;\n  return _jsx(\"ul\", {\n    className: 'file-info',\n    children: filesInfo.map((fileInfo, key) => {\n      const {\n        name,\n        size,\n        type\n      } = fileInfo;\n      return _jsxs(\"li\", {\n        children: [_jsx(Markdown, {\n          children: translateString(TranslatableString.FilesInfo, [name, type, String(size)])\n        }), preview && _jsx(FileInfoPreview, {\n          fileInfo: fileInfo,\n          registry: registry\n        })]\n      }, key);\n    })\n  });\n}\nfunction extractFileInfo(dataURLs) {\n  return dataURLs.filter(dataURL => dataURL).map(dataURL => {\n    const {\n      blob,\n      name\n    } = dataURItoBlob(dataURL);\n    return {\n      dataURL,\n      name: name,\n      size: blob.size,\n      type: blob.type\n    };\n  });\n}\n/**\n *  The `FileWidget` is a widget for rendering file upload fields.\n *  It is typically used with a string property with data-url format.\n */\nfunction FileWidget(props) {\n  const {\n    disabled,\n    readonly,\n    required,\n    multiple,\n    onChange,\n    value,\n    options,\n    registry\n  } = props;\n  const BaseInputTemplate = getTemplate('BaseInputTemplate', registry, options);\n  const [filesInfo, setFilesInfo] = useState(Array.isArray(value) ? extractFileInfo(value) : extractFileInfo([value]));\n  const handleChange = useCallback(event => {\n    if (!event.target.files) {\n      return;\n    }\n    // Due to variances in themes, dealing with multiple files for the array case now happens one file at a time.\n    // This is because we don't pass `multiple` into the `BaseInputTemplate` anymore. Instead, we deal with the single\n    // file in each event and concatenate them together ourselves\n    processFiles(event.target.files).then(filesInfoEvent => {\n      const newValue = filesInfoEvent.map(fileInfo => fileInfo.dataURL);\n      if (multiple) {\n        setFilesInfo(filesInfo.concat(filesInfoEvent[0]));\n        onChange(value.concat(newValue[0]));\n      } else {\n        setFilesInfo(filesInfoEvent);\n        onChange(newValue[0]);\n      }\n    });\n  }, [multiple, value, filesInfo, onChange]);\n  return _jsxs(\"div\", {\n    children: [_jsx(BaseInputTemplate, {\n      ...props,\n      disabled: disabled || readonly,\n      type: 'file',\n      required: value ? false : required,\n      onChangeOverride: handleChange,\n      value: '',\n      accept: options.accept ? String(options.accept) : undefined\n    }), _jsx(FilesInfo, {\n      filesInfo: filesInfo,\n      registry: registry,\n      preview: options.filePreview\n    })]\n  });\n}\nexport default FileWidget;","map":{"version":3,"names":["useCallback","useState","dataURItoBlob","getTemplate","TranslatableString","Markdown","addNameToDataURL","dataURL","name","replace","encodeURIComponent","processFile","file","size","type","Promise","resolve","reject","reader","window","FileReader","onerror","onload","event","_a","target","result","readAsDataURL","processFiles","files","all","Array","from","map","FileInfoPreview","fileInfo","registry","translateString","indexOf","_jsx","src","style","maxWidth","className","_jsxs","_Fragment","children","download","href","PreviewLabel","FilesInfo","filesInfo","preview","length","key","String","extractFileInfo","dataURLs","filter","blob","FileWidget","props","disabled","readonly","required","multiple","onChange","value","options","BaseInputTemplate","setFilesInfo","isArray","handleChange","then","filesInfoEvent","newValue","concat","onChangeOverride","accept","undefined","filePreview"],"sources":["D:\\Reactjs\\my-app\\node_modules\\@rjsf\\core\\src\\components\\widgets\\FileWidget.tsx"],"sourcesContent":["import { ChangeEvent, useCallback, useState } from 'react';\nimport {\n  dataURItoBlob,\n  FormContextType,\n  getTemplate,\n  Registry,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n  WidgetProps,\n} from '@rjsf/utils';\nimport Markdown from 'markdown-to-jsx';\n\nfunction addNameToDataURL(dataURL: string, name: string) {\n  if (dataURL === null) {\n    return null;\n  }\n  return dataURL.replace(';base64', `;name=${encodeURIComponent(name)};base64`);\n}\n\ntype FileInfoType = {\n  dataURL?: string | null;\n  name: string;\n  size: number;\n  type: string;\n};\n\nfunction processFile(file: File): Promise<FileInfoType> {\n  const { name, size, type } = file;\n  return new Promise((resolve, reject) => {\n    const reader = new window.FileReader();\n    reader.onerror = reject;\n    reader.onload = (event) => {\n      if (typeof event.target?.result === 'string') {\n        resolve({\n          dataURL: addNameToDataURL(event.target.result, name),\n          name,\n          size,\n          type,\n        });\n      } else {\n        resolve({\n          dataURL: null,\n          name,\n          size,\n          type,\n        });\n      }\n    };\n    reader.readAsDataURL(file);\n  });\n}\n\nfunction processFiles(files: FileList) {\n  return Promise.all(Array.from(files).map(processFile));\n}\n\nfunction FileInfoPreview<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  fileInfo,\n  registry,\n}: {\n  fileInfo: FileInfoType;\n  registry: Registry<T, S, F>;\n}) {\n  const { translateString } = registry;\n  const { dataURL, type, name } = fileInfo;\n  if (!dataURL) {\n    return null;\n  }\n\n  if (type.indexOf('image') !== -1) {\n    return <img src={dataURL} style={{ maxWidth: '100%' }} className='file-preview' />;\n  }\n\n  return (\n    <>\n      {' '}\n      <a download={`preview-${name}`} href={dataURL} className='file-download'>\n        {translateString(TranslatableString.PreviewLabel)}\n      </a>\n    </>\n  );\n}\n\nfunction FilesInfo<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  filesInfo,\n  registry,\n  preview,\n}: {\n  filesInfo: FileInfoType[];\n  registry: Registry<T, S, F>;\n  preview?: boolean;\n}) {\n  if (filesInfo.length === 0) {\n    return null;\n  }\n  const { translateString } = registry;\n  return (\n    <ul className='file-info'>\n      {filesInfo.map((fileInfo, key) => {\n        const { name, size, type } = fileInfo;\n        return (\n          <li key={key}>\n            <Markdown>{translateString(TranslatableString.FilesInfo, [name, type, String(size)])}</Markdown>\n            {preview && <FileInfoPreview<T, S, F> fileInfo={fileInfo} registry={registry} />}\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nfunction extractFileInfo(dataURLs: string[]): FileInfoType[] {\n  return dataURLs\n    .filter((dataURL) => dataURL)\n    .map((dataURL) => {\n      const { blob, name } = dataURItoBlob(dataURL);\n      return {\n        dataURL,\n        name: name,\n        size: blob.size,\n        type: blob.type,\n      };\n    });\n}\n\n/**\n *  The `FileWidget` is a widget for rendering file upload fields.\n *  It is typically used with a string property with data-url format.\n */\nfunction FileWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { disabled, readonly, required, multiple, onChange, value, options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  const [filesInfo, setFilesInfo] = useState<FileInfoType[]>(\n    Array.isArray(value) ? extractFileInfo(value) : extractFileInfo([value])\n  );\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      if (!event.target.files) {\n        return;\n      }\n      // Due to variances in themes, dealing with multiple files for the array case now happens one file at a time.\n      // This is because we don't pass `multiple` into the `BaseInputTemplate` anymore. Instead, we deal with the single\n      // file in each event and concatenate them together ourselves\n      processFiles(event.target.files).then((filesInfoEvent) => {\n        const newValue = filesInfoEvent.map((fileInfo) => fileInfo.dataURL);\n        if (multiple) {\n          setFilesInfo(filesInfo.concat(filesInfoEvent[0]));\n          onChange(value.concat(newValue[0]));\n        } else {\n          setFilesInfo(filesInfoEvent);\n          onChange(newValue[0]);\n        }\n      });\n    },\n    [multiple, value, filesInfo, onChange]\n  );\n\n  return (\n    <div>\n      <BaseInputTemplate\n        {...props}\n        disabled={disabled || readonly}\n        type='file'\n        required={value ? false : required} // this turns off HTML required validation when a value exists\n        onChangeOverride={handleChange}\n        value=''\n        accept={options.accept ? String(options.accept) : undefined}\n      />\n      <FilesInfo<T, S, F> filesInfo={filesInfo} registry={registry} preview={options.filePreview} />\n    </div>\n  );\n}\n\nexport default FileWidget;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}