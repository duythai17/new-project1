{"ast":null,"code":"import forEach from 'lodash/forEach';\nimport isEqual from 'lodash/isEqual';\nimport { PROPERTIES_KEY, ITEMS_KEY } from '../constants';\nimport ParserValidator from './ParserValidator';\nimport { retrieveSchemaInternal, resolveAnyOrOneOfSchemas } from '../schema/retrieveSchema';\n/** Recursive function used to parse the given `schema` belonging to the `rootSchema`. The `validator` is used to\n * capture the sub-schemas that the `isValid()` function is called with. For each schema returned by the\n * `retrieveSchemaInternal()`, the `resolveAnyOrOneOfSchemas()` function is called. For each of the schemas returned\n * from THAT call have `properties`, then each of the sub-schema property objects are then recursively parsed.\n *\n * @param validator - The `ParserValidator` implementation used to capture `isValid()` calls during parsing\n * @param recurseList - The list of schemas returned from the `retrieveSchemaInternal`, preventing infinite recursion\n * @param rootSchema - The root schema from which the schema parsing began\n * @param schema - The current schema element being parsed\n */\nfunction parseSchema(validator, recurseList, rootSchema, schema) {\n  const schemas = retrieveSchemaInternal(validator, schema, rootSchema, undefined, true);\n  schemas.forEach(schema => {\n    const sameSchemaIndex = recurseList.findIndex(item => isEqual(item, schema));\n    if (sameSchemaIndex === -1) {\n      recurseList.push(schema);\n      const allOptions = resolveAnyOrOneOfSchemas(validator, schema, rootSchema, true);\n      allOptions.forEach(s => {\n        if (PROPERTIES_KEY in s && s[PROPERTIES_KEY]) {\n          forEach(schema[PROPERTIES_KEY], value => {\n            parseSchema(validator, recurseList, rootSchema, value);\n          });\n        }\n      });\n      if (ITEMS_KEY in schema && !Array.isArray(schema.items) && typeof schema.items !== 'boolean') {\n        parseSchema(validator, recurseList, rootSchema, schema.items);\n      }\n    }\n  });\n}\n/** Parses the given `rootSchema` to extract out all the sub-schemas that maybe contained within it. Returns a map of\n * the hash of the schema to schema/sub-schema.\n *\n * @param rootSchema - The root schema to parse for sub-schemas used by `isValid()` calls\n * @returns - The `SchemaMap` of all schemas that were parsed\n */\nexport default function schemaParser(rootSchema) {\n  const validator = new ParserValidator(rootSchema);\n  const recurseList = [];\n  parseSchema(validator, recurseList, rootSchema, rootSchema);\n  return validator.getSchemaMap();\n}","map":{"version":3,"names":["forEach","isEqual","PROPERTIES_KEY","ITEMS_KEY","ParserValidator","retrieveSchemaInternal","resolveAnyOrOneOfSchemas","parseSchema","validator","recurseList","rootSchema","schema","schemas","undefined","sameSchemaIndex","findIndex","item","push","allOptions","s","value","Array","isArray","items","schemaParser","getSchemaMap"],"sources":["D:\\Reactjs\\my-app\\node_modules\\@rjsf\\utils\\src\\parser\\schemaParser.ts"],"sourcesContent":["import forEach from 'lodash/forEach';\nimport isEqual from 'lodash/isEqual';\n\nimport { FormContextType, RJSFSchema, StrictRJSFSchema } from '../types';\nimport { PROPERTIES_KEY, ITEMS_KEY } from '../constants';\nimport ParserValidator, { SchemaMap } from './ParserValidator';\nimport { retrieveSchemaInternal, resolveAnyOrOneOfSchemas } from '../schema/retrieveSchema';\n\n/** Recursive function used to parse the given `schema` belonging to the `rootSchema`. The `validator` is used to\n * capture the sub-schemas that the `isValid()` function is called with. For each schema returned by the\n * `retrieveSchemaInternal()`, the `resolveAnyOrOneOfSchemas()` function is called. For each of the schemas returned\n * from THAT call have `properties`, then each of the sub-schema property objects are then recursively parsed.\n *\n * @param validator - The `ParserValidator` implementation used to capture `isValid()` calls during parsing\n * @param recurseList - The list of schemas returned from the `retrieveSchemaInternal`, preventing infinite recursion\n * @param rootSchema - The root schema from which the schema parsing began\n * @param schema - The current schema element being parsed\n */\nfunction parseSchema<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ParserValidator<T, S, F>,\n  recurseList: S[],\n  rootSchema: S,\n  schema: S\n) {\n  const schemas = retrieveSchemaInternal<T, S, F>(validator, schema, rootSchema, undefined, true);\n  schemas.forEach((schema) => {\n    const sameSchemaIndex = recurseList.findIndex((item) => isEqual(item, schema));\n    if (sameSchemaIndex === -1) {\n      recurseList.push(schema);\n      const allOptions = resolveAnyOrOneOfSchemas<T, S, F>(validator, schema, rootSchema, true);\n      allOptions.forEach((s) => {\n        if (PROPERTIES_KEY in s && s[PROPERTIES_KEY]) {\n          forEach(schema[PROPERTIES_KEY], (value) => {\n            parseSchema<T, S, F>(validator, recurseList, rootSchema, value as S);\n          });\n        }\n      });\n      if (ITEMS_KEY in schema && !Array.isArray(schema.items) && typeof schema.items !== 'boolean') {\n        parseSchema<T, S, F>(validator, recurseList, rootSchema, schema.items as S);\n      }\n    }\n  });\n}\n\n/** Parses the given `rootSchema` to extract out all the sub-schemas that maybe contained within it. Returns a map of\n * the hash of the schema to schema/sub-schema.\n *\n * @param rootSchema - The root schema to parse for sub-schemas used by `isValid()` calls\n * @returns - The `SchemaMap` of all schemas that were parsed\n */\nexport default function schemaParser<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  rootSchema: S\n): SchemaMap<S> {\n  const validator = new ParserValidator<T, S, F>(rootSchema);\n  const recurseList: S[] = [];\n\n  parseSchema(validator, recurseList, rootSchema, rootSchema);\n\n  return validator.getSchemaMap();\n}\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,gBAAgB;AACpC,OAAOC,OAAO,MAAM,gBAAgB;AAGpC,SAASC,cAAc,EAAEC,SAAS,QAAQ,cAAc;AACxD,OAAOC,eAA8B,MAAM,mBAAmB;AAC9D,SAASC,sBAAsB,EAAEC,wBAAwB,QAAQ,0BAA0B;AAE3F;;;;;;;;;;AAUA,SAASC,WAAWA,CAClBC,SAAmC,EACnCC,WAAgB,EAChBC,UAAa,EACbC,MAAS;EAET,MAAMC,OAAO,GAAGP,sBAAsB,CAAUG,SAAS,EAAEG,MAAM,EAAED,UAAU,EAAEG,SAAS,EAAE,IAAI,CAAC;EAC/FD,OAAO,CAACZ,OAAO,CAAEW,MAAM,IAAI;IACzB,MAAMG,eAAe,GAAGL,WAAW,CAACM,SAAS,CAAEC,IAAI,IAAKf,OAAO,CAACe,IAAI,EAAEL,MAAM,CAAC,CAAC;IAC9E,IAAIG,eAAe,KAAK,CAAC,CAAC,EAAE;MAC1BL,WAAW,CAACQ,IAAI,CAACN,MAAM,CAAC;MACxB,MAAMO,UAAU,GAAGZ,wBAAwB,CAAUE,SAAS,EAAEG,MAAM,EAAED,UAAU,EAAE,IAAI,CAAC;MACzFQ,UAAU,CAAClB,OAAO,CAAEmB,CAAC,IAAI;QACvB,IAAIjB,cAAc,IAAIiB,CAAC,IAAIA,CAAC,CAACjB,cAAc,CAAC,EAAE;UAC5CF,OAAO,CAACW,MAAM,CAACT,cAAc,CAAC,EAAGkB,KAAK,IAAI;YACxCb,WAAW,CAAUC,SAAS,EAAEC,WAAW,EAAEC,UAAU,EAAEU,KAAU,CAAC;UACtE,CAAC,CAAC;;MAEN,CAAC,CAAC;MACF,IAAIjB,SAAS,IAAIQ,MAAM,IAAI,CAACU,KAAK,CAACC,OAAO,CAACX,MAAM,CAACY,KAAK,CAAC,IAAI,OAAOZ,MAAM,CAACY,KAAK,KAAK,SAAS,EAAE;QAC5FhB,WAAW,CAAUC,SAAS,EAAEC,WAAW,EAAEC,UAAU,EAAEC,MAAM,CAACY,KAAU,CAAC;;;EAGjF,CAAC,CAAC;AACJ;AAEA;;;;;;AAMA,eAAc,SAAUC,YAAYA,CAClCd,UAAa;EAEb,MAAMF,SAAS,GAAG,IAAIJ,eAAe,CAAUM,UAAU,CAAC;EAC1D,MAAMD,WAAW,GAAQ,EAAE;EAE3BF,WAAW,CAACC,SAAS,EAAEC,WAAW,EAAEC,UAAU,EAAEA,UAAU,CAAC;EAE3D,OAAOF,SAAS,CAACiB,YAAY,EAAE;AACjC"},"metadata":{},"sourceType":"module","externalDependencies":[]}