{"ast":null,"code":"import pad from './pad';\n/** Converts a UTC date string into a local Date format\n *\n * @param jsonDate - A UTC date string\n * @returns - An empty string when `jsonDate` is falsey, otherwise a date string in local format\n */\nexport default function utcToLocal(jsonDate) {\n  if (!jsonDate) {\n    return '';\n  }\n  // required format of `'yyyy-MM-ddThh:mm' followed by optional ':ss' or ':ss.SSS'\n  // https://html.spec.whatwg.org/multipage/input.html#local-date-and-time-state-(type%3Ddatetime-local)\n  // > should be a _valid local date and time string_ (not GMT)\n  // Note - date constructor passed local ISO-8601 does not correctly\n  // change time to UTC in node pre-8\n  const date = new Date(jsonDate);\n  const yyyy = pad(date.getFullYear(), 4);\n  const MM = pad(date.getMonth() + 1, 2);\n  const dd = pad(date.getDate(), 2);\n  const hh = pad(date.getHours(), 2);\n  const mm = pad(date.getMinutes(), 2);\n  const ss = pad(date.getSeconds(), 2);\n  const SSS = pad(date.getMilliseconds(), 3);\n  return \"\".concat(yyyy, \"-\").concat(MM, \"-\").concat(dd, \"T\").concat(hh, \":\").concat(mm, \":\").concat(ss, \".\").concat(SSS);\n}","map":{"version":3,"names":["pad","utcToLocal","jsonDate","date","Date","yyyy","getFullYear","MM","getMonth","dd","getDate","hh","getHours","mm","getMinutes","ss","getSeconds","SSS","getMilliseconds","concat"],"sources":["D:\\Reactjs\\my-app\\node_modules\\@rjsf\\utils\\src\\utcToLocal.ts"],"sourcesContent":["import pad from './pad';\n\n/** Converts a UTC date string into a local Date format\n *\n * @param jsonDate - A UTC date string\n * @returns - An empty string when `jsonDate` is falsey, otherwise a date string in local format\n */\nexport default function utcToLocal(jsonDate: string) {\n  if (!jsonDate) {\n    return '';\n  }\n\n  // required format of `'yyyy-MM-ddThh:mm' followed by optional ':ss' or ':ss.SSS'\n  // https://html.spec.whatwg.org/multipage/input.html#local-date-and-time-state-(type%3Ddatetime-local)\n  // > should be a _valid local date and time string_ (not GMT)\n\n  // Note - date constructor passed local ISO-8601 does not correctly\n  // change time to UTC in node pre-8\n  const date = new Date(jsonDate);\n\n  const yyyy = pad(date.getFullYear(), 4);\n  const MM = pad(date.getMonth() + 1, 2);\n  const dd = pad(date.getDate(), 2);\n  const hh = pad(date.getHours(), 2);\n  const mm = pad(date.getMinutes(), 2);\n  const ss = pad(date.getSeconds(), 2);\n  const SSS = pad(date.getMilliseconds(), 3);\n\n  return `${yyyy}-${MM}-${dd}T${hh}:${mm}:${ss}.${SSS}`;\n}\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AAEvB;;;;;AAKA,eAAc,SAAUC,UAAUA,CAACC,QAAgB;EACjD,IAAI,CAACA,QAAQ,EAAE;IACb,OAAO,EAAE;;EAGX;EACA;EACA;EAEA;EACA;EACA,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,QAAQ,CAAC;EAE/B,MAAMG,IAAI,GAAGL,GAAG,CAACG,IAAI,CAACG,WAAW,EAAE,EAAE,CAAC,CAAC;EACvC,MAAMC,EAAE,GAAGP,GAAG,CAACG,IAAI,CAACK,QAAQ,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC;EACtC,MAAMC,EAAE,GAAGT,GAAG,CAACG,IAAI,CAACO,OAAO,EAAE,EAAE,CAAC,CAAC;EACjC,MAAMC,EAAE,GAAGX,GAAG,CAACG,IAAI,CAACS,QAAQ,EAAE,EAAE,CAAC,CAAC;EAClC,MAAMC,EAAE,GAAGb,GAAG,CAACG,IAAI,CAACW,UAAU,EAAE,EAAE,CAAC,CAAC;EACpC,MAAMC,EAAE,GAAGf,GAAG,CAACG,IAAI,CAACa,UAAU,EAAE,EAAE,CAAC,CAAC;EACpC,MAAMC,GAAG,GAAGjB,GAAG,CAACG,IAAI,CAACe,eAAe,EAAE,EAAE,CAAC,CAAC;EAE1C,UAAAC,MAAA,CAAUd,IAAI,OAAAc,MAAA,CAAIZ,EAAE,OAAAY,MAAA,CAAIV,EAAE,OAAAU,MAAA,CAAIR,EAAE,OAAAQ,MAAA,CAAIN,EAAE,OAAAM,MAAA,CAAIJ,EAAE,OAAAI,MAAA,CAAIF,GAAG;AACrD"},"metadata":{},"sourceType":"module","externalDependencies":[]}