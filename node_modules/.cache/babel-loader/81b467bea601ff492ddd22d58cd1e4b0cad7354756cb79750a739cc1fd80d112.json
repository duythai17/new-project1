{"ast":null,"code":"export default function labelValue(label, hideLabel, fallback) {\n  return hideLabel ? fallback : label;\n}","map":{"version":3,"names":["labelValue","label","hideLabel","fallback"],"sources":["D:\\Reactjs\\my-app\\node_modules\\@rjsf\\utils\\src\\labelValue.ts"],"sourcesContent":["import { ReactElement } from 'react';\n\n/** Helper function that will return the value to use for a widget `label` based on `hideLabel`. The `fallback` is used\n * as the return value from the function when `hideLabel` is true. Due to the implementation of theme components, it\n * may be necessary to return something other than `undefined` to cause the theme component to not render a label. Some\n * themes require may `false` and others may require an empty string.\n *\n * @param [label] - The label string or component to render when not hidden\n * @param [hideLabel] - Flag, if true, will cause the label to be hidden\n * @param [fallback] - One of 3 values, `undefined` (the default), `false` or an empty string\n * @returns - `fallback` if `hideLabel` is true, otherwise `label`\n */\n\nexport default function labelValue(label?: string, hideLabel?: boolean, fallback?: ''): undefined | string;\nexport default function labelValue(label?: string, hideLabel?: boolean, fallback?: false): undefined | false | string;\nexport default function labelValue(label?: ReactElement, hideLabel?: boolean, fallback?: ''): undefined | ReactElement;\nexport default function labelValue(\n  label?: ReactElement,\n  hideLabel?: boolean,\n  fallback?: false\n): undefined | false | ReactElement;\nexport default function labelValue(\n  label?: string | ReactElement,\n  hideLabel?: boolean,\n  fallback?: false | ''\n): undefined | false | string | ReactElement {\n  return hideLabel ? fallback : label;\n}\n"],"mappings":"AAqBA,eAAc,SAAUA,UAAUA,CAChCC,KAA6B,EAC7BC,SAAmB,EACnBC,QAAqB;EAErB,OAAOD,SAAS,GAAGC,QAAQ,GAAGF,KAAK;AACrC"},"metadata":{},"sourceType":"module","externalDependencies":[]}