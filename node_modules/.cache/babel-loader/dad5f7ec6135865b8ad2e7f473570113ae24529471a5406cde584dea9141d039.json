{"ast":null,"code":"/** An enumeration of all the translatable strings used by `@rjsf/core` and its themes. The value of each of the\n * enumeration keys is expected to be the actual english string. Some strings contain replaceable parameter values\n * as indicated by `%1`, `%2`, etc. The number after the `%` indicates the order of the parameter. The ordering of\n * parameters is important because some languages may choose to put the second parameter before the first in its\n * translation. Also, some strings are rendered using `markdown-to-jsx` and thus support markdown and inline html.\n */\nexport var TranslatableString;\n(function (TranslatableString) {\n  /** Fallback title of an array item, used by ArrayField */\n  TranslatableString[\"ArrayItemTitle\"] = \"Item\";\n  /** Missing items reason, used by ArrayField */\n  TranslatableString[\"MissingItems\"] = \"Missing items definition\";\n  /** Yes label, used by BooleanField */\n  TranslatableString[\"YesLabel\"] = \"Yes\";\n  /** No label, used by BooleanField */\n  TranslatableString[\"NoLabel\"] = \"No\";\n  /** Close label, used by ErrorList */\n  TranslatableString[\"CloseLabel\"] = \"Close\";\n  /** Errors label, used by ErrorList */\n  TranslatableString[\"ErrorsLabel\"] = \"Errors\";\n  /** New additionalProperties string default value, used by ObjectField */\n  TranslatableString[\"NewStringDefault\"] = \"New Value\";\n  /** Add button title, used by AddButton */\n  TranslatableString[\"AddButton\"] = \"Add\";\n  /** Add button title, used by AddButton */\n  TranslatableString[\"AddItemButton\"] = \"Add Item\";\n  /** Copy button title, used by IconButton */\n  TranslatableString[\"CopyButton\"] = \"Copy\";\n  /** Move down button title, used by IconButton */\n  TranslatableString[\"MoveDownButton\"] = \"Move down\";\n  /** Move up button title, used by IconButton */\n  TranslatableString[\"MoveUpButton\"] = \"Move up\";\n  /** Remove button title, used by IconButton */\n  TranslatableString[\"RemoveButton\"] = \"Remove\";\n  /** Now label, used by AltDateWidget */\n  TranslatableString[\"NowLabel\"] = \"Now\";\n  /** Clear label, used by AltDateWidget */\n  TranslatableString[\"ClearLabel\"] = \"Clear\";\n  /** Aria date label, used by DateWidget */\n  TranslatableString[\"AriaDateLabel\"] = \"Select a date\";\n  /** File preview label, used by FileWidget */\n  TranslatableString[\"PreviewLabel\"] = \"Preview\";\n  /** Decrement button aria label, used by UpDownWidget */\n  TranslatableString[\"DecrementAriaLabel\"] = \"Decrease value by 1\";\n  /** Increment button aria label, used by UpDownWidget */\n  TranslatableString[\"IncrementAriaLabel\"] = \"Increase value by 1\";\n  // Strings with replaceable parameters\n  /** Unknown field type reason, where %1 will be replaced with the type as provided by SchemaField */\n  TranslatableString[\"UnknownFieldType\"] = \"Unknown field type %1\";\n  /** Option prefix, where %1 will be replaced with the option index as provided by MultiSchemaField */\n  TranslatableString[\"OptionPrefix\"] = \"Option %1\";\n  /** Option prefix, where %1 and %2 will be replaced by the schema title and option index, respectively as provided by\n   * MultiSchemaField\n   */\n  TranslatableString[\"TitleOptionPrefix\"] = \"%1 option %2\";\n  /** Key label, where %1 will be replaced by the label as provided by WrapIfAdditionalTemplate */\n  TranslatableString[\"KeyLabel\"] = \"%1 Key\";\n  // Strings with replaceable parameters AND/OR that support markdown and html\n  /** Invalid object field configuration as provided by the ObjectField */\n  TranslatableString[\"InvalidObjectField\"] = \"Invalid \\\"%1\\\" object field configuration: <em>%2</em>.\";\n  /** Unsupported field schema, used by UnsupportedField */\n  TranslatableString[\"UnsupportedField\"] = \"Unsupported field schema.\";\n  /** Unsupported field schema, where %1 will be replaced by the idSchema.$id as provided by UnsupportedField */\n  TranslatableString[\"UnsupportedFieldWithId\"] = \"Unsupported field schema for field <code>%1</code>.\";\n  /** Unsupported field schema, where %1 will be replaced by the reason string as provided by UnsupportedField */\n  TranslatableString[\"UnsupportedFieldWithReason\"] = \"Unsupported field schema: <em>%1</em>.\";\n  /** Unsupported field schema, where %1 and %2 will be replaced by the idSchema.$id and reason strings, respectively,\n   * as provided by UnsupportedField\n   */\n  TranslatableString[\"UnsupportedFieldWithIdAndReason\"] = \"Unsupported field schema for field <code>%1</code>: <em>%2</em>.\";\n  /** File name, type and size info, where %1, %2 and %3 will be replaced by the file name, file type and file size as\n   * provided by FileWidget\n   */\n  TranslatableString[\"FilesInfo\"] = \"<strong>%1</strong> (%2, %3 bytes)\";\n})(TranslatableString || (TranslatableString = {}));","map":{"version":3,"names":["TranslatableString"],"sources":["D:\\Reactjs\\my-app\\node_modules\\@rjsf\\utils\\src\\enums.ts"],"sourcesContent":["/** An enumeration of all the translatable strings used by `@rjsf/core` and its themes. The value of each of the\n * enumeration keys is expected to be the actual english string. Some strings contain replaceable parameter values\n * as indicated by `%1`, `%2`, etc. The number after the `%` indicates the order of the parameter. The ordering of\n * parameters is important because some languages may choose to put the second parameter before the first in its\n * translation. Also, some strings are rendered using `markdown-to-jsx` and thus support markdown and inline html.\n */\nexport enum TranslatableString {\n  /** Fallback title of an array item, used by ArrayField */\n  ArrayItemTitle = 'Item',\n  /** Missing items reason, used by ArrayField */\n  MissingItems = 'Missing items definition',\n  /** Yes label, used by BooleanField */\n  YesLabel = 'Yes',\n  /** No label, used by BooleanField */\n  NoLabel = 'No',\n  /** Close label, used by ErrorList */\n  CloseLabel = 'Close',\n  /** Errors label, used by ErrorList */\n  ErrorsLabel = 'Errors',\n  /** New additionalProperties string default value, used by ObjectField */\n  NewStringDefault = 'New Value',\n  /** Add button title, used by AddButton */\n  AddButton = 'Add',\n  /** Add button title, used by AddButton */\n  AddItemButton = 'Add Item',\n  /** Copy button title, used by IconButton */\n  CopyButton = 'Copy',\n  /** Move down button title, used by IconButton */\n  MoveDownButton = 'Move down',\n  /** Move up button title, used by IconButton */\n  MoveUpButton = 'Move up',\n  /** Remove button title, used by IconButton */\n  RemoveButton = 'Remove',\n  /** Now label, used by AltDateWidget */\n  NowLabel = 'Now',\n  /** Clear label, used by AltDateWidget */\n  ClearLabel = 'Clear',\n  /** Aria date label, used by DateWidget */\n  AriaDateLabel = 'Select a date',\n  /** File preview label, used by FileWidget */\n  PreviewLabel = 'Preview',\n  /** Decrement button aria label, used by UpDownWidget */\n  DecrementAriaLabel = 'Decrease value by 1',\n  /** Increment button aria label, used by UpDownWidget */\n  IncrementAriaLabel = 'Increase value by 1',\n  // Strings with replaceable parameters\n  /** Unknown field type reason, where %1 will be replaced with the type as provided by SchemaField */\n  UnknownFieldType = 'Unknown field type %1',\n  /** Option prefix, where %1 will be replaced with the option index as provided by MultiSchemaField */\n  OptionPrefix = 'Option %1',\n  /** Option prefix, where %1 and %2 will be replaced by the schema title and option index, respectively as provided by\n   * MultiSchemaField\n   */\n  TitleOptionPrefix = '%1 option %2',\n  /** Key label, where %1 will be replaced by the label as provided by WrapIfAdditionalTemplate */\n  KeyLabel = '%1 Key',\n  // Strings with replaceable parameters AND/OR that support markdown and html\n  /** Invalid object field configuration as provided by the ObjectField */\n  InvalidObjectField = 'Invalid \"%1\" object field configuration: <em>%2</em>.',\n  /** Unsupported field schema, used by UnsupportedField */\n  UnsupportedField = 'Unsupported field schema.',\n  /** Unsupported field schema, where %1 will be replaced by the idSchema.$id as provided by UnsupportedField */\n  UnsupportedFieldWithId = 'Unsupported field schema for field <code>%1</code>.',\n  /** Unsupported field schema, where %1 will be replaced by the reason string as provided by UnsupportedField */\n  UnsupportedFieldWithReason = 'Unsupported field schema: <em>%1</em>.',\n  /** Unsupported field schema, where %1 and %2 will be replaced by the idSchema.$id and reason strings, respectively,\n   * as provided by UnsupportedField\n   */\n  UnsupportedFieldWithIdAndReason = 'Unsupported field schema for field <code>%1</code>: <em>%2</em>.',\n  /** File name, type and size info, where %1, %2 and %3 will be replaced by the file name, file type and file size as\n   * provided by FileWidget\n   */\n  FilesInfo = '<strong>%1</strong> (%2, %3 bytes)',\n}\n"],"mappings":"AAAA;;;;;;AAMA,WAAYA,kBAmEX;AAnED,WAAYA,kBAAkB;EAC5B;EACAA,kBAAA,2BAAuB;EACvB;EACAA,kBAAA,6CAAyC;EACzC;EACAA,kBAAA,oBAAgB;EAChB;EACAA,kBAAA,kBAAc;EACd;EACAA,kBAAA,wBAAoB;EACpB;EACAA,kBAAA,0BAAsB;EACtB;EACAA,kBAAA,kCAA8B;EAC9B;EACAA,kBAAA,qBAAiB;EACjB;EACAA,kBAAA,8BAA0B;EAC1B;EACAA,kBAAA,uBAAmB;EACnB;EACAA,kBAAA,gCAA4B;EAC5B;EACAA,kBAAA,4BAAwB;EACxB;EACAA,kBAAA,2BAAuB;EACvB;EACAA,kBAAA,oBAAgB;EAChB;EACAA,kBAAA,wBAAoB;EACpB;EACAA,kBAAA,mCAA+B;EAC/B;EACAA,kBAAA,4BAAwB;EACxB;EACAA,kBAAA,8CAA0C;EAC1C;EACAA,kBAAA,8CAA0C;EAC1C;EACA;EACAA,kBAAA,8CAA0C;EAC1C;EACAA,kBAAA,8BAA0B;EAC1B;;;EAGAA,kBAAA,sCAAkC;EAClC;EACAA,kBAAA,uBAAmB;EACnB;EACA;EACAA,kBAAA,kFAA4E;EAC5E;EACAA,kBAAA,kDAA8C;EAC9C;EACAA,kBAAA,kFAA8E;EAC9E;EACAA,kBAAA,yEAAqE;EACrE;;;EAGAA,kBAAA,wGAAoG;EACpG;;;EAGAA,kBAAA,oDAAgD;AAClD,CAAC,EAnEWA,kBAAkB,KAAlBA,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}