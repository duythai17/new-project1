{"ast":null,"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useCallback } from 'react';\nimport { ariaDescribedByIds, enumOptionsIndexForValue, enumOptionsValueForIndex } from '@rjsf/utils';\nfunction getValue(event, multiple) {\n  if (multiple) {\n    return Array.from(event.target.options).slice().filter(o => o.selected).map(o => o.value);\n  }\n  return event.target.value;\n}\n/** The `SelectWidget` is a widget for rendering dropdowns.\n *  It is typically used with string properties constrained with enum options.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction SelectWidget(_ref) {\n  let {\n    schema,\n    id,\n    options,\n    value,\n    required,\n    disabled,\n    readonly,\n    multiple = false,\n    autofocus = false,\n    onChange,\n    onBlur,\n    onFocus,\n    placeholder\n  } = _ref;\n  const {\n    enumOptions,\n    enumDisabled,\n    emptyValue: optEmptyVal\n  } = options;\n  const emptyValue = multiple ? [] : '';\n  const handleFocus = useCallback(event => {\n    const newValue = getValue(event, multiple);\n    return onFocus(id, enumOptionsValueForIndex(newValue, enumOptions, optEmptyVal));\n  }, [onFocus, id, schema, multiple, options]);\n  const handleBlur = useCallback(event => {\n    const newValue = getValue(event, multiple);\n    return onBlur(id, enumOptionsValueForIndex(newValue, enumOptions, optEmptyVal));\n  }, [onBlur, id, schema, multiple, options]);\n  const handleChange = useCallback(event => {\n    const newValue = getValue(event, multiple);\n    return onChange(enumOptionsValueForIndex(newValue, enumOptions, optEmptyVal));\n  }, [onChange, schema, multiple, options]);\n  const selectedIndexes = enumOptionsIndexForValue(value, enumOptions, multiple);\n  return _jsxs(\"select\", {\n    id: id,\n    name: id,\n    multiple: multiple,\n    className: 'form-control',\n    value: typeof selectedIndexes === 'undefined' ? emptyValue : selectedIndexes,\n    required: required,\n    disabled: disabled || readonly,\n    autoFocus: autofocus,\n    onBlur: handleBlur,\n    onFocus: handleFocus,\n    onChange: handleChange,\n    \"aria-describedby\": ariaDescribedByIds(id),\n    children: [!multiple && schema.default === undefined && _jsx(\"option\", {\n      value: '',\n      children: placeholder\n    }), Array.isArray(enumOptions) && enumOptions.map((_ref2, i) => {\n      let {\n        value,\n        label\n      } = _ref2;\n      const disabled = enumDisabled && enumDisabled.indexOf(value) !== -1;\n      return _jsx(\"option\", {\n        value: String(i),\n        disabled: disabled,\n        children: label\n      }, i);\n    })]\n  });\n}\nexport default SelectWidget;","map":{"version":3,"names":["useCallback","ariaDescribedByIds","enumOptionsIndexForValue","enumOptionsValueForIndex","getValue","event","multiple","Array","from","target","options","slice","filter","o","selected","map","value","SelectWidget","_ref","schema","id","required","disabled","readonly","autofocus","onChange","onBlur","onFocus","placeholder","enumOptions","enumDisabled","emptyValue","optEmptyVal","handleFocus","newValue","handleBlur","handleChange","selectedIndexes","_jsxs","name","className","autoFocus","children","default","undefined","_jsx","isArray","_ref2","i","label","indexOf","String"],"sources":["D:\\Reactjs\\my-app\\node_modules\\@rjsf\\core\\src\\components\\widgets\\SelectWidget.tsx"],"sourcesContent":["import { ChangeEvent, FocusEvent, SyntheticEvent, useCallback } from 'react';\nimport {\n  ariaDescribedByIds,\n  enumOptionsIndexForValue,\n  enumOptionsValueForIndex,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from '@rjsf/utils';\n\nfunction getValue(event: SyntheticEvent<HTMLSelectElement>, multiple: boolean) {\n  if (multiple) {\n    return Array.from((event.target as HTMLSelectElement).options)\n      .slice()\n      .filter((o) => o.selected)\n      .map((o) => o.value);\n  }\n  return (event.target as HTMLSelectElement).value;\n}\n\n/** The `SelectWidget` is a widget for rendering dropdowns.\n *  It is typically used with string properties constrained with enum options.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction SelectWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  schema,\n  id,\n  options,\n  value,\n  required,\n  disabled,\n  readonly,\n  multiple = false,\n  autofocus = false,\n  onChange,\n  onBlur,\n  onFocus,\n  placeholder,\n}: WidgetProps<T, S, F>) {\n  const { enumOptions, enumDisabled, emptyValue: optEmptyVal } = options;\n  const emptyValue = multiple ? [] : '';\n\n  const handleFocus = useCallback(\n    (event: FocusEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onFocus(id, enumOptionsValueForIndex<S>(newValue, enumOptions, optEmptyVal));\n    },\n    [onFocus, id, schema, multiple, options]\n  );\n\n  const handleBlur = useCallback(\n    (event: FocusEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onBlur(id, enumOptionsValueForIndex<S>(newValue, enumOptions, optEmptyVal));\n    },\n    [onBlur, id, schema, multiple, options]\n  );\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onChange(enumOptionsValueForIndex<S>(newValue, enumOptions, optEmptyVal));\n    },\n    [onChange, schema, multiple, options]\n  );\n\n  const selectedIndexes = enumOptionsIndexForValue<S>(value, enumOptions, multiple);\n\n  return (\n    <select\n      id={id}\n      name={id}\n      multiple={multiple}\n      className='form-control'\n      value={typeof selectedIndexes === 'undefined' ? emptyValue : selectedIndexes}\n      required={required}\n      disabled={disabled || readonly}\n      autoFocus={autofocus}\n      onBlur={handleBlur}\n      onFocus={handleFocus}\n      onChange={handleChange}\n      aria-describedby={ariaDescribedByIds<T>(id)}\n    >\n      {!multiple && schema.default === undefined && <option value=''>{placeholder}</option>}\n      {Array.isArray(enumOptions) &&\n        enumOptions.map(({ value, label }, i) => {\n          const disabled = enumDisabled && enumDisabled.indexOf(value) !== -1;\n          return (\n            <option key={i} value={String(i)} disabled={disabled}>\n              {label}\n            </option>\n          );\n        })}\n    </select>\n  );\n}\n\nexport default SelectWidget;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}