{"ast":null,"code":"\"use strict\";\n\nvar _taggedTemplateLiteral = require(\"D:/Reactjs/my-app/node_modules/@babel/runtime/helpers/taggedTemplateLiteral.js\").default;\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ValueScope = exports.ValueScopeName = exports.Scope = exports.varKinds = exports.UsedValueState = void 0;\nconst code_1 = require(\"./code\");\nclass ValueError extends Error {\n  constructor(name) {\n    super(\"CodeGen: \\\"code\\\" for \".concat(name, \" not defined\"));\n    this.value = name.value;\n  }\n}\nvar UsedValueState;\n(function (UsedValueState) {\n  UsedValueState[UsedValueState[\"Started\"] = 0] = \"Started\";\n  UsedValueState[UsedValueState[\"Completed\"] = 1] = \"Completed\";\n})(UsedValueState = exports.UsedValueState || (exports.UsedValueState = {}));\nexports.varKinds = {\n  const: new code_1.Name(\"const\"),\n  let: new code_1.Name(\"let\"),\n  var: new code_1.Name(\"var\")\n};\nclass Scope {\n  constructor() {\n    let {\n      prefixes,\n      parent\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this._names = {};\n    this._prefixes = prefixes;\n    this._parent = parent;\n  }\n  toName(nameOrPrefix) {\n    return nameOrPrefix instanceof code_1.Name ? nameOrPrefix : this.name(nameOrPrefix);\n  }\n  name(prefix) {\n    return new code_1.Name(this._newName(prefix));\n  }\n  _newName(prefix) {\n    const ng = this._names[prefix] || this._nameGroup(prefix);\n    return \"\".concat(prefix).concat(ng.index++);\n  }\n  _nameGroup(prefix) {\n    var _a, _b;\n    if (((_b = (_a = this._parent) === null || _a === void 0 ? void 0 : _a._prefixes) === null || _b === void 0 ? void 0 : _b.has(prefix)) || this._prefixes && !this._prefixes.has(prefix)) {\n      throw new Error(\"CodeGen: prefix \\\"\".concat(prefix, \"\\\" is not allowed in this scope\"));\n    }\n    return this._names[prefix] = {\n      prefix,\n      index: 0\n    };\n  }\n}\nexports.Scope = Scope;\nclass ValueScopeName extends code_1.Name {\n  constructor(prefix, nameStr) {\n    super(nameStr);\n    this.prefix = prefix;\n  }\n  setValue(value, _ref) {\n    let {\n      property,\n      itemIndex\n    } = _ref;\n    this.value = value;\n    this.scopePath = (0, code_1._)(_templateObject || (_templateObject = _taggedTemplateLiteral([\".\", \"[\", \"]\"])), new code_1.Name(property), itemIndex);\n  }\n}\nexports.ValueScopeName = ValueScopeName;\nconst line = (0, code_1._)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\\n\"], [\"\\\\n\"])));\nclass ValueScope extends Scope {\n  constructor(opts) {\n    super(opts);\n    this._values = {};\n    this._scope = opts.scope;\n    this.opts = {\n      ...opts,\n      _n: opts.lines ? line : code_1.nil\n    };\n  }\n  get() {\n    return this._scope;\n  }\n  name(prefix) {\n    return new ValueScopeName(prefix, this._newName(prefix));\n  }\n  value(nameOrPrefix, value) {\n    var _a;\n    if (value.ref === undefined) throw new Error(\"CodeGen: ref must be passed in value\");\n    const name = this.toName(nameOrPrefix);\n    const {\n      prefix\n    } = name;\n    const valueKey = (_a = value.key) !== null && _a !== void 0 ? _a : value.ref;\n    let vs = this._values[prefix];\n    if (vs) {\n      const _name = vs.get(valueKey);\n      if (_name) return _name;\n    } else {\n      vs = this._values[prefix] = new Map();\n    }\n    vs.set(valueKey, name);\n    const s = this._scope[prefix] || (this._scope[prefix] = []);\n    const itemIndex = s.length;\n    s[itemIndex] = value.ref;\n    name.setValue(value, {\n      property: prefix,\n      itemIndex\n    });\n    return name;\n  }\n  getValue(prefix, keyOrRef) {\n    const vs = this._values[prefix];\n    if (!vs) return;\n    return vs.get(keyOrRef);\n  }\n  scopeRefs(scopeName) {\n    let values = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._values;\n    return this._reduceValues(values, name => {\n      if (name.scopePath === undefined) throw new Error(\"CodeGen: name \\\"\".concat(name, \"\\\" has no value\"));\n      return (0, code_1._)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"\", \"\", \"\"])), scopeName, name.scopePath);\n    });\n  }\n  scopeCode() {\n    let values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._values;\n    let usedValues = arguments.length > 1 ? arguments[1] : undefined;\n    let getCode = arguments.length > 2 ? arguments[2] : undefined;\n    return this._reduceValues(values, name => {\n      if (name.value === undefined) throw new Error(\"CodeGen: name \\\"\".concat(name, \"\\\" has no value\"));\n      return name.value.code;\n    }, usedValues, getCode);\n  }\n  _reduceValues(values, valueCode) {\n    let usedValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let getCode = arguments.length > 3 ? arguments[3] : undefined;\n    let code = code_1.nil;\n    for (const prefix in values) {\n      const vs = values[prefix];\n      if (!vs) continue;\n      const nameSet = usedValues[prefix] = usedValues[prefix] || new Map();\n      vs.forEach(name => {\n        if (nameSet.has(name)) return;\n        nameSet.set(name, UsedValueState.Started);\n        let c = valueCode(name);\n        if (c) {\n          const def = this.opts.es5 ? exports.varKinds.var : exports.varKinds.const;\n          code = (0, code_1._)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"\", \"\", \" \", \" = \", \";\", \"\"])), code, def, name, c, this.opts._n);\n        } else if (c = getCode === null || getCode === void 0 ? void 0 : getCode(name)) {\n          code = (0, code_1._)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([\"\", \"\", \"\", \"\"])), code, c, this.opts._n);\n        } else {\n          throw new ValueError(name);\n        }\n        nameSet.set(name, UsedValueState.Completed);\n      });\n    }\n    return code;\n  }\n}\nexports.ValueScope = ValueScope;","map":{"version":3,"names":["code_1","require","ValueError","Error","constructor","name","concat","value","UsedValueState","exports","varKinds","const","Name","let","var","Scope","prefixes","parent","arguments","length","undefined","_names","_prefixes","_parent","toName","nameOrPrefix","prefix","_newName","ng","_nameGroup","index","_b","_a","has","ValueScopeName","nameStr","setValue","_ref","property","itemIndex","scopePath","_","_templateObject","_taggedTemplateLiteral","line","_templateObject2","ValueScope","opts","_values","_scope","scope","_n","lines","nil","get","ref","valueKey","key","vs","_name","Map","set","s","getValue","keyOrRef","scopeRefs","scopeName","values","_reduceValues","_templateObject3","scopeCode","usedValues","getCode","code","valueCode","nameSet","forEach","Started","c","def","es5","_templateObject4","_templateObject5","Completed"],"sources":["D:\\Reactjs\\my-app\\node_modules\\ajv-formats\\node_modules\\ajv\\lib\\compile\\codegen\\scope.ts"],"sourcesContent":["import {_, nil, Code, Name} from \"./code\"\n\ninterface NameGroup {\n  prefix: string\n  index: number\n}\n\nexport interface NameValue {\n  ref: ValueReference // this is the reference to any value that can be referred to from generated code via `globals` var in the closure\n  key?: unknown // any key to identify a global to avoid duplicates, if not passed ref is used\n  code?: Code // this is the code creating the value needed for standalone code wit_out closure - can be a primitive value, function or import (`require`)\n}\n\nexport type ValueReference = unknown // possibly make CodeGen parameterized type on this type\n\nclass ValueError extends Error {\n  readonly value?: NameValue\n  constructor(name: ValueScopeName) {\n    super(`CodeGen: \"code\" for ${name} not defined`)\n    this.value = name.value\n  }\n}\n\ninterface ScopeOptions {\n  prefixes?: Set<string>\n  parent?: Scope\n}\n\ninterface ValueScopeOptions extends ScopeOptions {\n  scope: ScopeStore\n  es5?: boolean\n  lines?: boolean\n}\n\nexport type ScopeStore = Record<string, ValueReference[] | undefined>\n\ntype ScopeValues = {\n  [Prefix in string]?: Map<unknown, ValueScopeName>\n}\n\nexport type ScopeValueSets = {\n  [Prefix in string]?: Set<ValueScopeName>\n}\n\nexport enum UsedValueState {\n  Started,\n  Completed,\n}\n\nexport type UsedScopeValues = {\n  [Prefix in string]?: Map<ValueScopeName, UsedValueState | undefined>\n}\n\nexport const varKinds = {\n  const: new Name(\"const\"),\n  let: new Name(\"let\"),\n  var: new Name(\"var\"),\n}\n\nexport class Scope {\n  protected readonly _names: {[Prefix in string]?: NameGroup} = {}\n  protected readonly _prefixes?: Set<string>\n  protected readonly _parent?: Scope\n\n  constructor({prefixes, parent}: ScopeOptions = {}) {\n    this._prefixes = prefixes\n    this._parent = parent\n  }\n\n  toName(nameOrPrefix: Name | string): Name {\n    return nameOrPrefix instanceof Name ? nameOrPrefix : this.name(nameOrPrefix)\n  }\n\n  name(prefix: string): Name {\n    return new Name(this._newName(prefix))\n  }\n\n  protected _newName(prefix: string): string {\n    const ng = this._names[prefix] || this._nameGroup(prefix)\n    return `${prefix}${ng.index++}`\n  }\n\n  private _nameGroup(prefix: string): NameGroup {\n    if (this._parent?._prefixes?.has(prefix) || (this._prefixes && !this._prefixes.has(prefix))) {\n      throw new Error(`CodeGen: prefix \"${prefix}\" is not allowed in this scope`)\n    }\n    return (this._names[prefix] = {prefix, index: 0})\n  }\n}\n\ninterface ScopePath {\n  property: string\n  itemIndex: number\n}\n\nexport class ValueScopeName extends Name {\n  readonly prefix: string\n  value?: NameValue\n  scopePath?: Code\n\n  constructor(prefix: string, nameStr: string) {\n    super(nameStr)\n    this.prefix = prefix\n  }\n\n  setValue(value: NameValue, {property, itemIndex}: ScopePath): void {\n    this.value = value\n    this.scopePath = _`.${new Name(property)}[${itemIndex}]`\n  }\n}\n\ninterface VSOptions extends ValueScopeOptions {\n  _n: Code\n}\n\nconst line = _`\\n`\n\nexport class ValueScope extends Scope {\n  protected readonly _values: ScopeValues = {}\n  protected readonly _scope: ScopeStore\n  readonly opts: VSOptions\n\n  constructor(opts: ValueScopeOptions) {\n    super(opts)\n    this._scope = opts.scope\n    this.opts = {...opts, _n: opts.lines ? line : nil}\n  }\n\n  get(): ScopeStore {\n    return this._scope\n  }\n\n  name(prefix: string): ValueScopeName {\n    return new ValueScopeName(prefix, this._newName(prefix))\n  }\n\n  value(nameOrPrefix: ValueScopeName | string, value: NameValue): ValueScopeName {\n    if (value.ref === undefined) throw new Error(\"CodeGen: ref must be passed in value\")\n    const name = this.toName(nameOrPrefix) as ValueScopeName\n    const {prefix} = name\n    const valueKey = value.key ?? value.ref\n    let vs = this._values[prefix]\n    if (vs) {\n      const _name = vs.get(valueKey)\n      if (_name) return _name\n    } else {\n      vs = this._values[prefix] = new Map()\n    }\n    vs.set(valueKey, name)\n\n    const s = this._scope[prefix] || (this._scope[prefix] = [])\n    const itemIndex = s.length\n    s[itemIndex] = value.ref\n    name.setValue(value, {property: prefix, itemIndex})\n    return name\n  }\n\n  getValue(prefix: string, keyOrRef: unknown): ValueScopeName | undefined {\n    const vs = this._values[prefix]\n    if (!vs) return\n    return vs.get(keyOrRef)\n  }\n\n  scopeRefs(scopeName: Name, values: ScopeValues | ScopeValueSets = this._values): Code {\n    return this._reduceValues(values, (name: ValueScopeName) => {\n      if (name.scopePath === undefined) throw new Error(`CodeGen: name \"${name}\" has no value`)\n      return _`${scopeName}${name.scopePath}`\n    })\n  }\n\n  scopeCode(\n    values: ScopeValues | ScopeValueSets = this._values,\n    usedValues?: UsedScopeValues,\n    getCode?: (n: ValueScopeName) => Code | undefined\n  ): Code {\n    return this._reduceValues(\n      values,\n      (name: ValueScopeName) => {\n        if (name.value === undefined) throw new Error(`CodeGen: name \"${name}\" has no value`)\n        return name.value.code\n      },\n      usedValues,\n      getCode\n    )\n  }\n\n  private _reduceValues(\n    values: ScopeValues | ScopeValueSets,\n    valueCode: (n: ValueScopeName) => Code | undefined,\n    usedValues: UsedScopeValues = {},\n    getCode?: (n: ValueScopeName) => Code | undefined\n  ): Code {\n    let code: Code = nil\n    for (const prefix in values) {\n      const vs = values[prefix]\n      if (!vs) continue\n      const nameSet = (usedValues[prefix] = usedValues[prefix] || new Map())\n      vs.forEach((name: ValueScopeName) => {\n        if (nameSet.has(name)) return\n        nameSet.set(name, UsedValueState.Started)\n        let c = valueCode(name)\n        if (c) {\n          const def = this.opts.es5 ? varKinds.var : varKinds.const\n          code = _`${code}${def} ${name} = ${c};${this.opts._n}`\n        } else if ((c = getCode?.(name))) {\n          code = _`${code}${c}${this.opts._n}`\n        } else {\n          throw new ValueError(name)\n        }\n        nameSet.set(name, UsedValueState.Completed)\n      })\n    }\n    return code\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}