{"ast":null,"code":"/** Returns the value(s) from `allEnumOptions` at the index(es) provided by `valueIndex`. If `valueIndex` is not an\n * array AND the index is not valid for `allEnumOptions`, `emptyValue` is returned. If `valueIndex` is an array, AND it\n * contains an invalid index, the returned array will have the resulting undefined values filtered out, leaving only\n * valid values or in the worst case, an empty array.\n *\n * @param valueIndex - The index(es) of the value(s) that should be returned\n * @param [allEnumOptions=[]] - The list of all the known enumOptions\n * @param [emptyValue] - The value to return when the non-array `valueIndex` does not refer to a real option\n * @returns - The single or list of values specified by the single or list of indexes if they are valid. Otherwise,\n *        `emptyValue` or an empty list.\n */\nexport default function enumOptionsValueForIndex(valueIndex, allEnumOptions = [], emptyValue) {\n  if (Array.isArray(valueIndex)) {\n    return valueIndex.map(index => enumOptionsValueForIndex(index, allEnumOptions)).filter(val => val);\n  }\n  // So Number(null) and Number('') both return 0, so use emptyValue for those two values\n  const index = valueIndex === '' || valueIndex === null ? -1 : Number(valueIndex);\n  const option = allEnumOptions[index];\n  return option ? option.value : emptyValue;\n}","map":{"version":3,"names":["enumOptionsValueForIndex","valueIndex","allEnumOptions","emptyValue","Array","isArray","map","index","filter","val","Number","option","value"],"sources":["D:\\Reactjs\\my-app\\node_modules\\@rjsf\\utils\\src\\enumOptionsValueForIndex.ts"],"sourcesContent":["import { EnumOptionsType, RJSFSchema, StrictRJSFSchema } from './types';\n\n/** Returns the value(s) from `allEnumOptions` at the index(es) provided by `valueIndex`. If `valueIndex` is not an\n * array AND the index is not valid for `allEnumOptions`, `emptyValue` is returned. If `valueIndex` is an array, AND it\n * contains an invalid index, the returned array will have the resulting undefined values filtered out, leaving only\n * valid values or in the worst case, an empty array.\n *\n * @param valueIndex - The index(es) of the value(s) that should be returned\n * @param [allEnumOptions=[]] - The list of all the known enumOptions\n * @param [emptyValue] - The value to return when the non-array `valueIndex` does not refer to a real option\n * @returns - The single or list of values specified by the single or list of indexes if they are valid. Otherwise,\n *        `emptyValue` or an empty list.\n */\nexport default function enumOptionsValueForIndex<S extends StrictRJSFSchema = RJSFSchema>(\n  valueIndex: string | number | Array<string | number>,\n  allEnumOptions: EnumOptionsType<S>[] = [],\n  emptyValue?: EnumOptionsType<S>['value']\n): EnumOptionsType<S>['value'] | EnumOptionsType<S>['value'][] | undefined {\n  if (Array.isArray(valueIndex)) {\n    return valueIndex.map((index) => enumOptionsValueForIndex(index, allEnumOptions)).filter((val) => val);\n  }\n  // So Number(null) and Number('') both return 0, so use emptyValue for those two values\n  const index = valueIndex === '' || valueIndex === null ? -1 : Number(valueIndex);\n  const option = allEnumOptions[index];\n  return option ? option.value : emptyValue;\n}\n"],"mappings":"AAEA;;;;;;;;;;;AAWA,eAAc,SAAUA,wBAAwBA,CAC9CC,UAAoD,EACpDC,cAAA,GAAuC,EAAE,EACzCC,UAAwC;EAExC,IAAIC,KAAK,CAACC,OAAO,CAACJ,UAAU,CAAC,EAAE;IAC7B,OAAOA,UAAU,CAACK,GAAG,CAAEC,KAAK,IAAKP,wBAAwB,CAACO,KAAK,EAAEL,cAAc,CAAC,CAAC,CAACM,MAAM,CAAEC,GAAG,IAAKA,GAAG,CAAC;;EAExG;EACA,MAAMF,KAAK,GAAGN,UAAU,KAAK,EAAE,IAAIA,UAAU,KAAK,IAAI,GAAG,CAAC,CAAC,GAAGS,MAAM,CAACT,UAAU,CAAC;EAChF,MAAMU,MAAM,GAAGT,cAAc,CAACK,KAAK,CAAC;EACpC,OAAOI,MAAM,GAAGA,MAAM,CAACC,KAAK,GAAGT,UAAU;AAC3C"},"metadata":{},"sourceType":"module","externalDependencies":[]}