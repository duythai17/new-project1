{"ast":null,"code":"import toConstant from './toConstant';\n/** Gets the list of options from the schema. If the schema has an enum list, then those enum values are returned. The\n * labels for the options will be extracted from the non-standard, RJSF-deprecated `enumNames` if it exists, otherwise\n * the label will be the same as the `value`. If the schema has a `oneOf` or `anyOf`, then the value is the list of\n * `const` values from the schema and the label is either the `schema.title` or the value.\n *\n * @param schema - The schema from which to extract the options list\n * @returns - The list of options from the schema\n */\nexport default function optionsList(schema) {\n  // enumNames was deprecated in v5 and is intentionally omitted from the RJSFSchema type.\n  // Cast the type to include enumNames so the feature still works.\n  const schemaWithEnumNames = schema;\n  if (schemaWithEnumNames.enumNames && process.env.NODE_ENV !== 'production') {\n    console.warn('The enumNames property is deprecated and may be removed in a future major release.');\n  }\n  if (schema.enum) {\n    return schema.enum.map((value, i) => {\n      const label = schemaWithEnumNames.enumNames && schemaWithEnumNames.enumNames[i] || String(value);\n      return {\n        label,\n        value\n      };\n    });\n  }\n  const altSchemas = schema.oneOf || schema.anyOf;\n  return altSchemas && altSchemas.map(aSchemaDef => {\n    const aSchema = aSchemaDef;\n    const value = toConstant(aSchema);\n    const label = aSchema.title || String(value);\n    return {\n      schema: aSchema,\n      label,\n      value\n    };\n  });\n}","map":{"version":3,"names":["toConstant","optionsList","schema","schemaWithEnumNames","enumNames","process","env","NODE_ENV","console","warn","enum","map","value","i","label","String","altSchemas","oneOf","anyOf","aSchemaDef","aSchema","title"],"sources":["D:\\Reactjs\\my-app\\node_modules\\@rjsf\\utils\\src\\optionsList.ts"],"sourcesContent":["import toConstant from './toConstant';\nimport { RJSFSchema, EnumOptionsType, StrictRJSFSchema } from './types';\n\n/** Gets the list of options from the schema. If the schema has an enum list, then those enum values are returned. The\n * labels for the options will be extracted from the non-standard, RJSF-deprecated `enumNames` if it exists, otherwise\n * the label will be the same as the `value`. If the schema has a `oneOf` or `anyOf`, then the value is the list of\n * `const` values from the schema and the label is either the `schema.title` or the value.\n *\n * @param schema - The schema from which to extract the options list\n * @returns - The list of options from the schema\n */\nexport default function optionsList<S extends StrictRJSFSchema = RJSFSchema>(\n  schema: S\n): EnumOptionsType<S>[] | undefined {\n  // enumNames was deprecated in v5 and is intentionally omitted from the RJSFSchema type.\n  // Cast the type to include enumNames so the feature still works.\n  const schemaWithEnumNames = schema as S & { enumNames?: string[] };\n  if (schemaWithEnumNames.enumNames && process.env.NODE_ENV !== 'production') {\n    console.warn('The enumNames property is deprecated and may be removed in a future major release.');\n  }\n  if (schema.enum) {\n    return schema.enum.map((value, i) => {\n      const label = (schemaWithEnumNames.enumNames && schemaWithEnumNames.enumNames[i]) || String(value);\n      return { label, value };\n    });\n  }\n  const altSchemas = schema.oneOf || schema.anyOf;\n  return (\n    altSchemas &&\n    altSchemas.map((aSchemaDef) => {\n      const aSchema = aSchemaDef as S;\n      const value = toConstant(aSchema);\n      const label = aSchema.title || String(value);\n      return {\n        schema: aSchema,\n        label,\n        value,\n      };\n    })\n  );\n}\n"],"mappings":"AAAA,OAAOA,UAAU,MAAM,cAAc;AAGrC;;;;;;;;AAQA,eAAc,SAAUC,WAAWA,CACjCC,MAAS;EAET;EACA;EACA,MAAMC,mBAAmB,GAAGD,MAAsC;EAClE,IAAIC,mBAAmB,CAACC,SAAS,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;IAC1EC,OAAO,CAACC,IAAI,CAAC,oFAAoF,CAAC;;EAEpG,IAAIP,MAAM,CAACQ,IAAI,EAAE;IACf,OAAOR,MAAM,CAACQ,IAAI,CAACC,GAAG,CAAC,CAACC,KAAK,EAAEC,CAAC,KAAI;MAClC,MAAMC,KAAK,GAAIX,mBAAmB,CAACC,SAAS,IAAID,mBAAmB,CAACC,SAAS,CAACS,CAAC,CAAC,IAAKE,MAAM,CAACH,KAAK,CAAC;MAClG,OAAO;QAAEE,KAAK;QAAEF;MAAK,CAAE;IACzB,CAAC,CAAC;;EAEJ,MAAMI,UAAU,GAAGd,MAAM,CAACe,KAAK,IAAIf,MAAM,CAACgB,KAAK;EAC/C,OACEF,UAAU,IACVA,UAAU,CAACL,GAAG,CAAEQ,UAAU,IAAI;IAC5B,MAAMC,OAAO,GAAGD,UAAe;IAC/B,MAAMP,KAAK,GAAGZ,UAAU,CAACoB,OAAO,CAAC;IACjC,MAAMN,KAAK,GAAGM,OAAO,CAACC,KAAK,IAAIN,MAAM,CAACH,KAAK,CAAC;IAC5C,OAAO;MACLV,MAAM,EAAEkB,OAAO;MACfN,KAAK;MACLF;KACD;EACH,CAAC,CAAC;AAEN"},"metadata":{},"sourceType":"module","externalDependencies":[]}