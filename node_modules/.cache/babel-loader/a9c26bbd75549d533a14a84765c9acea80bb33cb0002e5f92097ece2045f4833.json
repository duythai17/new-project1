{"ast":null,"code":"import { UI_OPTIONS_KEY, UI_WIDGET_KEY } from './constants';\nimport isObject from './isObject';\n/** Get all passed options from ui:options, and ui:<optionName>, returning them in an object with the `ui:`\n * stripped off. Any `globalOptions` will always be returned, unless they are overridden by options in the `uiSchema`.\n *\n * @param [uiSchema={}] - The UI Schema from which to get any `ui:xxx` options\n * @param [globalOptions={}] - The optional Global UI Schema from which to get any fallback `xxx` options\n * @returns - An object containing all the `ui:xxx` options with the `ui:` stripped off along with all `globalOptions`\n */\nexport default function getUiOptions(uiSchema = {}, globalOptions = {}) {\n  return Object.keys(uiSchema).filter(key => key.indexOf('ui:') === 0).reduce((options, key) => {\n    const value = uiSchema[key];\n    if (key === UI_WIDGET_KEY && isObject(value)) {\n      console.error('Setting options via ui:widget object is no longer supported, use ui:options instead');\n      return options;\n    }\n    if (key === UI_OPTIONS_KEY && isObject(value)) {\n      return {\n        ...options,\n        ...value\n      };\n    }\n    return {\n      ...options,\n      [key.substring(3)]: value\n    };\n  }, {\n    ...globalOptions\n  });\n}","map":{"version":3,"names":["UI_OPTIONS_KEY","UI_WIDGET_KEY","isObject","getUiOptions","uiSchema","globalOptions","Object","keys","filter","key","indexOf","reduce","options","value","console","error","substring"],"sources":["D:\\Reactjs\\my-app\\node_modules\\@rjsf\\utils\\src\\getUiOptions.ts"],"sourcesContent":["import { UI_OPTIONS_KEY, UI_WIDGET_KEY } from './constants';\nimport isObject from './isObject';\nimport { FormContextType, GlobalUISchemaOptions, RJSFSchema, StrictRJSFSchema, UIOptionsType, UiSchema } from './types';\n\n/** Get all passed options from ui:options, and ui:<optionName>, returning them in an object with the `ui:`\n * stripped off. Any `globalOptions` will always be returned, unless they are overridden by options in the `uiSchema`.\n *\n * @param [uiSchema={}] - The UI Schema from which to get any `ui:xxx` options\n * @param [globalOptions={}] - The optional Global UI Schema from which to get any fallback `xxx` options\n * @returns - An object containing all the `ui:xxx` options with the `ui:` stripped off along with all `globalOptions`\n */\nexport default function getUiOptions<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  uiSchema: UiSchema<T, S, F> = {},\n  globalOptions: GlobalUISchemaOptions = {}\n): UIOptionsType<T, S, F> {\n  return Object.keys(uiSchema)\n    .filter((key) => key.indexOf('ui:') === 0)\n    .reduce(\n      (options, key) => {\n        const value = uiSchema[key];\n        if (key === UI_WIDGET_KEY && isObject(value)) {\n          console.error('Setting options via ui:widget object is no longer supported, use ui:options instead');\n          return options;\n        }\n        if (key === UI_OPTIONS_KEY && isObject(value)) {\n          return { ...options, ...value };\n        }\n        return { ...options, [key.substring(3)]: value };\n      },\n      { ...globalOptions }\n    );\n}\n"],"mappings":"AAAA,SAASA,cAAc,EAAEC,aAAa,QAAQ,aAAa;AAC3D,OAAOC,QAAQ,MAAM,YAAY;AAGjC;;;;;;;AAOA,eAAc,SAAUC,YAAYA,CAClCC,QAAA,GAA8B,EAAE,EAChCC,aAAA,GAAuC,EAAE;EAEzC,OAAOC,MAAM,CAACC,IAAI,CAACH,QAAQ,CAAC,CACzBI,MAAM,CAAEC,GAAG,IAAKA,GAAG,CAACC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CACzCC,MAAM,CACL,CAACC,OAAO,EAAEH,GAAG,KAAI;IACf,MAAMI,KAAK,GAAGT,QAAQ,CAACK,GAAG,CAAC;IAC3B,IAAIA,GAAG,KAAKR,aAAa,IAAIC,QAAQ,CAACW,KAAK,CAAC,EAAE;MAC5CC,OAAO,CAACC,KAAK,CAAC,qFAAqF,CAAC;MACpG,OAAOH,OAAO;;IAEhB,IAAIH,GAAG,KAAKT,cAAc,IAAIE,QAAQ,CAACW,KAAK,CAAC,EAAE;MAC7C,OAAO;QAAE,GAAGD,OAAO;QAAE,GAAGC;MAAK,CAAE;;IAEjC,OAAO;MAAE,GAAGD,OAAO;MAAE,CAACH,GAAG,CAACO,SAAS,CAAC,CAAC,CAAC,GAAGH;IAAK,CAAE;EAClD,CAAC,EACD;IAAE,GAAGR;EAAa,CAAE,CACrB;AACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}