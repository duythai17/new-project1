{"ast":null,"code":"/** Given a specific `value` attempts to guess the type of a schema element. In the case where we have to implicitly\n *  create a schema, it is useful to know what type to use based on the data we are defining.\n *\n * @param value - The value from which to guess the type\n * @returns - The best guess for the object type\n */\nexport default function guessType(value) {\n  if (Array.isArray(value)) {\n    return 'array';\n  }\n  if (typeof value === 'string') {\n    return 'string';\n  }\n  if (value == null) {\n    return 'null';\n  }\n  if (typeof value === 'boolean') {\n    return 'boolean';\n  }\n  if (!isNaN(value)) {\n    return 'number';\n  }\n  if (typeof value === 'object') {\n    return 'object';\n  }\n  // Default to string if we can't figure it out\n  return 'string';\n}","map":{"version":3,"names":["guessType","value","Array","isArray","isNaN"],"sources":["D:\\Reactjs\\my-app\\node_modules\\@rjsf\\utils\\src\\guessType.ts"],"sourcesContent":["/** Given a specific `value` attempts to guess the type of a schema element. In the case where we have to implicitly\n *  create a schema, it is useful to know what type to use based on the data we are defining.\n *\n * @param value - The value from which to guess the type\n * @returns - The best guess for the object type\n */\nexport default function guessType(value: any) {\n  if (Array.isArray(value)) {\n    return 'array';\n  }\n  if (typeof value === 'string') {\n    return 'string';\n  }\n  if (value == null) {\n    return 'null';\n  }\n  if (typeof value === 'boolean') {\n    return 'boolean';\n  }\n  if (!isNaN(value)) {\n    return 'number';\n  }\n  if (typeof value === 'object') {\n    return 'object';\n  }\n  // Default to string if we can't figure it out\n  return 'string';\n}\n"],"mappings":"AAAA;;;;;;AAMA,eAAc,SAAUA,SAASA,CAACC,KAAU;EAC1C,IAAIC,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,EAAE;IACxB,OAAO,OAAO;;EAEhB,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC7B,OAAO,QAAQ;;EAEjB,IAAIA,KAAK,IAAI,IAAI,EAAE;IACjB,OAAO,MAAM;;EAEf,IAAI,OAAOA,KAAK,KAAK,SAAS,EAAE;IAC9B,OAAO,SAAS;;EAElB,IAAI,CAACG,KAAK,CAACH,KAAK,CAAC,EAAE;IACjB,OAAO,QAAQ;;EAEjB,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC7B,OAAO,QAAQ;;EAEjB;EACA,OAAO,QAAQ;AACjB"},"metadata":{},"sourceType":"module","externalDependencies":[]}