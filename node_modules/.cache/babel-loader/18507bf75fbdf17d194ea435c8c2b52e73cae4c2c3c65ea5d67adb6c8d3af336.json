{"ast":null,"code":"import getUiOptions from './getUiOptions';\n/** Checks to see if the `uiSchema` contains the `widget` field and that the widget is not `hidden`\n *\n * @param uiSchema - The UI Schema from which to detect if it is customized\n * @returns - True if the `uiSchema` describes a custom widget, false otherwise\n */\nexport default function isCustomWidget(uiSchema = {}) {\n  return (\n    // TODO: Remove the `&& uiSchema['ui:widget'] !== 'hidden'` once we support hidden widgets for arrays.\n    // https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/#hidden-widgets\n    'widget' in getUiOptions(uiSchema) && getUiOptions(uiSchema)['widget'] !== 'hidden'\n  );\n}","map":{"version":3,"names":["getUiOptions","isCustomWidget","uiSchema"],"sources":["D:\\Reactjs\\my-app\\node_modules\\@rjsf\\utils\\src\\isCustomWidget.ts"],"sourcesContent":["import getUiOptions from './getUiOptions';\nimport { FormContextType, RJSFSchema, StrictRJSFSchema, UiSchema } from './types';\n\n/** Checks to see if the `uiSchema` contains the `widget` field and that the widget is not `hidden`\n *\n * @param uiSchema - The UI Schema from which to detect if it is customized\n * @returns - True if the `uiSchema` describes a custom widget, false otherwise\n */\nexport default function isCustomWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(uiSchema: UiSchema<T, S, F> = {}) {\n  return (\n    // TODO: Remove the `&& uiSchema['ui:widget'] !== 'hidden'` once we support hidden widgets for arrays.\n    // https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/#hidden-widgets\n    'widget' in getUiOptions<T, S, F>(uiSchema) && getUiOptions<T, S, F>(uiSchema)['widget'] !== 'hidden'\n  );\n}\n"],"mappings":"AAAA,OAAOA,YAAY,MAAM,gBAAgB;AAGzC;;;;;AAKA,eAAc,SAAUC,cAAcA,CAIpCC,QAAA,GAA8B,EAAE;EAChC;IACE;IACA;IACA,QAAQ,IAAIF,YAAY,CAAUE,QAAQ,CAAC,IAAIF,YAAY,CAAUE,QAAQ,CAAC,CAAC,QAAQ,CAAC,KAAK;EAAQ;AAEzG"},"metadata":{},"sourceType":"module","externalDependencies":[]}