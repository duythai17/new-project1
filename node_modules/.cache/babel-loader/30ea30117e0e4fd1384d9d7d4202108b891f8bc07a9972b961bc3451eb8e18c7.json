{"ast":null,"code":"import get from 'lodash/get';\nimport isObject from './isObject';\n/** Merges the `defaults` object of type `T` into the `formData` of type `T`\n *\n * When merging defaults and form data, we want to merge in this specific way:\n * - objects are deeply merged\n * - arrays are merged in such a way that:\n *   - when the array is set in form data, only array entries set in form data\n *     are deeply merged; additional entries from the defaults are ignored unless `mergeExtraArrayDefaults` is true, in\n *     which case the extras are appended onto the end of the form data\n *   - when the array is not set in form data, the default is copied over\n * - scalars are overwritten/set by form data\n *\n * @param [defaults] - The defaults to merge\n * @param [formData] - The form data into which the defaults will be merged\n * @param [mergeExtraArrayDefaults=false] - If true, any additional default array entries are appended onto the formData\n * @returns - The resulting merged form data with defaults\n */\nexport default function mergeDefaultsWithFormData(defaults, formData) {\n  let mergeExtraArrayDefaults = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  if (Array.isArray(formData)) {\n    const defaultsArray = Array.isArray(defaults) ? defaults : [];\n    const mapped = formData.map((value, idx) => {\n      if (defaultsArray[idx]) {\n        return mergeDefaultsWithFormData(defaultsArray[idx], value, mergeExtraArrayDefaults);\n      }\n      return value;\n    });\n    // Merge any extra defaults when mergeExtraArrayDefaults is true\n    if (mergeExtraArrayDefaults && mapped.length < defaultsArray.length) {\n      mapped.push(...defaultsArray.slice(mapped.length));\n    }\n    return mapped;\n  }\n  if (isObject(formData)) {\n    const acc = Object.assign({}, defaults); // Prevent mutation of source object.\n    return Object.keys(formData).reduce((acc, key) => {\n      acc[key] = mergeDefaultsWithFormData(defaults ? get(defaults, key) : {}, get(formData, key), mergeExtraArrayDefaults);\n      return acc;\n    }, acc);\n  }\n  return formData;\n}","map":{"version":3,"names":["get","isObject","mergeDefaultsWithFormData","defaults","formData","mergeExtraArrayDefaults","arguments","length","undefined","Array","isArray","defaultsArray","mapped","map","value","idx","push","slice","acc","Object","assign","keys","reduce","key"],"sources":["D:\\Reactjs\\my-app\\node_modules\\@rjsf\\utils\\src\\mergeDefaultsWithFormData.ts"],"sourcesContent":["import get from 'lodash/get';\n\nimport isObject from './isObject';\nimport { GenericObjectType } from '../src';\n\n/** Merges the `defaults` object of type `T` into the `formData` of type `T`\n *\n * When merging defaults and form data, we want to merge in this specific way:\n * - objects are deeply merged\n * - arrays are merged in such a way that:\n *   - when the array is set in form data, only array entries set in form data\n *     are deeply merged; additional entries from the defaults are ignored unless `mergeExtraArrayDefaults` is true, in\n *     which case the extras are appended onto the end of the form data\n *   - when the array is not set in form data, the default is copied over\n * - scalars are overwritten/set by form data\n *\n * @param [defaults] - The defaults to merge\n * @param [formData] - The form data into which the defaults will be merged\n * @param [mergeExtraArrayDefaults=false] - If true, any additional default array entries are appended onto the formData\n * @returns - The resulting merged form data with defaults\n */\nexport default function mergeDefaultsWithFormData<T = any>(\n  defaults?: T,\n  formData?: T,\n  mergeExtraArrayDefaults = false\n): T | undefined {\n  if (Array.isArray(formData)) {\n    const defaultsArray = Array.isArray(defaults) ? defaults : [];\n    const mapped = formData.map((value, idx) => {\n      if (defaultsArray[idx]) {\n        return mergeDefaultsWithFormData<any>(defaultsArray[idx], value, mergeExtraArrayDefaults);\n      }\n      return value;\n    });\n    // Merge any extra defaults when mergeExtraArrayDefaults is true\n    if (mergeExtraArrayDefaults && mapped.length < defaultsArray.length) {\n      mapped.push(...defaultsArray.slice(mapped.length));\n    }\n    return mapped as unknown as T;\n  }\n  if (isObject(formData)) {\n    const acc: { [key in keyof T]: any } = Object.assign({}, defaults); // Prevent mutation of source object.\n    return Object.keys(formData as GenericObjectType).reduce((acc, key) => {\n      acc[key as keyof T] = mergeDefaultsWithFormData<T>(\n        defaults ? get(defaults, key) : {},\n        get(formData, key),\n        mergeExtraArrayDefaults\n      );\n      return acc;\n    }, acc);\n  }\n  return formData;\n}\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,YAAY;AAE5B,OAAOC,QAAQ,MAAM,YAAY;AAGjC;;;;;;;;;;;;;;;;AAgBA,eAAc,SAAUC,yBAAyBA,CAC/CC,QAAY,EACZC,QAAY,EACmB;EAAA,IAA/BC,uBAAuB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;EAE/B,IAAIG,KAAK,CAACC,OAAO,CAACN,QAAQ,CAAC,EAAE;IAC3B,MAAMO,aAAa,GAAGF,KAAK,CAACC,OAAO,CAACP,QAAQ,CAAC,GAAGA,QAAQ,GAAG,EAAE;IAC7D,MAAMS,MAAM,GAAGR,QAAQ,CAACS,GAAG,CAAC,CAACC,KAAK,EAAEC,GAAG,KAAI;MACzC,IAAIJ,aAAa,CAACI,GAAG,CAAC,EAAE;QACtB,OAAOb,yBAAyB,CAAMS,aAAa,CAACI,GAAG,CAAC,EAAED,KAAK,EAAET,uBAAuB,CAAC;;MAE3F,OAAOS,KAAK;IACd,CAAC,CAAC;IACF;IACA,IAAIT,uBAAuB,IAAIO,MAAM,CAACL,MAAM,GAAGI,aAAa,CAACJ,MAAM,EAAE;MACnEK,MAAM,CAACI,IAAI,CAAC,GAAGL,aAAa,CAACM,KAAK,CAACL,MAAM,CAACL,MAAM,CAAC,CAAC;;IAEpD,OAAOK,MAAsB;;EAE/B,IAAIX,QAAQ,CAACG,QAAQ,CAAC,EAAE;IACtB,MAAMc,GAAG,GAA8BC,MAAM,CAACC,MAAM,CAAC,EAAE,EAAEjB,QAAQ,CAAC,CAAC,CAAC;IACpE,OAAOgB,MAAM,CAACE,IAAI,CAACjB,QAA6B,CAAC,CAACkB,MAAM,CAAC,CAACJ,GAAG,EAAEK,GAAG,KAAI;MACpEL,GAAG,CAACK,GAAc,CAAC,GAAGrB,yBAAyB,CAC7CC,QAAQ,GAAGH,GAAG,CAACG,QAAQ,EAAEoB,GAAG,CAAC,GAAG,EAAE,EAClCvB,GAAG,CAACI,QAAQ,EAAEmB,GAAG,CAAC,EAClBlB,uBAAuB,CACxB;MACD,OAAOa,GAAG;IACZ,CAAC,EAAEA,GAAG,CAAC;;EAET,OAAOd,QAAQ;AACjB"},"metadata":{},"sourceType":"module","externalDependencies":[]}