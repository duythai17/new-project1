{"ast":null,"code":"import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useCallback } from 'react';\nimport { ariaDescribedByIds, examplesId, getInputProps } from '@rjsf/utils';\n/** The `BaseInputTemplate` is the template to use to render the basic `<input>` component for the `core` theme.\n * It is used as the template for rendering many of the <input> based widgets that differ by `type` and callbacks only.\n * It can be customized/overridden for other themes or individual implementations as needed.\n *\n * @param props - The `WidgetProps` for this template\n */\nexport default function BaseInputTemplate(props) {\n  const {\n    id,\n    name,\n    // remove this from ...rest\n    value,\n    readonly,\n    disabled,\n    autofocus,\n    onBlur,\n    onFocus,\n    onChange,\n    onChangeOverride,\n    options,\n    schema,\n    uiSchema,\n    formContext,\n    registry,\n    rawErrors,\n    type,\n    hideLabel,\n    // remove this from ...rest\n    hideError,\n    // remove this from ...rest\n    ...rest\n  } = props;\n  // Note: since React 15.2.0 we can't forward unknown element attributes, so we\n  // exclude the \"options\" and \"schema\" ones here.\n  if (!id) {\n    console.log('No id for', props);\n    throw new Error(\"no id for props \".concat(JSON.stringify(props)));\n  }\n  const inputProps = {\n    ...rest,\n    ...getInputProps(schema, type, options)\n  };\n  let inputValue;\n  if (inputProps.type === 'number' || inputProps.type === 'integer') {\n    inputValue = value || value === 0 ? value : '';\n  } else {\n    inputValue = value == null ? '' : value;\n  }\n  const _onChange = useCallback(_ref => {\n    let {\n      target: {\n        value\n      }\n    } = _ref;\n    return onChange(value === '' ? options.emptyValue : value);\n  }, [onChange, options]);\n  const _onBlur = useCallback(_ref2 => {\n    let {\n      target: {\n        value\n      }\n    } = _ref2;\n    return onBlur(id, value);\n  }, [onBlur, id]);\n  const _onFocus = useCallback(_ref3 => {\n    let {\n      target: {\n        value\n      }\n    } = _ref3;\n    return onFocus(id, value);\n  }, [onFocus, id]);\n  return _jsxs(_Fragment, {\n    children: [_jsx(\"input\", {\n      id: id,\n      name: id,\n      className: 'form-control',\n      readOnly: readonly,\n      disabled: disabled,\n      autoFocus: autofocus,\n      value: inputValue,\n      ...inputProps,\n      list: schema.examples ? examplesId(id) : undefined,\n      onChange: onChangeOverride || _onChange,\n      onBlur: _onBlur,\n      onFocus: _onFocus,\n      \"aria-describedby\": ariaDescribedByIds(id, !!schema.examples)\n    }), Array.isArray(schema.examples) && _jsx(\"datalist\", {\n      id: examplesId(id),\n      children: schema.examples.concat(schema.default && !schema.examples.includes(schema.default) ? [schema.default] : []).map(example => {\n        return _jsx(\"option\", {\n          value: example\n        }, example);\n      })\n    }, \"datalist_\".concat(id))]\n  });\n}","map":{"version":3,"names":["useCallback","ariaDescribedByIds","examplesId","getInputProps","BaseInputTemplate","props","id","name","value","readonly","disabled","autofocus","onBlur","onFocus","onChange","onChangeOverride","options","schema","uiSchema","formContext","registry","rawErrors","type","hideLabel","hideError","rest","console","log","Error","concat","JSON","stringify","inputProps","inputValue","_onChange","_ref","target","emptyValue","_onBlur","_ref2","_onFocus","_ref3","_jsxs","_Fragment","children","_jsx","className","readOnly","autoFocus","list","examples","undefined","Array","isArray","default","includes","map","example"],"sources":["D:\\Reactjs\\my-app\\node_modules\\@rjsf\\core\\src\\components\\templates\\BaseInputTemplate.tsx"],"sourcesContent":["import { ChangeEvent, FocusEvent, useCallback } from 'react';\nimport {\n  ariaDescribedByIds,\n  BaseInputTemplateProps,\n  examplesId,\n  getInputProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from '@rjsf/utils';\n\n/** The `BaseInputTemplate` is the template to use to render the basic `<input>` component for the `core` theme.\n * It is used as the template for rendering many of the <input> based widgets that differ by `type` and callbacks only.\n * It can be customized/overridden for other themes or individual implementations as needed.\n *\n * @param props - The `WidgetProps` for this template\n */\nexport default function BaseInputTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: BaseInputTemplateProps<T, S, F>) {\n  const {\n    id,\n    name, // remove this from ...rest\n    value,\n    readonly,\n    disabled,\n    autofocus,\n    onBlur,\n    onFocus,\n    onChange,\n    onChangeOverride,\n    options,\n    schema,\n    uiSchema,\n    formContext,\n    registry,\n    rawErrors,\n    type,\n    hideLabel, // remove this from ...rest\n    hideError, // remove this from ...rest\n    ...rest\n  } = props;\n\n  // Note: since React 15.2.0 we can't forward unknown element attributes, so we\n  // exclude the \"options\" and \"schema\" ones here.\n  if (!id) {\n    console.log('No id for', props);\n    throw new Error(`no id for props ${JSON.stringify(props)}`);\n  }\n  const inputProps = {\n    ...rest,\n    ...getInputProps<T, S, F>(schema, type, options),\n  };\n\n  let inputValue;\n  if (inputProps.type === 'number' || inputProps.type === 'integer') {\n    inputValue = value || value === 0 ? value : '';\n  } else {\n    inputValue = value == null ? '' : value;\n  }\n\n  const _onChange = useCallback(\n    ({ target: { value } }: ChangeEvent<HTMLInputElement>) => onChange(value === '' ? options.emptyValue : value),\n    [onChange, options]\n  );\n  const _onBlur = useCallback(({ target: { value } }: FocusEvent<HTMLInputElement>) => onBlur(id, value), [onBlur, id]);\n  const _onFocus = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLInputElement>) => onFocus(id, value),\n    [onFocus, id]\n  );\n\n  return (\n    <>\n      <input\n        id={id}\n        name={id}\n        className='form-control'\n        readOnly={readonly}\n        disabled={disabled}\n        autoFocus={autofocus}\n        value={inputValue}\n        {...inputProps}\n        list={schema.examples ? examplesId<T>(id) : undefined}\n        onChange={onChangeOverride || _onChange}\n        onBlur={_onBlur}\n        onFocus={_onFocus}\n        aria-describedby={ariaDescribedByIds<T>(id, !!schema.examples)}\n      />\n      {Array.isArray(schema.examples) && (\n        <datalist key={`datalist_${id}`} id={examplesId<T>(id)}>\n          {(schema.examples as string[])\n            .concat(schema.default && !schema.examples.includes(schema.default) ? ([schema.default] as string[]) : [])\n            .map((example: any) => {\n              return <option key={example} value={example} />;\n            })}\n        </datalist>\n      )}\n    </>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}