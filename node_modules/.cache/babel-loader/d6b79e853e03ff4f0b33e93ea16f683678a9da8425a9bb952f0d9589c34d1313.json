{"ast":null,"code":"import isEqual from 'lodash/isEqual';\n/** Determines whether the given `value` is (one of) the `selected` value(s).\n *\n * @param value - The value being checked to see if it is selected\n * @param selected - The current selected value or list of values\n * @returns - true if the `value` is one of the `selected` ones, false otherwise\n */\nexport default function enumOptionsIsSelected(value, selected) {\n  if (Array.isArray(selected)) {\n    return selected.some(sel => isEqual(sel, value));\n  }\n  return isEqual(selected, value);\n}","map":{"version":3,"names":["isEqual","enumOptionsIsSelected","value","selected","Array","isArray","some","sel"],"sources":["D:\\Reactjs\\my-app\\node_modules\\@rjsf\\utils\\src\\enumOptionsIsSelected.ts"],"sourcesContent":["import isEqual from 'lodash/isEqual';\n\nimport { EnumOptionsType, RJSFSchema, StrictRJSFSchema } from './types';\n\n/** Determines whether the given `value` is (one of) the `selected` value(s).\n *\n * @param value - The value being checked to see if it is selected\n * @param selected - The current selected value or list of values\n * @returns - true if the `value` is one of the `selected` ones, false otherwise\n */\nexport default function enumOptionsIsSelected<S extends StrictRJSFSchema = RJSFSchema>(\n  value: EnumOptionsType<S>['value'],\n  selected: EnumOptionsType<S>['value'] | EnumOptionsType<S>['value'][]\n) {\n  if (Array.isArray(selected)) {\n    return selected.some((sel) => isEqual(sel, value));\n  }\n  return isEqual(selected, value);\n}\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,gBAAgB;AAIpC;;;;;;AAMA,eAAc,SAAUC,qBAAqBA,CAC3CC,KAAkC,EAClCC,QAAqE;EAErE,IAAIC,KAAK,CAACC,OAAO,CAACF,QAAQ,CAAC,EAAE;IAC3B,OAAOA,QAAQ,CAACG,IAAI,CAAEC,GAAG,IAAKP,OAAO,CAACO,GAAG,EAAEL,KAAK,CAAC,CAAC;;EAEpD,OAAOF,OAAO,CAACG,QAAQ,EAAED,KAAK,CAAC;AACjC"},"metadata":{},"sourceType":"module","externalDependencies":[]}