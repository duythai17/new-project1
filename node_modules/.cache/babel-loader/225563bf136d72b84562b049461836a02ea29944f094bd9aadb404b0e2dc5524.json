{"ast":null,"code":"/** Parses the `dateString` into a `DateObject`, including the time information when `includeTime` is true\n *\n * @param dateString - The date string to parse into a DateObject\n * @param [includeTime=true] - Optional flag, if false, will not include the time data into the object\n * @returns - The date string converted to a `DateObject`\n * @throws - Error when the date cannot be parsed from the string\n */\nexport default function parseDateString(dateString) {\n  let includeTime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  if (!dateString) {\n    return {\n      year: -1,\n      month: -1,\n      day: -1,\n      hour: includeTime ? -1 : 0,\n      minute: includeTime ? -1 : 0,\n      second: includeTime ? -1 : 0\n    };\n  }\n  const date = new Date(dateString);\n  if (Number.isNaN(date.getTime())) {\n    throw new Error('Unable to parse date ' + dateString);\n  }\n  return {\n    year: date.getUTCFullYear(),\n    month: date.getUTCMonth() + 1,\n    day: date.getUTCDate(),\n    hour: includeTime ? date.getUTCHours() : 0,\n    minute: includeTime ? date.getUTCMinutes() : 0,\n    second: includeTime ? date.getUTCSeconds() : 0\n  };\n}","map":{"version":3,"names":["parseDateString","dateString","includeTime","arguments","length","undefined","year","month","day","hour","minute","second","date","Date","Number","isNaN","getTime","Error","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds"],"sources":["D:\\Reactjs\\my-app\\node_modules\\@rjsf\\utils\\src\\parseDateString.ts"],"sourcesContent":["import { DateObject } from './types';\n\n/** Parses the `dateString` into a `DateObject`, including the time information when `includeTime` is true\n *\n * @param dateString - The date string to parse into a DateObject\n * @param [includeTime=true] - Optional flag, if false, will not include the time data into the object\n * @returns - The date string converted to a `DateObject`\n * @throws - Error when the date cannot be parsed from the string\n */\nexport default function parseDateString(dateString?: string, includeTime = true): DateObject {\n  if (!dateString) {\n    return {\n      year: -1,\n      month: -1,\n      day: -1,\n      hour: includeTime ? -1 : 0,\n      minute: includeTime ? -1 : 0,\n      second: includeTime ? -1 : 0,\n    };\n  }\n  const date = new Date(dateString);\n  if (Number.isNaN(date.getTime())) {\n    throw new Error('Unable to parse date ' + dateString);\n  }\n  return {\n    year: date.getUTCFullYear(),\n    month: date.getUTCMonth() + 1, // oh you, javascript.\n    day: date.getUTCDate(),\n    hour: includeTime ? date.getUTCHours() : 0,\n    minute: includeTime ? date.getUTCMinutes() : 0,\n    second: includeTime ? date.getUTCSeconds() : 0,\n  };\n}\n"],"mappings":"AAEA;;;;;;;AAOA,eAAc,SAAUA,eAAeA,CAACC,UAAmB,EAAoB;EAAA,IAAlBC,WAAW,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;EAC7E,IAAI,CAACF,UAAU,EAAE;IACf,OAAO;MACLK,IAAI,EAAE,CAAC,CAAC;MACRC,KAAK,EAAE,CAAC,CAAC;MACTC,GAAG,EAAE,CAAC,CAAC;MACPC,IAAI,EAAEP,WAAW,GAAG,CAAC,CAAC,GAAG,CAAC;MAC1BQ,MAAM,EAAER,WAAW,GAAG,CAAC,CAAC,GAAG,CAAC;MAC5BS,MAAM,EAAET,WAAW,GAAG,CAAC,CAAC,GAAG;KAC5B;;EAEH,MAAMU,IAAI,GAAG,IAAIC,IAAI,CAACZ,UAAU,CAAC;EACjC,IAAIa,MAAM,CAACC,KAAK,CAACH,IAAI,CAACI,OAAO,EAAE,CAAC,EAAE;IAChC,MAAM,IAAIC,KAAK,CAAC,uBAAuB,GAAGhB,UAAU,CAAC;;EAEvD,OAAO;IACLK,IAAI,EAAEM,IAAI,CAACM,cAAc,EAAE;IAC3BX,KAAK,EAAEK,IAAI,CAACO,WAAW,EAAE,GAAG,CAAC;IAC7BX,GAAG,EAAEI,IAAI,CAACQ,UAAU,EAAE;IACtBX,IAAI,EAAEP,WAAW,GAAGU,IAAI,CAACS,WAAW,EAAE,GAAG,CAAC;IAC1CX,MAAM,EAAER,WAAW,GAAGU,IAAI,CAACU,aAAa,EAAE,GAAG,CAAC;IAC9CX,MAAM,EAAET,WAAW,GAAGU,IAAI,CAACW,aAAa,EAAE,GAAG;GAC9C;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}