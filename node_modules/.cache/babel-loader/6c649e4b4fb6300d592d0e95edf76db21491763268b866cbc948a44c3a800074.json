{"ast":null,"code":"var _jsxFileName = \"D:\\\\Reactjs\\\\my-app\\\\src\\\\components\\\\MongoDataComponent.jsx\",\n  _s = $RefreshSig$();\n// Import necessary libraries and CSS file\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport './MongoDataComponent.css'; // Import your CSS file for styling\n\n// Define your component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MongoDataComponent = () => {\n  _s();\n  // State for weight data and setpoint\n  const [weightData, setWeightData] = useState([]);\n  const [setpointData, setSetpoint] = useState([]);\n\n  // Function to fetch data from MongoDB\n  const fetchData = async () => {\n    try {\n      // Fetch weight data\n      const weightResponse = await axios.get('https://ap-southeast-1.aws.data.mongodb-api.com/app/data-fmace/endpoint/get_updatedvalue');\n      setWeightData(weightResponse.data);\n\n      // Fetch setpoint data\n      const setpointResponse = await axios.get('https://ap-southeast-1.aws.data.mongodb-api.com/app/data-fmace/endpoint/get_setpoint');\n      setSetpoint(setpointResponse.data);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n\n  // Function to start polling\n  const startPolling = () => {\n    const pollingInterval = setInterval(fetchData, 1000); // Adjust the interval as needed (e.g., 5000 for every 5 seconds)\n    return () => clearInterval(pollingInterval);\n  };\n\n  // useEffect to run when the component mounts\n  useEffect(() => {\n    fetchData(); // Fetch data when the component mounts\n    const stopPolling = startPolling(); // Start polling\n\n    return () => {\n      stopPolling(); // Stop polling when the component is unmounted\n    };\n  }, []);\n\n  // Render the component UI\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"data-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"weight-data-container\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"data-title\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Weight Data: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this), weightData.length > 0 ? /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"data-value\",\n          children: [weightData[0].weight, \" gram\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"no-data-message\",\n          children: \"No weight data available.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"setpoint-data-container\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"data-title\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Setpoint: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), setpoint ? /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"data-value\",\n          children: [setpoint.setpoint, \" gram\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"no-data-message\",\n          children: \"No setpoint data available.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n\n// Export the component\n_s(MongoDataComponent, \"w1lbgVSefRvxPVpFt65xNSenVnc=\");\n_c = MongoDataComponent;\nexport default MongoDataComponent;\nvar _c;\n$RefreshReg$(_c, \"MongoDataComponent\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","MongoDataComponent","_s","weightData","setWeightData","setpointData","setSetpoint","fetchData","weightResponse","get","data","setpointResponse","error","console","startPolling","pollingInterval","setInterval","clearInterval","stopPolling","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","weight","setpoint","_c","$RefreshReg$"],"sources":["D:/Reactjs/my-app/src/components/MongoDataComponent.jsx"],"sourcesContent":["// Import necessary libraries and CSS file\r\nimport React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport './MongoDataComponent.css'; // Import your CSS file for styling\r\n\r\n// Define your component\r\nconst MongoDataComponent = () => {\r\n  // State for weight data and setpoint\r\n  const [weightData, setWeightData] = useState([]);\r\n  const [setpointData, setSetpoint] = useState([]);\r\n\r\n  // Function to fetch data from MongoDB\r\n  const fetchData = async () => {\r\n    try {\r\n      // Fetch weight data\r\n      const weightResponse = await axios.get('https://ap-southeast-1.aws.data.mongodb-api.com/app/data-fmace/endpoint/get_updatedvalue');\r\n      setWeightData(weightResponse.data);\r\n\r\n      // Fetch setpoint data\r\n      const setpointResponse = await axios.get('https://ap-southeast-1.aws.data.mongodb-api.com/app/data-fmace/endpoint/get_setpoint');\r\n      setSetpoint(setpointResponse.data);\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n    }\r\n  };\r\n\r\n  // Function to start polling\r\n  const startPolling = () => {\r\n    const pollingInterval = setInterval(fetchData, 1000); // Adjust the interval as needed (e.g., 5000 for every 5 seconds)\r\n    return () => clearInterval(pollingInterval);\r\n  };\r\n\r\n  // useEffect to run when the component mounts\r\n  useEffect(() => {\r\n    fetchData(); // Fetch data when the component mounts\r\n    const stopPolling = startPolling(); // Start polling\r\n\r\n    return () => {\r\n      stopPolling(); // Stop polling when the component is unmounted\r\n    };\r\n  }, []);\r\n\r\n  // Render the component UI\r\n  return (\r\n    <div className=\"data-container\">\r\n      <div className=\"weight-data-container\">\r\n        <h1 className=\"data-title\">\r\n          <span>Weight Data: </span>\r\n          {weightData.length > 0 ? (\r\n            <span className=\"data-value\">{weightData[0].weight} gram</span>\r\n          ) : (\r\n            <span className=\"no-data-message\">No weight data available.</span>\r\n          )}\r\n        </h1>\r\n      </div>\r\n\r\n      <div className=\"setpoint-data-container\">\r\n        <h1 className=\"data-title\">\r\n          <span>Setpoint: </span>\r\n          {setpoint ? (\r\n            <span className=\"data-value\">{setpoint.setpoint} gram</span>\r\n          ) : (\r\n            <span className=\"no-data-message\">No setpoint data available.</span>\r\n          )}\r\n        </h1>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Export the component\r\nexport default MongoDataComponent;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}