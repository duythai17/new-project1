{"ast":null,"code":"import getMatchingOption from './getMatchingOption';\n/** Given the `formData` and list of `options`, attempts to find the index of the first option that matches the data.\n * Always returns the first option if there is nothing that matches.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param formData - The current formData, if any, used to figure out a match\n * @param options - The list of options to find a matching options from\n * @param rootSchema - The root schema, used to primarily to look up `$ref`s\n * @param [discriminatorField] - The optional name of the field within the options object whose value is used to\n *          determine which option is selected\n * @returns - The index of the first matched option or 0 if none is available\n */\nexport default function getFirstMatchingOption(validator, formData, options, rootSchema, discriminatorField) {\n  return getMatchingOption(validator, formData, options, rootSchema, discriminatorField);\n}","map":{"version":3,"names":["getMatchingOption","getFirstMatchingOption","validator","formData","options","rootSchema","discriminatorField"],"sources":["D:\\Reactjs\\my-app\\node_modules\\@rjsf\\utils\\src\\schema\\getFirstMatchingOption.ts"],"sourcesContent":["import getMatchingOption from './getMatchingOption';\nimport { FormContextType, RJSFSchema, StrictRJSFSchema, ValidatorType } from '../types';\n\n/** Given the `formData` and list of `options`, attempts to find the index of the first option that matches the data.\n * Always returns the first option if there is nothing that matches.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param formData - The current formData, if any, used to figure out a match\n * @param options - The list of options to find a matching options from\n * @param rootSchema - The root schema, used to primarily to look up `$ref`s\n * @param [discriminatorField] - The optional name of the field within the options object whose value is used to\n *          determine which option is selected\n * @returns - The index of the first matched option or 0 if none is available\n */\nexport default function getFirstMatchingOption<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  validator: ValidatorType<T, S, F>,\n  formData: T | undefined,\n  options: S[],\n  rootSchema: S,\n  discriminatorField?: string\n): number {\n  return getMatchingOption<T, S, F>(validator, formData, options, rootSchema, discriminatorField);\n}\n"],"mappings":"AAAA,OAAOA,iBAAiB,MAAM,qBAAqB;AAGnD;;;;;;;;;;;AAWA,eAAc,SAAUC,sBAAsBA,CAK5CC,SAAiC,EACjCC,QAAuB,EACvBC,OAAY,EACZC,UAAa,EACbC,kBAA2B;EAE3B,OAAON,iBAAiB,CAAUE,SAAS,EAAEC,QAAQ,EAAEC,OAAO,EAAEC,UAAU,EAAEC,kBAAkB,CAAC;AACjG"},"metadata":{},"sourceType":"module","externalDependencies":[]}