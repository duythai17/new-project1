{"ast":null,"code":"import isConstant from '../isConstant';\nimport retrieveSchema from './retrieveSchema';\n/** Checks to see if the `schema` combination represents a select\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param theSchema - The schema for which check for a select flag is desired\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @returns - True if schema contains a select, otherwise false\n */\nexport default function isSelect(validator, theSchema, rootSchema = {}) {\n  const schema = retrieveSchema(validator, theSchema, rootSchema, undefined);\n  const altSchemas = schema.oneOf || schema.anyOf;\n  if (Array.isArray(schema.enum)) {\n    return true;\n  }\n  if (Array.isArray(altSchemas)) {\n    return altSchemas.every(altSchemas => typeof altSchemas !== 'boolean' && isConstant(altSchemas));\n  }\n  return false;\n}","map":{"version":3,"names":["isConstant","retrieveSchema","isSelect","validator","theSchema","rootSchema","schema","undefined","altSchemas","oneOf","anyOf","Array","isArray","enum","every"],"sources":["D:\\Reactjs\\my-app\\node_modules\\@rjsf\\utils\\src\\schema\\isSelect.ts"],"sourcesContent":["import isConstant from '../isConstant';\nimport { FormContextType, RJSFSchema, StrictRJSFSchema, ValidatorType } from '../types';\nimport retrieveSchema from './retrieveSchema';\n\n/** Checks to see if the `schema` combination represents a select\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param theSchema - The schema for which check for a select flag is desired\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @returns - True if schema contains a select, otherwise false\n */\nexport default function isSelect<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  theSchema: S,\n  rootSchema: S = {} as S\n) {\n  const schema = retrieveSchema<T, S, F>(validator, theSchema, rootSchema, undefined);\n  const altSchemas = schema.oneOf || schema.anyOf;\n  if (Array.isArray(schema.enum)) {\n    return true;\n  }\n  if (Array.isArray(altSchemas)) {\n    return altSchemas.every((altSchemas) => typeof altSchemas !== 'boolean' && isConstant(altSchemas));\n  }\n  return false;\n}\n"],"mappings":"AAAA,OAAOA,UAAU,MAAM,eAAe;AAEtC,OAAOC,cAAc,MAAM,kBAAkB;AAE7C;;;;;;;AAOA,eAAc,SAAUC,QAAQA,CAC9BC,SAAiC,EACjCC,SAAY,EACZC,UAAA,GAAgB,EAAO;EAEvB,MAAMC,MAAM,GAAGL,cAAc,CAAUE,SAAS,EAAEC,SAAS,EAAEC,UAAU,EAAEE,SAAS,CAAC;EACnF,MAAMC,UAAU,GAAGF,MAAM,CAACG,KAAK,IAAIH,MAAM,CAACI,KAAK;EAC/C,IAAIC,KAAK,CAACC,OAAO,CAACN,MAAM,CAACO,IAAI,CAAC,EAAE;IAC9B,OAAO,IAAI;;EAEb,IAAIF,KAAK,CAACC,OAAO,CAACJ,UAAU,CAAC,EAAE;IAC7B,OAAOA,UAAU,CAACM,KAAK,CAAEN,UAAU,IAAK,OAAOA,UAAU,KAAK,SAAS,IAAIR,UAAU,CAACQ,UAAU,CAAC,CAAC;;EAEpG,OAAO,KAAK;AACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}