{"ast":null,"code":"import getUiOptions from './getUiOptions';\n/** Checks whether the field described by `schema`, having the `uiSchema` and `formData` supports expanding. The UI for\n * the field can expand if it has additional properties, is not forced as non-expandable by the `uiSchema` and the\n * `formData` object doesn't already have `schema.maxProperties` elements.\n *\n * @param schema - The schema for the field that is being checked\n * @param [uiSchema={}] - The uiSchema for the field\n * @param [formData] - The formData for the field\n * @returns - True if the schema element has additionalProperties, is expandable, and not at the maxProperties limit\n */\nexport default function canExpand(schema) {\n  let uiSchema = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let formData = arguments.length > 2 ? arguments[2] : undefined;\n  if (!schema.additionalProperties) {\n    return false;\n  }\n  const {\n    expandable = true\n  } = getUiOptions(uiSchema);\n  if (expandable === false) {\n    return expandable;\n  }\n  // if ui:options.expandable was not explicitly set to false, we can add\n  // another property if we have not exceeded maxProperties yet\n  if (schema.maxProperties !== undefined && formData) {\n    return Object.keys(formData).length < schema.maxProperties;\n  }\n  return true;\n}","map":{"version":3,"names":["getUiOptions","canExpand","schema","uiSchema","arguments","length","undefined","formData","additionalProperties","expandable","maxProperties","Object","keys"],"sources":["D:\\Reactjs\\my-app\\node_modules\\@rjsf\\utils\\src\\canExpand.ts"],"sourcesContent":["import { FormContextType, RJSFSchema, StrictRJSFSchema, UiSchema } from './types';\nimport getUiOptions from './getUiOptions';\n\n/** Checks whether the field described by `schema`, having the `uiSchema` and `formData` supports expanding. The UI for\n * the field can expand if it has additional properties, is not forced as non-expandable by the `uiSchema` and the\n * `formData` object doesn't already have `schema.maxProperties` elements.\n *\n * @param schema - The schema for the field that is being checked\n * @param [uiSchema={}] - The uiSchema for the field\n * @param [formData] - The formData for the field\n * @returns - True if the schema element has additionalProperties, is expandable, and not at the maxProperties limit\n */\nexport default function canExpand<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  schema: RJSFSchema,\n  uiSchema: UiSchema<T, S, F> = {},\n  formData?: T\n) {\n  if (!schema.additionalProperties) {\n    return false;\n  }\n  const { expandable = true } = getUiOptions<T, S, F>(uiSchema);\n  if (expandable === false) {\n    return expandable;\n  }\n  // if ui:options.expandable was not explicitly set to false, we can add\n  // another property if we have not exceeded maxProperties yet\n  if (schema.maxProperties !== undefined && formData) {\n    return Object.keys(formData).length < schema.maxProperties;\n  }\n  return true;\n}\n"],"mappings":"AACA,OAAOA,YAAY,MAAM,gBAAgB;AAEzC;;;;;;;;;AASA,eAAc,SAAUC,SAASA,CAC/BC,MAAkB,EAEN;EAAA,IADZC,QAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA8B,EAAE;EAAA,IAChCG,QAAY,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAEZ,IAAI,CAACJ,MAAM,CAACM,oBAAoB,EAAE;IAChC,OAAO,KAAK;;EAEd,MAAM;IAAEC,UAAU,GAAG;EAAI,CAAE,GAAGT,YAAY,CAAUG,QAAQ,CAAC;EAC7D,IAAIM,UAAU,KAAK,KAAK,EAAE;IACxB,OAAOA,UAAU;;EAEnB;EACA;EACA,IAAIP,MAAM,CAACQ,aAAa,KAAKJ,SAAS,IAAIC,QAAQ,EAAE;IAClD,OAAOI,MAAM,CAACC,IAAI,CAACL,QAAQ,CAAC,CAACF,MAAM,GAAGH,MAAM,CAACQ,aAAa;;EAE5D,OAAO,IAAI;AACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}