{"ast":null,"code":"import isObject from './isObject';\n/** Detects whether the given `schema` contains fixed items. This is the case when `schema.items` is a non-empty array\n * that only contains objects.\n *\n * @param schema - The schema in which to check for fixed items\n * @returns - True if there are fixed items in the schema, false otherwise\n */\nexport default function isFixedItems(schema) {\n  return Array.isArray(schema.items) && schema.items.length > 0 && schema.items.every(item => isObject(item));\n}","map":{"version":3,"names":["isObject","isFixedItems","schema","Array","isArray","items","length","every","item"],"sources":["D:\\Reactjs\\my-app\\node_modules\\@rjsf\\utils\\src\\isFixedItems.ts"],"sourcesContent":["import isObject from './isObject';\nimport { RJSFSchema, StrictRJSFSchema } from './types';\n\n/** Detects whether the given `schema` contains fixed items. This is the case when `schema.items` is a non-empty array\n * that only contains objects.\n *\n * @param schema - The schema in which to check for fixed items\n * @returns - True if there are fixed items in the schema, false otherwise\n */\nexport default function isFixedItems<S extends StrictRJSFSchema = RJSFSchema>(schema: S) {\n  return Array.isArray(schema.items) && schema.items.length > 0 && schema.items.every((item) => isObject(item));\n}\n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,YAAY;AAGjC;;;;;;AAMA,eAAc,SAAUC,YAAYA,CAA0CC,MAAS;EACrF,OAAOC,KAAK,CAACC,OAAO,CAACF,MAAM,CAACG,KAAK,CAAC,IAAIH,MAAM,CAACG,KAAK,CAACC,MAAM,GAAG,CAAC,IAAIJ,MAAM,CAACG,KAAK,CAACE,KAAK,CAAEC,IAAI,IAAKR,QAAQ,CAACQ,IAAI,CAAC,CAAC;AAC/G"},"metadata":{},"sourceType":"module","externalDependencies":[]}