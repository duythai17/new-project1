{"ast":null,"code":"import isEqual from 'lodash/isEqual';\nimport enumOptionsValueForIndex from './enumOptionsValueForIndex';\n/** Removes the enum option value at the `valueIndex` from the currently `selected` (list of) value(s). If `selected` is\n * a list, then that list is updated to remove the enum option value with the `valueIndex` in `allEnumOptions`. If it is\n * a single value, then if the enum option value with the `valueIndex` in `allEnumOptions` matches `selected`, undefined\n * is returned, otherwise the `selected` value is returned.\n *\n * @param valueIndex - The index of the value to be removed from the selected list or single value\n * @param selected - The current (list of) selected value(s)\n * @param [allEnumOptions=[]] - The list of all the known enumOptions\n * @returns - The updated `selected` with the enum option value at `valueIndex` in `allEnumOptions` removed from it,\n *        unless `selected` is a single value. In that case, if the `valueIndex` value matches `selected`, returns\n *        undefined, otherwise `selected`.\n */\nexport default function enumOptionsDeselectValue(valueIndex, selected, allEnumOptions = []) {\n  const value = enumOptionsValueForIndex(valueIndex, allEnumOptions);\n  if (Array.isArray(selected)) {\n    return selected.filter(v => !isEqual(v, value));\n  }\n  return isEqual(value, selected) ? undefined : selected;\n}","map":{"version":3,"names":["isEqual","enumOptionsValueForIndex","enumOptionsDeselectValue","valueIndex","selected","allEnumOptions","value","Array","isArray","filter","v","undefined"],"sources":["D:\\Reactjs\\my-app\\node_modules\\@rjsf\\utils\\src\\enumOptionsDeselectValue.ts"],"sourcesContent":["import isEqual from 'lodash/isEqual';\n\nimport { EnumOptionsType, RJSFSchema, StrictRJSFSchema } from './types';\nimport enumOptionsValueForIndex from './enumOptionsValueForIndex';\n\n/** Removes the enum option value at the `valueIndex` from the currently `selected` (list of) value(s). If `selected` is\n * a list, then that list is updated to remove the enum option value with the `valueIndex` in `allEnumOptions`. If it is\n * a single value, then if the enum option value with the `valueIndex` in `allEnumOptions` matches `selected`, undefined\n * is returned, otherwise the `selected` value is returned.\n *\n * @param valueIndex - The index of the value to be removed from the selected list or single value\n * @param selected - The current (list of) selected value(s)\n * @param [allEnumOptions=[]] - The list of all the known enumOptions\n * @returns - The updated `selected` with the enum option value at `valueIndex` in `allEnumOptions` removed from it,\n *        unless `selected` is a single value. In that case, if the `valueIndex` value matches `selected`, returns\n *        undefined, otherwise `selected`.\n */\nexport default function enumOptionsDeselectValue<S extends StrictRJSFSchema = RJSFSchema>(\n  valueIndex: string | number,\n  selected?: EnumOptionsType<S>['value'] | EnumOptionsType<S>['value'][],\n  allEnumOptions: EnumOptionsType<S>[] = []\n): EnumOptionsType<S>['value'] | EnumOptionsType<S>['value'][] | undefined {\n  const value = enumOptionsValueForIndex<S>(valueIndex, allEnumOptions);\n  if (Array.isArray(selected)) {\n    return selected.filter((v) => !isEqual(v, value));\n  }\n  return isEqual(value, selected) ? undefined : selected;\n}\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,gBAAgB;AAGpC,OAAOC,wBAAwB,MAAM,4BAA4B;AAEjE;;;;;;;;;;;;AAYA,eAAc,SAAUC,wBAAwBA,CAC9CC,UAA2B,EAC3BC,QAAsE,EACtEC,cAAA,GAAuC,EAAE;EAEzC,MAAMC,KAAK,GAAGL,wBAAwB,CAAIE,UAAU,EAAEE,cAAc,CAAC;EACrE,IAAIE,KAAK,CAACC,OAAO,CAACJ,QAAQ,CAAC,EAAE;IAC3B,OAAOA,QAAQ,CAACK,MAAM,CAAEC,CAAC,IAAK,CAACV,OAAO,CAACU,CAAC,EAAEJ,KAAK,CAAC,CAAC;;EAEnD,OAAON,OAAO,CAACM,KAAK,EAAEF,QAAQ,CAAC,GAAGO,SAAS,GAAGP,QAAQ;AACxD"},"metadata":{},"sourceType":"module","externalDependencies":[]}