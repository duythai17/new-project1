{"ast":null,"code":"import cloneDeep from 'lodash/cloneDeep';\nimport get from 'lodash/get';\nimport set from 'lodash/set';\nimport { ERRORS_KEY } from './constants';\n/** The `ErrorSchemaBuilder<T>` is used to build an `ErrorSchema<T>` since the definition of the `ErrorSchema` type is\n * designed for reading information rather than writing it. Use this class to add, replace or clear errors in an error\n * schema by using either dotted path or an array of path names. Once you are done building the `ErrorSchema`, you can\n * get the result and/or reset all the errors back to an initial set and start again.\n */\nexport default class ErrorSchemaBuilder {\n  /** Construct an `ErrorSchemaBuilder` with an optional initial set of errors in an `ErrorSchema`.\n   *\n   * @param [initialSchema] - The optional set of initial errors, that will be cloned into the class\n   */\n  constructor(initialSchema) {\n    /** The error schema being built\n     *\n     * @private\n     */\n    this.errorSchema = {};\n    this.resetAllErrors(initialSchema);\n  }\n  /** Returns the `ErrorSchema` that has been updated by the methods of the `ErrorSchemaBuilder`\n   */\n  get ErrorSchema() {\n    return this.errorSchema;\n  }\n  /** Will get an existing `ErrorSchema` at the specified `pathOfError` or create and return one.\n   *\n   * @param [pathOfError] - The optional path into the `ErrorSchema` at which to add the error(s)\n   * @returns - The error block for the given `pathOfError` or the root if not provided\n   * @private\n   */\n  getOrCreateErrorBlock(pathOfError) {\n    const hasPath = Array.isArray(pathOfError) && pathOfError.length > 0 || typeof pathOfError === 'string';\n    let errorBlock = hasPath ? get(this.errorSchema, pathOfError) : this.errorSchema;\n    if (!errorBlock && pathOfError) {\n      errorBlock = {};\n      set(this.errorSchema, pathOfError, errorBlock);\n    }\n    return errorBlock;\n  }\n  /** Resets all errors in the `ErrorSchemaBuilder` back to the `initialSchema` if provided, otherwise an empty set.\n   *\n   * @param [initialSchema] - The optional set of initial errors, that will be cloned into the class\n   * @returns - The `ErrorSchemaBuilder` object for chaining purposes\n   */\n  resetAllErrors(initialSchema) {\n    this.errorSchema = initialSchema ? cloneDeep(initialSchema) : {};\n    return this;\n  }\n  /** Adds the `errorOrList` to the list of errors in the `ErrorSchema` at either the root level or the location within\n   * the schema described by the `pathOfError`. For more information about how to specify the path see the\n   * [eslint lodash plugin docs](https://github.com/wix/eslint-plugin-lodash/blob/master/docs/rules/path-style.md).\n   *\n   * @param errorOrList - The error or list of errors to add into the `ErrorSchema`\n   * @param [pathOfError] - The optional path into the `ErrorSchema` at which to add the error(s)\n   * @returns - The `ErrorSchemaBuilder` object for chaining purposes\n   */\n  addErrors(errorOrList, pathOfError) {\n    const errorBlock = this.getOrCreateErrorBlock(pathOfError);\n    let errorsList = get(errorBlock, ERRORS_KEY);\n    if (!Array.isArray(errorsList)) {\n      errorsList = [];\n      errorBlock[ERRORS_KEY] = errorsList;\n    }\n    if (Array.isArray(errorOrList)) {\n      errorsList.push(...errorOrList);\n    } else {\n      errorsList.push(errorOrList);\n    }\n    return this;\n  }\n  /** Sets/replaces the `errorOrList` as the error(s) in the `ErrorSchema` at either the root level or the location\n   * within the schema described by the `pathOfError`. For more information about how to specify the path see the\n   * [eslint lodash plugin docs](https://github.com/wix/eslint-plugin-lodash/blob/master/docs/rules/path-style.md).\n   *\n   * @param errorOrList - The error or list of errors to set into the `ErrorSchema`\n   * @param [pathOfError] - The optional path into the `ErrorSchema` at which to set the error(s)\n   * @returns - The `ErrorSchemaBuilder` object for chaining purposes\n   */\n  setErrors(errorOrList, pathOfError) {\n    const errorBlock = this.getOrCreateErrorBlock(pathOfError);\n    // Effectively clone the array being given to prevent accidental outside manipulation of the given list\n    const listToAdd = Array.isArray(errorOrList) ? [...errorOrList] : [errorOrList];\n    set(errorBlock, ERRORS_KEY, listToAdd);\n    return this;\n  }\n  /** Clears the error(s) in the `ErrorSchema` at either the root level or the location within the schema described by\n   * the `pathOfError`. For more information about how to specify the path see the\n   * [eslint lodash plugin docs](https://github.com/wix/eslint-plugin-lodash/blob/master/docs/rules/path-style.md).\n   *\n   * @param [pathOfError] - The optional path into the `ErrorSchema` at which to clear the error(s)\n   * @returns - The `ErrorSchemaBuilder` object for chaining purposes\n   */\n  clearErrors(pathOfError) {\n    const errorBlock = this.getOrCreateErrorBlock(pathOfError);\n    set(errorBlock, ERRORS_KEY, []);\n    return this;\n  }\n}","map":{"version":3,"names":["cloneDeep","get","set","ERRORS_KEY","ErrorSchemaBuilder","constructor","initialSchema","errorSchema","resetAllErrors","ErrorSchema","getOrCreateErrorBlock","pathOfError","hasPath","Array","isArray","length","errorBlock","addErrors","errorOrList","errorsList","push","setErrors","listToAdd","clearErrors"],"sources":["D:\\Reactjs\\my-app\\node_modules\\@rjsf\\utils\\src\\ErrorSchemaBuilder.ts"],"sourcesContent":["import cloneDeep from 'lodash/cloneDeep';\nimport get from 'lodash/get';\nimport set from 'lodash/set';\n\nimport { ErrorSchema } from './types';\nimport { ERRORS_KEY } from './constants';\n\n/** The `ErrorSchemaBuilder<T>` is used to build an `ErrorSchema<T>` since the definition of the `ErrorSchema` type is\n * designed for reading information rather than writing it. Use this class to add, replace or clear errors in an error\n * schema by using either dotted path or an array of path names. Once you are done building the `ErrorSchema`, you can\n * get the result and/or reset all the errors back to an initial set and start again.\n */\nexport default class ErrorSchemaBuilder<T = any> {\n  /** The error schema being built\n   *\n   * @private\n   */\n  private errorSchema: ErrorSchema<T> = {};\n\n  /** Construct an `ErrorSchemaBuilder` with an optional initial set of errors in an `ErrorSchema`.\n   *\n   * @param [initialSchema] - The optional set of initial errors, that will be cloned into the class\n   */\n  constructor(initialSchema?: ErrorSchema<T>) {\n    this.resetAllErrors(initialSchema);\n  }\n\n  /** Returns the `ErrorSchema` that has been updated by the methods of the `ErrorSchemaBuilder`\n   */\n  get ErrorSchema() {\n    return this.errorSchema;\n  }\n\n  /** Will get an existing `ErrorSchema` at the specified `pathOfError` or create and return one.\n   *\n   * @param [pathOfError] - The optional path into the `ErrorSchema` at which to add the error(s)\n   * @returns - The error block for the given `pathOfError` or the root if not provided\n   * @private\n   */\n  private getOrCreateErrorBlock(pathOfError?: string | string[]) {\n    const hasPath = (Array.isArray(pathOfError) && pathOfError.length > 0) || typeof pathOfError === 'string';\n    let errorBlock: ErrorSchema = hasPath ? get(this.errorSchema, pathOfError) : this.errorSchema;\n    if (!errorBlock && pathOfError) {\n      errorBlock = {};\n      set(this.errorSchema, pathOfError, errorBlock);\n    }\n    return errorBlock;\n  }\n\n  /** Resets all errors in the `ErrorSchemaBuilder` back to the `initialSchema` if provided, otherwise an empty set.\n   *\n   * @param [initialSchema] - The optional set of initial errors, that will be cloned into the class\n   * @returns - The `ErrorSchemaBuilder` object for chaining purposes\n   */\n  resetAllErrors(initialSchema?: ErrorSchema<T>) {\n    this.errorSchema = initialSchema ? cloneDeep(initialSchema) : {};\n    return this;\n  }\n\n  /** Adds the `errorOrList` to the list of errors in the `ErrorSchema` at either the root level or the location within\n   * the schema described by the `pathOfError`. For more information about how to specify the path see the\n   * [eslint lodash plugin docs](https://github.com/wix/eslint-plugin-lodash/blob/master/docs/rules/path-style.md).\n   *\n   * @param errorOrList - The error or list of errors to add into the `ErrorSchema`\n   * @param [pathOfError] - The optional path into the `ErrorSchema` at which to add the error(s)\n   * @returns - The `ErrorSchemaBuilder` object for chaining purposes\n   */\n  addErrors(errorOrList: string | string[], pathOfError?: string | string[]) {\n    const errorBlock: ErrorSchema = this.getOrCreateErrorBlock(pathOfError);\n    let errorsList = get(errorBlock, ERRORS_KEY);\n    if (!Array.isArray(errorsList)) {\n      errorsList = [];\n      errorBlock[ERRORS_KEY] = errorsList;\n    }\n\n    if (Array.isArray(errorOrList)) {\n      errorsList.push(...errorOrList);\n    } else {\n      errorsList.push(errorOrList);\n    }\n    return this;\n  }\n\n  /** Sets/replaces the `errorOrList` as the error(s) in the `ErrorSchema` at either the root level or the location\n   * within the schema described by the `pathOfError`. For more information about how to specify the path see the\n   * [eslint lodash plugin docs](https://github.com/wix/eslint-plugin-lodash/blob/master/docs/rules/path-style.md).\n   *\n   * @param errorOrList - The error or list of errors to set into the `ErrorSchema`\n   * @param [pathOfError] - The optional path into the `ErrorSchema` at which to set the error(s)\n   * @returns - The `ErrorSchemaBuilder` object for chaining purposes\n   */\n  setErrors(errorOrList: string | string[], pathOfError?: string | string[]) {\n    const errorBlock: ErrorSchema = this.getOrCreateErrorBlock(pathOfError);\n    // Effectively clone the array being given to prevent accidental outside manipulation of the given list\n    const listToAdd = Array.isArray(errorOrList) ? [...errorOrList] : [errorOrList];\n    set(errorBlock, ERRORS_KEY, listToAdd);\n    return this;\n  }\n\n  /** Clears the error(s) in the `ErrorSchema` at either the root level or the location within the schema described by\n   * the `pathOfError`. For more information about how to specify the path see the\n   * [eslint lodash plugin docs](https://github.com/wix/eslint-plugin-lodash/blob/master/docs/rules/path-style.md).\n   *\n   * @param [pathOfError] - The optional path into the `ErrorSchema` at which to clear the error(s)\n   * @returns - The `ErrorSchemaBuilder` object for chaining purposes\n   */\n  clearErrors(pathOfError?: string | string[]) {\n    const errorBlock: ErrorSchema = this.getOrCreateErrorBlock(pathOfError);\n    set(errorBlock, ERRORS_KEY, []);\n    return this;\n  }\n}\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,kBAAkB;AACxC,OAAOC,GAAG,MAAM,YAAY;AAC5B,OAAOC,GAAG,MAAM,YAAY;AAG5B,SAASC,UAAU,QAAQ,aAAa;AAExC;;;;;AAKA,eAAc,MAAOC,kBAAkB;EAOrC;;;;EAIAC,YAAYC,aAA8B;IAV1C;;;;IAIQ,KAAAC,WAAW,GAAmB,EAAE;IAOtC,IAAI,CAACC,cAAc,CAACF,aAAa,CAAC;EACpC;EAEA;;EAEA,IAAIG,WAAWA,CAAA;IACb,OAAO,IAAI,CAACF,WAAW;EACzB;EAEA;;;;;;EAMQG,qBAAqBA,CAACC,WAA+B;IAC3D,MAAMC,OAAO,GAAIC,KAAK,CAACC,OAAO,CAACH,WAAW,CAAC,IAAIA,WAAW,CAACI,MAAM,GAAG,CAAC,IAAK,OAAOJ,WAAW,KAAK,QAAQ;IACzG,IAAIK,UAAU,GAAgBJ,OAAO,GAAGX,GAAG,CAAC,IAAI,CAACM,WAAW,EAAEI,WAAW,CAAC,GAAG,IAAI,CAACJ,WAAW;IAC7F,IAAI,CAACS,UAAU,IAAIL,WAAW,EAAE;MAC9BK,UAAU,GAAG,EAAE;MACfd,GAAG,CAAC,IAAI,CAACK,WAAW,EAAEI,WAAW,EAAEK,UAAU,CAAC;;IAEhD,OAAOA,UAAU;EACnB;EAEA;;;;;EAKAR,cAAcA,CAACF,aAA8B;IAC3C,IAAI,CAACC,WAAW,GAAGD,aAAa,GAAGN,SAAS,CAACM,aAAa,CAAC,GAAG,EAAE;IAChE,OAAO,IAAI;EACb;EAEA;;;;;;;;EAQAW,SAASA,CAACC,WAA8B,EAAEP,WAA+B;IACvE,MAAMK,UAAU,GAAgB,IAAI,CAACN,qBAAqB,CAACC,WAAW,CAAC;IACvE,IAAIQ,UAAU,GAAGlB,GAAG,CAACe,UAAU,EAAEb,UAAU,CAAC;IAC5C,IAAI,CAACU,KAAK,CAACC,OAAO,CAACK,UAAU,CAAC,EAAE;MAC9BA,UAAU,GAAG,EAAE;MACfH,UAAU,CAACb,UAAU,CAAC,GAAGgB,UAAU;;IAGrC,IAAIN,KAAK,CAACC,OAAO,CAACI,WAAW,CAAC,EAAE;MAC9BC,UAAU,CAACC,IAAI,CAAC,GAAGF,WAAW,CAAC;KAChC,MAAM;MACLC,UAAU,CAACC,IAAI,CAACF,WAAW,CAAC;;IAE9B,OAAO,IAAI;EACb;EAEA;;;;;;;;EAQAG,SAASA,CAACH,WAA8B,EAAEP,WAA+B;IACvE,MAAMK,UAAU,GAAgB,IAAI,CAACN,qBAAqB,CAACC,WAAW,CAAC;IACvE;IACA,MAAMW,SAAS,GAAGT,KAAK,CAACC,OAAO,CAACI,WAAW,CAAC,GAAG,CAAC,GAAGA,WAAW,CAAC,GAAG,CAACA,WAAW,CAAC;IAC/EhB,GAAG,CAACc,UAAU,EAAEb,UAAU,EAAEmB,SAAS,CAAC;IACtC,OAAO,IAAI;EACb;EAEA;;;;;;;EAOAC,WAAWA,CAACZ,WAA+B;IACzC,MAAMK,UAAU,GAAgB,IAAI,CAACN,qBAAqB,CAACC,WAAW,CAAC;IACvET,GAAG,CAACc,UAAU,EAAEb,UAAU,EAAE,EAAE,CAAC;IAC/B,OAAO,IAAI;EACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}