{"ast":null,"code":"import { UI_WIDGET_KEY } from '../constants';\nimport retrieveSchema from './retrieveSchema';\n/** Checks to see if the `schema` and `uiSchema` combination represents an array of files\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param schema - The schema for which check for array of files flag is desired\n * @param [uiSchema={}] - The UI schema from which to check the widget\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @returns - True if schema/uiSchema contains an array of files, otherwise false\n */\nexport default function isFilesArray(validator, schema, uiSchema = {}, rootSchema) {\n  if (uiSchema[UI_WIDGET_KEY] === 'files') {\n    return true;\n  }\n  if (schema.items) {\n    const itemsSchema = retrieveSchema(validator, schema.items, rootSchema);\n    return itemsSchema.type === 'string' && itemsSchema.format === 'data-url';\n  }\n  return false;\n}","map":{"version":3,"names":["UI_WIDGET_KEY","retrieveSchema","isFilesArray","validator","schema","uiSchema","rootSchema","items","itemsSchema","type","format"],"sources":["D:\\Reactjs\\my-app\\node_modules\\@rjsf\\utils\\src\\schema\\isFilesArray.ts"],"sourcesContent":["import { UI_WIDGET_KEY } from '../constants';\nimport { FormContextType, RJSFSchema, StrictRJSFSchema, UiSchema, ValidatorType } from '../types';\nimport retrieveSchema from './retrieveSchema';\n\n/** Checks to see if the `schema` and `uiSchema` combination represents an array of files\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param schema - The schema for which check for array of files flag is desired\n * @param [uiSchema={}] - The UI schema from which to check the widget\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @returns - True if schema/uiSchema contains an array of files, otherwise false\n */\nexport default function isFilesArray<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  uiSchema: UiSchema<T, S, F> = {},\n  rootSchema?: S\n) {\n  if (uiSchema[UI_WIDGET_KEY] === 'files') {\n    return true;\n  }\n  if (schema.items) {\n    const itemsSchema = retrieveSchema<T, S, F>(validator, schema.items as S, rootSchema);\n    return itemsSchema.type === 'string' && itemsSchema.format === 'data-url';\n  }\n  return false;\n}\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,cAAc;AAE5C,OAAOC,cAAc,MAAM,kBAAkB;AAE7C;;;;;;;;AAQA,eAAc,SAAUC,YAAYA,CAClCC,SAAiC,EACjCC,MAAS,EACTC,QAAA,GAA8B,EAAE,EAChCC,UAAc;EAEd,IAAID,QAAQ,CAACL,aAAa,CAAC,KAAK,OAAO,EAAE;IACvC,OAAO,IAAI;;EAEb,IAAII,MAAM,CAACG,KAAK,EAAE;IAChB,MAAMC,WAAW,GAAGP,cAAc,CAAUE,SAAS,EAAEC,MAAM,CAACG,KAAU,EAAED,UAAU,CAAC;IACrF,OAAOE,WAAW,CAACC,IAAI,KAAK,QAAQ,IAAID,WAAW,CAACE,MAAM,KAAK,UAAU;;EAE3E,OAAO,KAAK;AACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}