{"ast":null,"code":"/** Attempts to convert the string into a number. If an empty string is provided, then `undefined` is returned. If a\n * `null` is provided, it is returned. If the string ends in a `.` then the string is returned because the user may be\n * in the middle of typing a float number. If a number ends in a pattern like `.0`, `.20`, `.030`, string is returned\n * because the user may be typing number that will end in a non-zero digit. Otherwise, the string is wrapped by\n * `Number()` and if that result is not `NaN`, that number will be returned, otherwise the string `value` will be.\n *\n * @param value - The string or null value to convert to a number\n * @returns - The `value` converted to a number when appropriate, otherwise the `value`\n */\nexport default function asNumber(value) {\n  if (value === '') {\n    return undefined;\n  }\n  if (value === null) {\n    return null;\n  }\n  if (/\\.$/.test(value)) {\n    // '3.' can't really be considered a number even if it parses in js. The\n    // user is most likely entering a float.\n    return value;\n  }\n  if (/\\.0$/.test(value)) {\n    // we need to return this as a string here, to allow for input like 3.07\n    return value;\n  }\n  if (/\\.\\d*0$/.test(value)) {\n    // It's a number, that's cool - but we need it as a string so it doesn't screw\n    // with the user when entering dollar amounts or other values (such as those with\n    // specific precision or number of significant digits)\n    return value;\n  }\n  const n = Number(value);\n  const valid = typeof n === 'number' && !Number.isNaN(n);\n  return valid ? n : value;\n}","map":{"version":3,"names":["asNumber","value","undefined","test","n","Number","valid","isNaN"],"sources":["D:\\Reactjs\\my-app\\node_modules\\@rjsf\\utils\\src\\asNumber.ts"],"sourcesContent":["/** Attempts to convert the string into a number. If an empty string is provided, then `undefined` is returned. If a\n * `null` is provided, it is returned. If the string ends in a `.` then the string is returned because the user may be\n * in the middle of typing a float number. If a number ends in a pattern like `.0`, `.20`, `.030`, string is returned\n * because the user may be typing number that will end in a non-zero digit. Otherwise, the string is wrapped by\n * `Number()` and if that result is not `NaN`, that number will be returned, otherwise the string `value` will be.\n *\n * @param value - The string or null value to convert to a number\n * @returns - The `value` converted to a number when appropriate, otherwise the `value`\n */\nexport default function asNumber(value: string | null) {\n  if (value === '') {\n    return undefined;\n  }\n  if (value === null) {\n    return null;\n  }\n  if (/\\.$/.test(value)) {\n    // '3.' can't really be considered a number even if it parses in js. The\n    // user is most likely entering a float.\n    return value;\n  }\n  if (/\\.0$/.test(value)) {\n    // we need to return this as a string here, to allow for input like 3.07\n    return value;\n  }\n\n  if (/\\.\\d*0$/.test(value)) {\n    // It's a number, that's cool - but we need it as a string so it doesn't screw\n    // with the user when entering dollar amounts or other values (such as those with\n    // specific precision or number of significant digits)\n    return value;\n  }\n\n  const n = Number(value);\n  const valid = typeof n === 'number' && !Number.isNaN(n);\n\n  return valid ? n : value;\n}\n"],"mappings":"AAAA;;;;;;;;;AASA,eAAc,SAAUA,QAAQA,CAACC,KAAoB;EACnD,IAAIA,KAAK,KAAK,EAAE,EAAE;IAChB,OAAOC,SAAS;;EAElB,IAAID,KAAK,KAAK,IAAI,EAAE;IAClB,OAAO,IAAI;;EAEb,IAAI,KAAK,CAACE,IAAI,CAACF,KAAK,CAAC,EAAE;IACrB;IACA;IACA,OAAOA,KAAK;;EAEd,IAAI,MAAM,CAACE,IAAI,CAACF,KAAK,CAAC,EAAE;IACtB;IACA,OAAOA,KAAK;;EAGd,IAAI,SAAS,CAACE,IAAI,CAACF,KAAK,CAAC,EAAE;IACzB;IACA;IACA;IACA,OAAOA,KAAK;;EAGd,MAAMG,CAAC,GAAGC,MAAM,CAACJ,KAAK,CAAC;EACvB,MAAMK,KAAK,GAAG,OAAOF,CAAC,KAAK,QAAQ,IAAI,CAACC,MAAM,CAACE,KAAK,CAACH,CAAC,CAAC;EAEvD,OAAOE,KAAK,GAAGF,CAAC,GAAGH,KAAK;AAC1B"},"metadata":{},"sourceType":"module","externalDependencies":[]}