{"ast":null,"code":"import { UI_FIELD_KEY, UI_WIDGET_KEY } from '../constants';\nimport getSchemaType from '../getSchemaType';\nimport getUiOptions from '../getUiOptions';\nimport isCustomWidget from '../isCustomWidget';\nimport isFilesArray from './isFilesArray';\nimport isMultiSelect from './isMultiSelect';\n/** Determines whether the combination of `schema` and `uiSchema` properties indicates that the label for the `schema`\n * should be displayed in a UI.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param schema - The schema for which the display label flag is desired\n * @param [uiSchema={}] - The UI schema from which to derive potentially displayable information\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @param [globalOptions={}] - The optional Global UI Schema from which to get any fallback `xxx` options\n * @returns - True if the label should be displayed or false if it should not\n */\nexport default function getDisplayLabel(validator, schema, uiSchema = {}, rootSchema, globalOptions) {\n  const uiOptions = getUiOptions(uiSchema, globalOptions);\n  const {\n    label = true\n  } = uiOptions;\n  let displayLabel = !!label;\n  const schemaType = getSchemaType(schema);\n  if (schemaType === 'array') {\n    displayLabel = isMultiSelect(validator, schema, rootSchema) || isFilesArray(validator, schema, uiSchema, rootSchema) || isCustomWidget(uiSchema);\n  }\n  if (schemaType === 'object') {\n    displayLabel = false;\n  }\n  if (schemaType === 'boolean' && !uiSchema[UI_WIDGET_KEY]) {\n    displayLabel = false;\n  }\n  if (uiSchema[UI_FIELD_KEY]) {\n    displayLabel = false;\n  }\n  return displayLabel;\n}","map":{"version":3,"names":["UI_FIELD_KEY","UI_WIDGET_KEY","getSchemaType","getUiOptions","isCustomWidget","isFilesArray","isMultiSelect","getDisplayLabel","validator","schema","uiSchema","rootSchema","globalOptions","uiOptions","label","displayLabel","schemaType"],"sources":["D:\\Reactjs\\my-app\\node_modules\\@rjsf\\utils\\src\\schema\\getDisplayLabel.ts"],"sourcesContent":["import { UI_FIELD_KEY, UI_WIDGET_KEY } from '../constants';\nimport getSchemaType from '../getSchemaType';\nimport getUiOptions from '../getUiOptions';\nimport isCustomWidget from '../isCustomWidget';\nimport {\n  FormContextType,\n  GlobalUISchemaOptions,\n  RJSFSchema,\n  StrictRJSFSchema,\n  UiSchema,\n  ValidatorType,\n} from '../types';\nimport isFilesArray from './isFilesArray';\nimport isMultiSelect from './isMultiSelect';\n\n/** Determines whether the combination of `schema` and `uiSchema` properties indicates that the label for the `schema`\n * should be displayed in a UI.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param schema - The schema for which the display label flag is desired\n * @param [uiSchema={}] - The UI schema from which to derive potentially displayable information\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @param [globalOptions={}] - The optional Global UI Schema from which to get any fallback `xxx` options\n * @returns - True if the label should be displayed or false if it should not\n */\nexport default function getDisplayLabel<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  uiSchema: UiSchema<T, S, F> = {},\n  rootSchema?: S,\n  globalOptions?: GlobalUISchemaOptions\n): boolean {\n  const uiOptions = getUiOptions<T, S, F>(uiSchema, globalOptions);\n  const { label = true } = uiOptions;\n  let displayLabel = !!label;\n  const schemaType = getSchemaType<S>(schema);\n\n  if (schemaType === 'array') {\n    displayLabel =\n      isMultiSelect<T, S, F>(validator, schema, rootSchema) ||\n      isFilesArray<T, S, F>(validator, schema, uiSchema, rootSchema) ||\n      isCustomWidget(uiSchema);\n  }\n\n  if (schemaType === 'object') {\n    displayLabel = false;\n  }\n  if (schemaType === 'boolean' && !uiSchema[UI_WIDGET_KEY]) {\n    displayLabel = false;\n  }\n  if (uiSchema[UI_FIELD_KEY]) {\n    displayLabel = false;\n  }\n  return displayLabel;\n}\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,aAAa,QAAQ,cAAc;AAC1D,OAAOC,aAAa,MAAM,kBAAkB;AAC5C,OAAOC,YAAY,MAAM,iBAAiB;AAC1C,OAAOC,cAAc,MAAM,mBAAmB;AAS9C,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAOC,aAAa,MAAM,iBAAiB;AAE3C;;;;;;;;;;AAUA,eAAc,SAAUC,eAAeA,CAKrCC,SAAiC,EACjCC,MAAS,EACTC,QAAA,GAA8B,EAAE,EAChCC,UAAc,EACdC,aAAqC;EAErC,MAAMC,SAAS,GAAGV,YAAY,CAAUO,QAAQ,EAAEE,aAAa,CAAC;EAChE,MAAM;IAAEE,KAAK,GAAG;EAAI,CAAE,GAAGD,SAAS;EAClC,IAAIE,YAAY,GAAG,CAAC,CAACD,KAAK;EAC1B,MAAME,UAAU,GAAGd,aAAa,CAAIO,MAAM,CAAC;EAE3C,IAAIO,UAAU,KAAK,OAAO,EAAE;IAC1BD,YAAY,GACVT,aAAa,CAAUE,SAAS,EAAEC,MAAM,EAAEE,UAAU,CAAC,IACrDN,YAAY,CAAUG,SAAS,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,UAAU,CAAC,IAC9DP,cAAc,CAACM,QAAQ,CAAC;;EAG5B,IAAIM,UAAU,KAAK,QAAQ,EAAE;IAC3BD,YAAY,GAAG,KAAK;;EAEtB,IAAIC,UAAU,KAAK,SAAS,IAAI,CAACN,QAAQ,CAACT,aAAa,CAAC,EAAE;IACxDc,YAAY,GAAG,KAAK;;EAEtB,IAAIL,QAAQ,CAACV,YAAY,CAAC,EAAE;IAC1Be,YAAY,GAAG,KAAK;;EAEtB,OAAOA,YAAY;AACrB"},"metadata":{},"sourceType":"module","externalDependencies":[]}