{"ast":null,"code":"import enumOptionsValueForIndex from './enumOptionsValueForIndex';\nimport isNil from 'lodash/isNil';\n/** Add the enum option value at the `valueIndex` to the list of `selected` values in the proper order as defined by\n * `allEnumOptions`\n *\n * @param valueIndex - The index of the value that should be selected\n * @param selected - The current list of selected values\n * @param [allEnumOptions=[]] - The list of all the known enumOptions\n * @returns - The updated list of selected enum values with enum value at the `valueIndex` added to it\n */\nexport default function enumOptionsSelectValue(valueIndex, selected) {\n  let allEnumOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  const value = enumOptionsValueForIndex(valueIndex, allEnumOptions);\n  if (!isNil(value)) {\n    const index = allEnumOptions.findIndex(opt => value === opt.value);\n    const all = allEnumOptions.map(_ref => {\n      let {\n        value: val\n      } = _ref;\n      return val;\n    });\n    const updated = selected.slice(0, index).concat(value, selected.slice(index));\n    // As inserting values at predefined index positions doesn't work with empty\n    // arrays, we need to reorder the updated selection to match the initial order\n    return updated.sort((a, b) => Number(all.indexOf(a) > all.indexOf(b)));\n  }\n  return selected;\n}","map":{"version":3,"names":["enumOptionsValueForIndex","isNil","enumOptionsSelectValue","valueIndex","selected","allEnumOptions","arguments","length","undefined","value","index","findIndex","opt","all","map","_ref","val","updated","slice","concat","sort","a","b","Number","indexOf"],"sources":["D:\\Reactjs\\my-app\\node_modules\\@rjsf\\utils\\src\\enumOptionsSelectValue.ts"],"sourcesContent":["import { EnumOptionsType, RJSFSchema, StrictRJSFSchema } from './types';\nimport enumOptionsValueForIndex from './enumOptionsValueForIndex';\nimport isNil from 'lodash/isNil';\n\n/** Add the enum option value at the `valueIndex` to the list of `selected` values in the proper order as defined by\n * `allEnumOptions`\n *\n * @param valueIndex - The index of the value that should be selected\n * @param selected - The current list of selected values\n * @param [allEnumOptions=[]] - The list of all the known enumOptions\n * @returns - The updated list of selected enum values with enum value at the `valueIndex` added to it\n */\nexport default function enumOptionsSelectValue<S extends StrictRJSFSchema = RJSFSchema>(\n  valueIndex: string | number,\n  selected: EnumOptionsType<S>['value'][],\n  allEnumOptions: EnumOptionsType<S>[] = []\n) {\n  const value = enumOptionsValueForIndex<S>(valueIndex, allEnumOptions);\n  if (!isNil(value)) {\n    const index = allEnumOptions.findIndex((opt) => value === opt.value);\n    const all = allEnumOptions.map(({ value: val }) => val);\n    const updated = selected.slice(0, index).concat(value, selected.slice(index));\n    // As inserting values at predefined index positions doesn't work with empty\n    // arrays, we need to reorder the updated selection to match the initial order\n    return updated.sort((a, b) => Number(all.indexOf(a) > all.indexOf(b)));\n  }\n  return selected;\n}\n"],"mappings":"AACA,OAAOA,wBAAwB,MAAM,4BAA4B;AACjE,OAAOC,KAAK,MAAM,cAAc;AAEhC;;;;;;;;AAQA,eAAc,SAAUC,sBAAsBA,CAC5CC,UAA2B,EAC3BC,QAAuC,EACE;EAAA,IAAzCC,cAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAuC,EAAE;EAEzC,MAAMG,KAAK,GAAGT,wBAAwB,CAAIG,UAAU,EAAEE,cAAc,CAAC;EACrE,IAAI,CAACJ,KAAK,CAACQ,KAAK,CAAC,EAAE;IACjB,MAAMC,KAAK,GAAGL,cAAc,CAACM,SAAS,CAAEC,GAAG,IAAKH,KAAK,KAAKG,GAAG,CAACH,KAAK,CAAC;IACpE,MAAMI,GAAG,GAAGR,cAAc,CAACS,GAAG,CAACC,IAAA;MAAA,IAAC;QAAEN,KAAK,EAAEO;MAAG,CAAE,GAAAD,IAAA;MAAA,OAAKC,GAAG;IAAA,EAAC;IACvD,MAAMC,OAAO,GAAGb,QAAQ,CAACc,KAAK,CAAC,CAAC,EAAER,KAAK,CAAC,CAACS,MAAM,CAACV,KAAK,EAAEL,QAAQ,CAACc,KAAK,CAACR,KAAK,CAAC,CAAC;IAC7E;IACA;IACA,OAAOO,OAAO,CAACG,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKC,MAAM,CAACV,GAAG,CAACW,OAAO,CAACH,CAAC,CAAC,GAAGR,GAAG,CAACW,OAAO,CAACF,CAAC,CAAC,CAAC,CAAC;;EAExE,OAAOlB,QAAQ;AACjB"},"metadata":{},"sourceType":"module","externalDependencies":[]}