{"ast":null,"code":"import getWidget from './getWidget';\n/** Detects whether the `widget` exists for the `schema` with the associated `registryWidgets` and returns true if it\n * does, or false if it doesn't.\n *\n * @param schema - The schema for the field\n * @param widget - Either the name of the widget OR a `Widget` implementation to use\n * @param [registeredWidgets={}] - A registry of widget name to `Widget` implementation\n * @returns - True if the widget exists, false otherwise\n */\nexport default function hasWidget(schema, widget, registeredWidgets = {}) {\n  try {\n    getWidget(schema, widget, registeredWidgets);\n    return true;\n  } catch (e) {\n    const err = e;\n    if (err.message && (err.message.startsWith('No widget') || err.message.startsWith('Unsupported widget'))) {\n      return false;\n    }\n    throw e;\n  }\n}","map":{"version":3,"names":["getWidget","hasWidget","schema","widget","registeredWidgets","e","err","message","startsWith"],"sources":["D:\\Reactjs\\my-app\\node_modules\\@rjsf\\utils\\src\\hasWidget.ts"],"sourcesContent":["import getWidget from './getWidget';\nimport { FormContextType, RegistryWidgetsType, RJSFSchema, StrictRJSFSchema, Widget } from './types';\n\n/** Detects whether the `widget` exists for the `schema` with the associated `registryWidgets` and returns true if it\n * does, or false if it doesn't.\n *\n * @param schema - The schema for the field\n * @param widget - Either the name of the widget OR a `Widget` implementation to use\n * @param [registeredWidgets={}] - A registry of widget name to `Widget` implementation\n * @returns - True if the widget exists, false otherwise\n */\nexport default function hasWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  schema: RJSFSchema,\n  widget: Widget<T, S, F> | string,\n  registeredWidgets: RegistryWidgetsType<T, S, F> = {}\n) {\n  try {\n    getWidget(schema, widget, registeredWidgets);\n    return true;\n  } catch (e) {\n    const err: Error = e as Error;\n    if (err.message && (err.message.startsWith('No widget') || err.message.startsWith('Unsupported widget'))) {\n      return false;\n    }\n    throw e;\n  }\n}\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,aAAa;AAGnC;;;;;;;;AAQA,eAAc,SAAUC,SAASA,CAC/BC,MAAkB,EAClBC,MAAgC,EAChCC,iBAAA,GAAkD,EAAE;EAEpD,IAAI;IACFJ,SAAS,CAACE,MAAM,EAAEC,MAAM,EAAEC,iBAAiB,CAAC;IAC5C,OAAO,IAAI;GACZ,CAAC,OAAOC,CAAC,EAAE;IACV,MAAMC,GAAG,GAAUD,CAAU;IAC7B,IAAIC,GAAG,CAACC,OAAO,KAAKD,GAAG,CAACC,OAAO,CAACC,UAAU,CAAC,WAAW,CAAC,IAAIF,GAAG,CAACC,OAAO,CAACC,UAAU,CAAC,oBAAoB,CAAC,CAAC,EAAE;MACxG,OAAO,KAAK;;IAEd,MAAMH,CAAC;;AAEX"},"metadata":{},"sourceType":"module","externalDependencies":[]}