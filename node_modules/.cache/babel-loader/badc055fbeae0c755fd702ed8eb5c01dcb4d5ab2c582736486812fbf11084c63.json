{"ast":null,"code":"import Ajv from 'ajv';\nimport addFormats from 'ajv-formats';\nimport isObject from 'lodash/isObject';\nimport { ADDITIONAL_PROPERTY_FLAG, RJSF_ADDITONAL_PROPERTIES_FLAG } from '@rjsf/utils';\nexport const AJV_CONFIG = {\n  allErrors: true,\n  multipleOfPrecision: 8,\n  strict: false,\n  verbose: true\n};\nexport const COLOR_FORMAT_REGEX = /^(#?([0-9A-Fa-f]{3}){1,2}\\b|aqua|black|blue|fuchsia|gray|green|lime|maroon|navy|olive|orange|purple|red|silver|teal|white|yellow|(rgb\\(\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*,\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*,\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*\\))|(rgb\\(\\s*(\\d?\\d%|100%)+\\s*,\\s*(\\d?\\d%|100%)+\\s*,\\s*(\\d?\\d%|100%)+\\s*\\)))$/;\nexport const DATA_URL_FORMAT_REGEX = /^data:([a-z]+\\/[a-z0-9-+.]+)?;(?:name=(.*);)?base64,(.*)$/;\n/** Creates an Ajv version 8 implementation object with standard support for the 'color` and `data-url` custom formats.\n * If `additionalMetaSchemas` are provided then the Ajv instance is modified to add each of the meta schemas in the\n * list. If `customFormats` are provided then those additional formats are added to the list of supported formats. If\n * `ajvOptionsOverrides` are provided then they are spread on top of the default `AJV_CONFIG` options when constructing\n * the `Ajv` instance. With Ajv v8, the JSON Schema formats are not provided by default, but can be plugged in. By\n * default, all formats from the `ajv-formats` library are added. To disable this capability, set the `ajvFormatOptions`\n * parameter to `false`. Additionally, you can configure the `ajv-formats` by providing a custom set of\n * [format options](https://github.com/ajv-validator/ajv-formats) to the `ajvFormatOptions` parameter.\n *\n * @param [additionalMetaSchemas] - The list of additional meta schemas that the validator can access\n * @param [customFormats] - The set of additional custom formats that the validator will support\n * @param [ajvOptionsOverrides={}] - The set of validator config override options\n * @param [ajvFormatOptions] - The `ajv-format` options to use when adding formats to `ajv`; pass `false` to disable it\n * @param [AjvClass] - The `Ajv` class to use when creating the validator instance\n */\nexport default function createAjvInstance(additionalMetaSchemas, customFormats) {\n  let ajvOptionsOverrides = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let ajvFormatOptions = arguments.length > 3 ? arguments[3] : undefined;\n  let AjvClass = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : Ajv;\n  const ajv = new AjvClass({\n    ...AJV_CONFIG,\n    ...ajvOptionsOverrides\n  });\n  if (ajvFormatOptions) {\n    addFormats(ajv, ajvFormatOptions);\n  } else if (ajvFormatOptions !== false) {\n    addFormats(ajv);\n  }\n  // add custom formats\n  ajv.addFormat('data-url', DATA_URL_FORMAT_REGEX);\n  ajv.addFormat('color', COLOR_FORMAT_REGEX);\n  // Add RJSF-specific additional properties keywords so Ajv doesn't report errors if strict is enabled.\n  ajv.addKeyword(ADDITIONAL_PROPERTY_FLAG);\n  ajv.addKeyword(RJSF_ADDITONAL_PROPERTIES_FLAG);\n  // add more schemas to validate against\n  if (Array.isArray(additionalMetaSchemas)) {\n    ajv.addMetaSchema(additionalMetaSchemas);\n  }\n  // add more custom formats to validate against\n  if (isObject(customFormats)) {\n    Object.keys(customFormats).forEach(formatName => {\n      ajv.addFormat(formatName, customFormats[formatName]);\n    });\n  }\n  return ajv;\n}","map":{"version":3,"names":["Ajv","addFormats","isObject","ADDITIONAL_PROPERTY_FLAG","RJSF_ADDITONAL_PROPERTIES_FLAG","AJV_CONFIG","allErrors","multipleOfPrecision","strict","verbose","COLOR_FORMAT_REGEX","DATA_URL_FORMAT_REGEX","createAjvInstance","additionalMetaSchemas","customFormats","ajvOptionsOverrides","arguments","length","undefined","ajvFormatOptions","AjvClass","ajv","addFormat","addKeyword","Array","isArray","addMetaSchema","Object","keys","forEach","formatName"],"sources":["D:\\Reactjs\\my-app\\node_modules\\@rjsf\\validator-ajv8\\src\\createAjvInstance.ts"],"sourcesContent":["import Ajv, { Options } from 'ajv';\nimport addFormats, { FormatsPluginOptions } from 'ajv-formats';\nimport isObject from 'lodash/isObject';\n\nimport { CustomValidatorOptionsType } from './types';\nimport { ADDITIONAL_PROPERTY_FLAG, RJSF_ADDITONAL_PROPERTIES_FLAG } from '@rjsf/utils';\n\nexport const AJV_CONFIG: Options = {\n  allErrors: true,\n  multipleOfPrecision: 8,\n  strict: false,\n  verbose: true,\n} as const;\nexport const COLOR_FORMAT_REGEX =\n  /^(#?([0-9A-Fa-f]{3}){1,2}\\b|aqua|black|blue|fuchsia|gray|green|lime|maroon|navy|olive|orange|purple|red|silver|teal|white|yellow|(rgb\\(\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*,\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*,\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*\\))|(rgb\\(\\s*(\\d?\\d%|100%)+\\s*,\\s*(\\d?\\d%|100%)+\\s*,\\s*(\\d?\\d%|100%)+\\s*\\)))$/;\nexport const DATA_URL_FORMAT_REGEX = /^data:([a-z]+\\/[a-z0-9-+.]+)?;(?:name=(.*);)?base64,(.*)$/;\n\n/** Creates an Ajv version 8 implementation object with standard support for the 'color` and `data-url` custom formats.\n * If `additionalMetaSchemas` are provided then the Ajv instance is modified to add each of the meta schemas in the\n * list. If `customFormats` are provided then those additional formats are added to the list of supported formats. If\n * `ajvOptionsOverrides` are provided then they are spread on top of the default `AJV_CONFIG` options when constructing\n * the `Ajv` instance. With Ajv v8, the JSON Schema formats are not provided by default, but can be plugged in. By\n * default, all formats from the `ajv-formats` library are added. To disable this capability, set the `ajvFormatOptions`\n * parameter to `false`. Additionally, you can configure the `ajv-formats` by providing a custom set of\n * [format options](https://github.com/ajv-validator/ajv-formats) to the `ajvFormatOptions` parameter.\n *\n * @param [additionalMetaSchemas] - The list of additional meta schemas that the validator can access\n * @param [customFormats] - The set of additional custom formats that the validator will support\n * @param [ajvOptionsOverrides={}] - The set of validator config override options\n * @param [ajvFormatOptions] - The `ajv-format` options to use when adding formats to `ajv`; pass `false` to disable it\n * @param [AjvClass] - The `Ajv` class to use when creating the validator instance\n */\nexport default function createAjvInstance(\n  additionalMetaSchemas?: CustomValidatorOptionsType['additionalMetaSchemas'],\n  customFormats?: CustomValidatorOptionsType['customFormats'],\n  ajvOptionsOverrides: CustomValidatorOptionsType['ajvOptionsOverrides'] = {},\n  ajvFormatOptions?: FormatsPluginOptions | false,\n  AjvClass: typeof Ajv = Ajv\n) {\n  const ajv = new AjvClass({ ...AJV_CONFIG, ...ajvOptionsOverrides });\n  if (ajvFormatOptions) {\n    addFormats(ajv, ajvFormatOptions);\n  } else if (ajvFormatOptions !== false) {\n    addFormats(ajv);\n  }\n\n  // add custom formats\n  ajv.addFormat('data-url', DATA_URL_FORMAT_REGEX);\n  ajv.addFormat('color', COLOR_FORMAT_REGEX);\n\n  // Add RJSF-specific additional properties keywords so Ajv doesn't report errors if strict is enabled.\n  ajv.addKeyword(ADDITIONAL_PROPERTY_FLAG);\n  ajv.addKeyword(RJSF_ADDITONAL_PROPERTIES_FLAG);\n\n  // add more schemas to validate against\n  if (Array.isArray(additionalMetaSchemas)) {\n    ajv.addMetaSchema(additionalMetaSchemas);\n  }\n\n  // add more custom formats to validate against\n  if (isObject(customFormats)) {\n    Object.keys(customFormats).forEach((formatName) => {\n      ajv.addFormat(formatName, customFormats[formatName]);\n    });\n  }\n\n  return ajv;\n}\n"],"mappings":"AAAA,OAAOA,GAAgB,MAAM,KAAK;AAClC,OAAOC,UAAoC,MAAM,aAAa;AAC9D,OAAOC,QAAQ,MAAM,iBAAiB;AAGtC,SAASC,wBAAwB,EAAEC,8BAA8B,QAAQ,aAAa;AAEtF,OAAO,MAAMC,UAAU,GAAY;EACjCC,SAAS,EAAE,IAAI;EACfC,mBAAmB,EAAE,CAAC;EACtBC,MAAM,EAAE,KAAK;EACbC,OAAO,EAAE;CACD;AACV,OAAO,MAAMC,kBAAkB,GAC7B,4YAA4Y;AAC9Y,OAAO,MAAMC,qBAAqB,GAAG,2DAA2D;AAEhG;;;;;;;;;;;;;;;AAeA,eAAc,SAAUC,iBAAiBA,CACvCC,qBAA2E,EAC3EC,aAA2D,EAGjC;EAAA,IAF1BC,mBAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAyE,EAAE;EAAA,IAC3EG,gBAA+C,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAAA,IAC/CE,QAAA,GAAAJ,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAuBhB,GAAG;EAE1B,MAAMqB,GAAG,GAAG,IAAID,QAAQ,CAAC;IAAE,GAAGf,UAAU;IAAE,GAAGU;EAAmB,CAAE,CAAC;EACnE,IAAII,gBAAgB,EAAE;IACpBlB,UAAU,CAACoB,GAAG,EAAEF,gBAAgB,CAAC;GAClC,MAAM,IAAIA,gBAAgB,KAAK,KAAK,EAAE;IACrClB,UAAU,CAACoB,GAAG,CAAC;;EAGjB;EACAA,GAAG,CAACC,SAAS,CAAC,UAAU,EAAEX,qBAAqB,CAAC;EAChDU,GAAG,CAACC,SAAS,CAAC,OAAO,EAAEZ,kBAAkB,CAAC;EAE1C;EACAW,GAAG,CAACE,UAAU,CAACpB,wBAAwB,CAAC;EACxCkB,GAAG,CAACE,UAAU,CAACnB,8BAA8B,CAAC;EAE9C;EACA,IAAIoB,KAAK,CAACC,OAAO,CAACZ,qBAAqB,CAAC,EAAE;IACxCQ,GAAG,CAACK,aAAa,CAACb,qBAAqB,CAAC;;EAG1C;EACA,IAAIX,QAAQ,CAACY,aAAa,CAAC,EAAE;IAC3Ba,MAAM,CAACC,IAAI,CAACd,aAAa,CAAC,CAACe,OAAO,CAAEC,UAAU,IAAI;MAChDT,GAAG,CAACC,SAAS,CAACQ,UAAU,EAAEhB,aAAa,CAACgB,UAAU,CAAC,CAAC;IACtD,CAAC,CAAC;;EAGJ,OAAOT,GAAG;AACZ"},"metadata":{},"sourceType":"module","externalDependencies":[]}