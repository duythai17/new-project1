{"ast":null,"code":"import rangeSpec from './rangeSpec';\n/** Using the `schema`, `defaultType` and `options`, extract out the props for the <input> element that make sense.\n *\n * @param schema - The schema for the field provided by the widget\n * @param [defaultType] - The default type, if any, for the field provided by the widget\n * @param [options={}] - The UI Options for the field provided by the widget\n * @param [autoDefaultStepAny=true] - Determines whether to auto-default step=any when the type is number and no step\n * @returns - The extracted `InputPropsType` object\n */\nexport default function getInputProps(schema, defaultType, options = {}, autoDefaultStepAny = true) {\n  const inputProps = {\n    type: defaultType || 'text',\n    ...rangeSpec(schema)\n  };\n  // If options.inputType is set use that as the input type\n  if (options.inputType) {\n    inputProps.type = options.inputType;\n  } else if (!defaultType) {\n    // If the schema is of type number or integer, set the input type to number\n    if (schema.type === 'number') {\n      inputProps.type = 'number';\n      // Only add step if one isn't already defined and we are auto-defaulting the \"any\" step\n      if (autoDefaultStepAny && inputProps.step === undefined) {\n        // Setting step to 'any' fixes a bug in Safari where decimals are not\n        // allowed in number inputs\n        inputProps.step = 'any';\n      }\n    } else if (schema.type === 'integer') {\n      inputProps.type = 'number';\n      // Only add step if one isn't already defined\n      if (inputProps.step === undefined) {\n        // Since this is integer, you always want to step up or down in multiples of 1\n        inputProps.step = 1;\n      }\n    }\n  }\n  if (options.autocomplete) {\n    inputProps.autoComplete = options.autocomplete;\n  }\n  return inputProps;\n}","map":{"version":3,"names":["rangeSpec","getInputProps","schema","defaultType","options","autoDefaultStepAny","inputProps","type","inputType","step","undefined","autocomplete","autoComplete"],"sources":["D:\\Reactjs\\my-app\\node_modules\\@rjsf\\utils\\src\\getInputProps.ts"],"sourcesContent":["import rangeSpec from './rangeSpec';\nimport { FormContextType, InputPropsType, RJSFSchema, StrictRJSFSchema, UIOptionsType } from './types';\n\n/** Using the `schema`, `defaultType` and `options`, extract out the props for the <input> element that make sense.\n *\n * @param schema - The schema for the field provided by the widget\n * @param [defaultType] - The default type, if any, for the field provided by the widget\n * @param [options={}] - The UI Options for the field provided by the widget\n * @param [autoDefaultStepAny=true] - Determines whether to auto-default step=any when the type is number and no step\n * @returns - The extracted `InputPropsType` object\n */\nexport default function getInputProps<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  schema: RJSFSchema,\n  defaultType?: string,\n  options: UIOptionsType<T, S, F> = {},\n  autoDefaultStepAny = true\n): InputPropsType {\n  const inputProps: InputPropsType = {\n    type: defaultType || 'text',\n    ...rangeSpec(schema),\n  };\n\n  // If options.inputType is set use that as the input type\n  if (options.inputType) {\n    inputProps.type = options.inputType;\n  } else if (!defaultType) {\n    // If the schema is of type number or integer, set the input type to number\n    if (schema.type === 'number') {\n      inputProps.type = 'number';\n      // Only add step if one isn't already defined and we are auto-defaulting the \"any\" step\n      if (autoDefaultStepAny && inputProps.step === undefined) {\n        // Setting step to 'any' fixes a bug in Safari where decimals are not\n        // allowed in number inputs\n        inputProps.step = 'any';\n      }\n    } else if (schema.type === 'integer') {\n      inputProps.type = 'number';\n      // Only add step if one isn't already defined\n      if (inputProps.step === undefined) {\n        // Since this is integer, you always want to step up or down in multiples of 1\n        inputProps.step = 1;\n      }\n    }\n  }\n\n  if (options.autocomplete) {\n    inputProps.autoComplete = options.autocomplete;\n  }\n\n  return inputProps;\n}\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,aAAa;AAGnC;;;;;;;;AAQA,eAAc,SAAUC,aAAaA,CAKnCC,MAAkB,EAClBC,WAAoB,EACpBC,OAAA,GAAkC,EAAE,EACpCC,kBAAkB,GAAG,IAAI;EAEzB,MAAMC,UAAU,GAAmB;IACjCC,IAAI,EAAEJ,WAAW,IAAI,MAAM;IAC3B,GAAGH,SAAS,CAACE,MAAM;GACpB;EAED;EACA,IAAIE,OAAO,CAACI,SAAS,EAAE;IACrBF,UAAU,CAACC,IAAI,GAAGH,OAAO,CAACI,SAAS;GACpC,MAAM,IAAI,CAACL,WAAW,EAAE;IACvB;IACA,IAAID,MAAM,CAACK,IAAI,KAAK,QAAQ,EAAE;MAC5BD,UAAU,CAACC,IAAI,GAAG,QAAQ;MAC1B;MACA,IAAIF,kBAAkB,IAAIC,UAAU,CAACG,IAAI,KAAKC,SAAS,EAAE;QACvD;QACA;QACAJ,UAAU,CAACG,IAAI,GAAG,KAAK;;KAE1B,MAAM,IAAIP,MAAM,CAACK,IAAI,KAAK,SAAS,EAAE;MACpCD,UAAU,CAACC,IAAI,GAAG,QAAQ;MAC1B;MACA,IAAID,UAAU,CAACG,IAAI,KAAKC,SAAS,EAAE;QACjC;QACAJ,UAAU,CAACG,IAAI,GAAG,CAAC;;;;EAKzB,IAAIL,OAAO,CAACO,YAAY,EAAE;IACxBL,UAAU,CAACM,YAAY,GAAGR,OAAO,CAACO,YAAY;;EAGhD,OAAOL,UAAU;AACnB"},"metadata":{},"sourceType":"module","externalDependencies":[]}