{"ast":null,"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useCallback, useEffect, useReducer, useState } from 'react';\nimport { ariaDescribedByIds, parseDateString, toDateString, pad, TranslatableString } from '@rjsf/utils';\nfunction rangeOptions(start, stop) {\n  const options = [];\n  for (let i = start; i <= stop; i++) {\n    options.push({\n      value: i,\n      label: pad(i, 2)\n    });\n  }\n  return options;\n}\nfunction readyForChange(state) {\n  return Object.values(state).every(value => value !== -1);\n}\nfunction dateElementProps(state, time) {\n  let yearsRange = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [1900, new Date().getFullYear() + 2];\n  const {\n    year,\n    month,\n    day,\n    hour,\n    minute,\n    second\n  } = state;\n  const data = [{\n    type: 'year',\n    range: yearsRange,\n    value: year\n  }, {\n    type: 'month',\n    range: [1, 12],\n    value: month\n  }, {\n    type: 'day',\n    range: [1, 31],\n    value: day\n  }];\n  if (time) {\n    data.push({\n      type: 'hour',\n      range: [0, 23],\n      value: hour\n    }, {\n      type: 'minute',\n      range: [0, 59],\n      value: minute\n    }, {\n      type: 'second',\n      range: [0, 59],\n      value: second\n    });\n  }\n  return data;\n}\nfunction DateElement(_ref) {\n  let {\n    type,\n    range,\n    value,\n    select,\n    rootId,\n    name,\n    disabled,\n    readonly,\n    autofocus,\n    registry,\n    onBlur,\n    onFocus\n  } = _ref;\n  const id = rootId + '_' + type;\n  const {\n    SelectWidget\n  } = registry.widgets;\n  return _jsx(SelectWidget, {\n    schema: {\n      type: 'integer'\n    },\n    id: id,\n    name: name,\n    className: 'form-control',\n    options: {\n      enumOptions: rangeOptions(range[0], range[1])\n    },\n    placeholder: type,\n    value: value,\n    disabled: disabled,\n    readonly: readonly,\n    autofocus: autofocus,\n    onChange: value => select(type, value),\n    onBlur: onBlur,\n    onFocus: onFocus,\n    registry: registry,\n    label: '',\n    \"aria-describedby\": ariaDescribedByIds(rootId)\n  });\n}\n/** The `AltDateWidget` is an alternative widget for rendering date properties.\n * @param props - The `WidgetProps` for this component\n */\nfunction AltDateWidget(_ref2) {\n  let {\n    time = false,\n    disabled = false,\n    readonly = false,\n    autofocus = false,\n    options,\n    id,\n    name,\n    registry,\n    onBlur,\n    onFocus,\n    onChange,\n    value\n  } = _ref2;\n  const {\n    translateString\n  } = registry;\n  const [lastValue, setLastValue] = useState(value);\n  const [state, setState] = useReducer((state, action) => {\n    return {\n      ...state,\n      ...action\n    };\n  }, parseDateString(value, time));\n  useEffect(() => {\n    const stateValue = toDateString(state, time);\n    if (readyForChange(state) && stateValue !== value) {\n      // The user changed the date to a new valid data via the comboboxes, so call onChange\n      onChange(stateValue);\n    } else if (lastValue !== value) {\n      // We got a new value in the props\n      setLastValue(value);\n      setState(parseDateString(value, time));\n    }\n  }, [time, value, onChange, state, lastValue]);\n  const handleChange = useCallback((property, value) => {\n    setState({\n      [property]: value\n    });\n  }, []);\n  const handleSetNow = useCallback(event => {\n    event.preventDefault();\n    if (disabled || readonly) {\n      return;\n    }\n    const nextState = parseDateString(new Date().toJSON(), time);\n    onChange(toDateString(nextState, time));\n  }, [disabled, readonly, time]);\n  const handleClear = useCallback(event => {\n    event.preventDefault();\n    if (disabled || readonly) {\n      return;\n    }\n    onChange(undefined);\n  }, [disabled, readonly, onChange]);\n  return _jsxs(\"ul\", {\n    className: 'list-inline',\n    children: [dateElementProps(state, time, options.yearsRange).map((elemProps, i) => _jsx(\"li\", {\n      className: 'list-inline-item',\n      children: _jsx(DateElement, {\n        rootId: id,\n        name: name,\n        select: handleChange,\n        ...elemProps,\n        disabled: disabled,\n        readonly: readonly,\n        registry: registry,\n        onBlur: onBlur,\n        onFocus: onFocus,\n        autofocus: autofocus && i === 0\n      })\n    }, i)), (options.hideNowButton !== 'undefined' ? !options.hideNowButton : true) && _jsx(\"li\", {\n      className: 'list-inline-item',\n      children: _jsx(\"a\", {\n        href: '#',\n        className: 'btn btn-info btn-now',\n        onClick: handleSetNow,\n        children: translateString(TranslatableString.NowLabel)\n      })\n    }), (options.hideClearButton !== 'undefined' ? !options.hideClearButton : true) && _jsx(\"li\", {\n      className: 'list-inline-item',\n      children: _jsx(\"a\", {\n        href: '#',\n        className: 'btn btn-warning btn-clear',\n        onClick: handleClear,\n        children: translateString(TranslatableString.ClearLabel)\n      })\n    })]\n  });\n}\nexport default AltDateWidget;","map":{"version":3,"names":["useCallback","useEffect","useReducer","useState","ariaDescribedByIds","parseDateString","toDateString","pad","TranslatableString","rangeOptions","start","stop","options","i","push","value","label","readyForChange","state","Object","values","every","dateElementProps","time","yearsRange","arguments","length","undefined","Date","getFullYear","year","month","day","hour","minute","second","data","type","range","DateElement","_ref","select","rootId","name","disabled","readonly","autofocus","registry","onBlur","onFocus","id","SelectWidget","widgets","_jsx","schema","className","enumOptions","placeholder","onChange","AltDateWidget","_ref2","translateString","lastValue","setLastValue","setState","action","stateValue","handleChange","property","handleSetNow","event","preventDefault","nextState","toJSON","handleClear","_jsxs","children","map","elemProps","hideNowButton","href","onClick","NowLabel","hideClearButton","ClearLabel"],"sources":["D:\\Reactjs\\my-app\\node_modules\\@rjsf\\core\\src\\components\\widgets\\AltDateWidget.tsx"],"sourcesContent":["import { MouseEvent, useCallback, useEffect, useReducer, useState } from 'react';\nimport {\n  ariaDescribedByIds,\n  parseDateString,\n  toDateString,\n  pad,\n  DateObject,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n  WidgetProps,\n} from '@rjsf/utils';\n\nfunction rangeOptions(start: number, stop: number) {\n  const options = [];\n  for (let i = start; i <= stop; i++) {\n    options.push({ value: i, label: pad(i, 2) });\n  }\n  return options;\n}\n\nfunction readyForChange(state: DateObject) {\n  return Object.values(state).every((value) => value !== -1);\n}\n\nfunction dateElementProps(\n  state: DateObject,\n  time: boolean,\n  yearsRange: [number, number] = [1900, new Date().getFullYear() + 2]\n) {\n  const { year, month, day, hour, minute, second } = state;\n  const data = [\n    {\n      type: 'year',\n      range: yearsRange,\n      value: year,\n    },\n    { type: 'month', range: [1, 12], value: month },\n    { type: 'day', range: [1, 31], value: day },\n  ] as { type: string; range: [number, number]; value: number | undefined }[];\n  if (time) {\n    data.push(\n      { type: 'hour', range: [0, 23], value: hour },\n      { type: 'minute', range: [0, 59], value: minute },\n      { type: 'second', range: [0, 59], value: second }\n    );\n  }\n  return data;\n}\n\ntype DateElementProps<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> = Pick<\n  WidgetProps<T, S, F>,\n  'value' | 'name' | 'disabled' | 'readonly' | 'autofocus' | 'registry' | 'onBlur' | 'onFocus'\n> & {\n  rootId: string;\n  select: (property: keyof DateObject, value: any) => void;\n  type: string;\n  range: [number, number];\n};\n\nfunction DateElement<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  type,\n  range,\n  value,\n  select,\n  rootId,\n  name,\n  disabled,\n  readonly,\n  autofocus,\n  registry,\n  onBlur,\n  onFocus,\n}: DateElementProps<T, S, F>) {\n  const id = rootId + '_' + type;\n  const { SelectWidget } = registry.widgets;\n  return (\n    <SelectWidget\n      schema={{ type: 'integer' } as S}\n      id={id}\n      name={name}\n      className='form-control'\n      options={{ enumOptions: rangeOptions(range[0], range[1]) }}\n      placeholder={type}\n      value={value}\n      disabled={disabled}\n      readonly={readonly}\n      autofocus={autofocus}\n      onChange={(value: any) => select(type as keyof DateObject, value)}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      registry={registry}\n      label=''\n      aria-describedby={ariaDescribedByIds<T>(rootId)}\n    />\n  );\n}\n\n/** The `AltDateWidget` is an alternative widget for rendering date properties.\n * @param props - The `WidgetProps` for this component\n */\nfunction AltDateWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  time = false,\n  disabled = false,\n  readonly = false,\n  autofocus = false,\n  options,\n  id,\n  name,\n  registry,\n  onBlur,\n  onFocus,\n  onChange,\n  value,\n}: WidgetProps<T, S, F>) {\n  const { translateString } = registry;\n  const [lastValue, setLastValue] = useState(value);\n  const [state, setState] = useReducer((state: DateObject, action: Partial<DateObject>) => {\n    return { ...state, ...action };\n  }, parseDateString(value, time));\n\n  useEffect(() => {\n    const stateValue = toDateString(state, time);\n    if (readyForChange(state) && stateValue !== value) {\n      // The user changed the date to a new valid data via the comboboxes, so call onChange\n      onChange(stateValue);\n    } else if (lastValue !== value) {\n      // We got a new value in the props\n      setLastValue(value);\n      setState(parseDateString(value, time));\n    }\n  }, [time, value, onChange, state, lastValue]);\n\n  const handleChange = useCallback((property: keyof DateObject, value: string) => {\n    setState({ [property]: value });\n  }, []);\n\n  const handleSetNow = useCallback(\n    (event: MouseEvent<HTMLAnchorElement>) => {\n      event.preventDefault();\n      if (disabled || readonly) {\n        return;\n      }\n      const nextState = parseDateString(new Date().toJSON(), time);\n      onChange(toDateString(nextState, time));\n    },\n    [disabled, readonly, time]\n  );\n\n  const handleClear = useCallback(\n    (event: MouseEvent<HTMLAnchorElement>) => {\n      event.preventDefault();\n      if (disabled || readonly) {\n        return;\n      }\n      onChange(undefined);\n    },\n    [disabled, readonly, onChange]\n  );\n\n  return (\n    <ul className='list-inline'>\n      {dateElementProps(state, time, options.yearsRange as [number, number] | undefined).map((elemProps, i) => (\n        <li className='list-inline-item' key={i}>\n          <DateElement\n            rootId={id}\n            name={name}\n            select={handleChange}\n            {...elemProps}\n            disabled={disabled}\n            readonly={readonly}\n            registry={registry}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            autofocus={autofocus && i === 0}\n          />\n        </li>\n      ))}\n      {(options.hideNowButton !== 'undefined' ? !options.hideNowButton : true) && (\n        <li className='list-inline-item'>\n          <a href='#' className='btn btn-info btn-now' onClick={handleSetNow}>\n            {translateString(TranslatableString.NowLabel)}\n          </a>\n        </li>\n      )}\n      {(options.hideClearButton !== 'undefined' ? !options.hideClearButton : true) && (\n        <li className='list-inline-item'>\n          <a href='#' className='btn btn-warning btn-clear' onClick={handleClear}>\n            {translateString(TranslatableString.ClearLabel)}\n          </a>\n        </li>\n      )}\n    </ul>\n  );\n}\n\nexport default AltDateWidget;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}