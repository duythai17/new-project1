{"ast":null,"code":"import { REF_KEY, ROOT_SCHEMA_PREFIX } from './constants';\nimport isObject from 'lodash/isObject';\n/** Takes a `node` object and transforms any contained `$ref` node variables with a prefix, recursively calling\n * `withIdRefPrefix` for any other elements.\n *\n * @param node - The object node to which a ROOT_SCHEMA_PREFIX is added when a REF_KEY is part of it\n */\nfunction withIdRefPrefixObject(node) {\n  for (const key in node) {\n    const realObj = node;\n    const value = realObj[key];\n    if (key === REF_KEY && typeof value === 'string' && value.startsWith('#')) {\n      realObj[key] = ROOT_SCHEMA_PREFIX + value;\n    } else {\n      realObj[key] = withIdRefPrefix(value);\n    }\n  }\n  return node;\n}\n/** Takes a `node` object list and transforms any contained `$ref` node variables with a prefix, recursively calling\n * `withIdRefPrefix` for any other elements.\n *\n * @param node - The list of object nodes to which a ROOT_SCHEMA_PREFIX is added when a REF_KEY is part of it\n */\nfunction withIdRefPrefixArray(node) {\n  for (let i = 0; i < node.length; i++) {\n    node[i] = withIdRefPrefix(node[i]);\n  }\n  return node;\n}\n/** Recursively prefixes all `$ref`s in a schema with the value of the `ROOT_SCHEMA_PREFIX` constant.\n * This is used in isValid to make references to the rootSchema\n *\n * @param schemaNode - The object node to which a ROOT_SCHEMA_PREFIX is added when a REF_KEY is part of it\n * @returns - A copy of the `schemaNode` with updated `$ref`s\n */\nexport default function withIdRefPrefix(schemaNode) {\n  if (Array.isArray(schemaNode)) {\n    return withIdRefPrefixArray([...schemaNode]);\n  }\n  if (isObject(schemaNode)) {\n    return withIdRefPrefixObject({\n      ...schemaNode\n    });\n  }\n  return schemaNode;\n}","map":{"version":3,"names":["REF_KEY","ROOT_SCHEMA_PREFIX","isObject","withIdRefPrefixObject","node","key","realObj","value","startsWith","withIdRefPrefix","withIdRefPrefixArray","i","length","schemaNode","Array","isArray"],"sources":["D:\\Reactjs\\my-app\\node_modules\\@rjsf\\utils\\src\\withIdRefPrefix.ts"],"sourcesContent":["import { REF_KEY, ROOT_SCHEMA_PREFIX } from './constants';\nimport { RJSFSchema, StrictRJSFSchema } from './types';\nimport isObject from 'lodash/isObject';\n\n/** Takes a `node` object and transforms any contained `$ref` node variables with a prefix, recursively calling\n * `withIdRefPrefix` for any other elements.\n *\n * @param node - The object node to which a ROOT_SCHEMA_PREFIX is added when a REF_KEY is part of it\n */\nfunction withIdRefPrefixObject<S extends StrictRJSFSchema = RJSFSchema>(node: S): S {\n  for (const key in node) {\n    const realObj: { [k: string]: any } = node;\n    const value = realObj[key];\n    if (key === REF_KEY && typeof value === 'string' && value.startsWith('#')) {\n      realObj[key] = ROOT_SCHEMA_PREFIX + value;\n    } else {\n      realObj[key] = withIdRefPrefix<S>(value);\n    }\n  }\n  return node;\n}\n\n/** Takes a `node` object list and transforms any contained `$ref` node variables with a prefix, recursively calling\n * `withIdRefPrefix` for any other elements.\n *\n * @param node - The list of object nodes to which a ROOT_SCHEMA_PREFIX is added when a REF_KEY is part of it\n */\nfunction withIdRefPrefixArray<S extends StrictRJSFSchema = RJSFSchema>(node: S[]): S[] {\n  for (let i = 0; i < node.length; i++) {\n    node[i] = withIdRefPrefix<S>(node[i]) as S;\n  }\n  return node;\n}\n\n/** Recursively prefixes all `$ref`s in a schema with the value of the `ROOT_SCHEMA_PREFIX` constant.\n * This is used in isValid to make references to the rootSchema\n *\n * @param schemaNode - The object node to which a ROOT_SCHEMA_PREFIX is added when a REF_KEY is part of it\n * @returns - A copy of the `schemaNode` with updated `$ref`s\n */\nexport default function withIdRefPrefix<S extends StrictRJSFSchema = RJSFSchema>(\n  schemaNode: S | S[] | S[keyof S]\n): S | S[] | S[keyof S] {\n  if (Array.isArray(schemaNode)) {\n    return withIdRefPrefixArray<S>([...schemaNode]);\n  }\n  if (isObject(schemaNode)) {\n    return withIdRefPrefixObject<S>({ ...schemaNode });\n  }\n  return schemaNode;\n}\n"],"mappings":"AAAA,SAASA,OAAO,EAAEC,kBAAkB,QAAQ,aAAa;AAEzD,OAAOC,QAAQ,MAAM,iBAAiB;AAEtC;;;;;AAKA,SAASC,qBAAqBA,CAA0CC,IAAO;EAC7E,KAAK,MAAMC,GAAG,IAAID,IAAI,EAAE;IACtB,MAAME,OAAO,GAAyBF,IAAI;IAC1C,MAAMG,KAAK,GAAGD,OAAO,CAACD,GAAG,CAAC;IAC1B,IAAIA,GAAG,KAAKL,OAAO,IAAI,OAAOO,KAAK,KAAK,QAAQ,IAAIA,KAAK,CAACC,UAAU,CAAC,GAAG,CAAC,EAAE;MACzEF,OAAO,CAACD,GAAG,CAAC,GAAGJ,kBAAkB,GAAGM,KAAK;KAC1C,MAAM;MACLD,OAAO,CAACD,GAAG,CAAC,GAAGI,eAAe,CAAIF,KAAK,CAAC;;;EAG5C,OAAOH,IAAI;AACb;AAEA;;;;;AAKA,SAASM,oBAAoBA,CAA0CN,IAAS;EAC9E,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,IAAI,CAACQ,MAAM,EAAED,CAAC,EAAE,EAAE;IACpCP,IAAI,CAACO,CAAC,CAAC,GAAGF,eAAe,CAAIL,IAAI,CAACO,CAAC,CAAC,CAAM;;EAE5C,OAAOP,IAAI;AACb;AAEA;;;;;;AAMA,eAAc,SAAUK,eAAeA,CACrCI,UAAgC;EAEhC,IAAIC,KAAK,CAACC,OAAO,CAACF,UAAU,CAAC,EAAE;IAC7B,OAAOH,oBAAoB,CAAI,CAAC,GAAGG,UAAU,CAAC,CAAC;;EAEjD,IAAIX,QAAQ,CAACW,UAAU,CAAC,EAAE;IACxB,OAAOV,qBAAqB,CAAI;MAAE,GAAGU;IAAU,CAAE,CAAC;;EAEpD,OAAOA,UAAU;AACnB"},"metadata":{},"sourceType":"module","externalDependencies":[]}