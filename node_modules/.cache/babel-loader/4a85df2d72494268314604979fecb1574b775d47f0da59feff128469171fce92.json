{"ast":null,"code":"import isString from 'lodash/isString';\nimport { ID_KEY } from './constants';\n/** Generates a consistent `id` pattern for a given `id` and a `suffix`\n *\n * @param id - Either simple string id or an IdSchema from which to extract it\n * @param suffix - The suffix to append to the id\n */\nfunction idGenerator(id, suffix) {\n  const theId = isString(id) ? id : id[ID_KEY];\n  return \"\".concat(theId, \"__\").concat(suffix);\n}\n/** Return a consistent `id` for the field description element\n *\n * @param id - Either simple string id or an IdSchema from which to extract it\n * @returns - The consistent id for the field description element from the given `id`\n */\nexport function descriptionId(id) {\n  return idGenerator(id, 'description');\n}\n/** Return a consistent `id` for the field error element\n *\n * @param id - Either simple string id or an IdSchema from which to extract it\n * @returns - The consistent id for the field error element from the given `id`\n */\nexport function errorId(id) {\n  return idGenerator(id, 'error');\n}\n/** Return a consistent `id` for the field examples element\n *\n * @param id - Either simple string id or an IdSchema from which to extract it\n * @returns - The consistent id for the field examples element from the given `id`\n */\nexport function examplesId(id) {\n  return idGenerator(id, 'examples');\n}\n/** Return a consistent `id` for the field help element\n *\n * @param id - Either simple string id or an IdSchema from which to extract it\n * @returns - The consistent id for the field help element from the given `id`\n */\nexport function helpId(id) {\n  return idGenerator(id, 'help');\n}\n/** Return a consistent `id` for the field title element\n *\n * @param id - Either simple string id or an IdSchema from which to extract it\n * @returns - The consistent id for the field title element from the given `id`\n */\nexport function titleId(id) {\n  return idGenerator(id, 'title');\n}\n/** Return a list of element ids that contain additional information about the field that can be used to as the aria\n * description of the field. This is correctly omitting `titleId` which would be \"labeling\" rather than \"describing\" the\n * element.\n *\n * @param id - Either simple string id or an IdSchema from which to extract it\n * @param [includeExamples=false] - Optional flag, if true, will add the `examplesId` into the list\n * @returns - The string containing the list of ids for use in an `aria-describedBy` attribute\n */\nexport function ariaDescribedByIds(id) {\n  let includeExamples = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  const examples = includeExamples ? \" \".concat(examplesId(id)) : '';\n  return \"\".concat(errorId(id), \" \").concat(descriptionId(id), \" \").concat(helpId(id)).concat(examples);\n}\n/** Return a consistent `id` for the `optionIndex`s of a `Radio` or `Checkboxes` widget\n *\n * @param id - The id of the parent component for the option\n * @param optionIndex - The index of the option for which the id is desired\n * @returns - An id for the option index based on the parent `id`\n */\nexport function optionId(id, optionIndex) {\n  return \"\".concat(id, \"-\").concat(optionIndex);\n}","map":{"version":3,"names":["isString","ID_KEY","idGenerator","id","suffix","theId","concat","descriptionId","errorId","examplesId","helpId","titleId","ariaDescribedByIds","includeExamples","arguments","length","undefined","examples","optionId","optionIndex"],"sources":["D:\\Reactjs\\my-app\\node_modules\\@rjsf\\utils\\src\\idGenerators.ts"],"sourcesContent":["import isString from 'lodash/isString';\n\nimport { IdSchema } from './types';\nimport { ID_KEY } from './constants';\n\n/** Generates a consistent `id` pattern for a given `id` and a `suffix`\n *\n * @param id - Either simple string id or an IdSchema from which to extract it\n * @param suffix - The suffix to append to the id\n */\nfunction idGenerator<T = any>(id: IdSchema<T> | string, suffix: string) {\n  const theId = isString(id) ? id : id[ID_KEY];\n  return `${theId}__${suffix}`;\n}\n/** Return a consistent `id` for the field description element\n *\n * @param id - Either simple string id or an IdSchema from which to extract it\n * @returns - The consistent id for the field description element from the given `id`\n */\nexport function descriptionId<T = any>(id: IdSchema<T> | string) {\n  return idGenerator<T>(id, 'description');\n}\n\n/** Return a consistent `id` for the field error element\n *\n * @param id - Either simple string id or an IdSchema from which to extract it\n * @returns - The consistent id for the field error element from the given `id`\n */\nexport function errorId<T = any>(id: IdSchema<T> | string) {\n  return idGenerator<T>(id, 'error');\n}\n\n/** Return a consistent `id` for the field examples element\n *\n * @param id - Either simple string id or an IdSchema from which to extract it\n * @returns - The consistent id for the field examples element from the given `id`\n */\nexport function examplesId<T = any>(id: IdSchema<T> | string) {\n  return idGenerator<T>(id, 'examples');\n}\n\n/** Return a consistent `id` for the field help element\n *\n * @param id - Either simple string id or an IdSchema from which to extract it\n * @returns - The consistent id for the field help element from the given `id`\n */\nexport function helpId<T = any>(id: IdSchema<T> | string) {\n  return idGenerator<T>(id, 'help');\n}\n\n/** Return a consistent `id` for the field title element\n *\n * @param id - Either simple string id or an IdSchema from which to extract it\n * @returns - The consistent id for the field title element from the given `id`\n */\nexport function titleId<T = any>(id: IdSchema<T> | string) {\n  return idGenerator<T>(id, 'title');\n}\n\n/** Return a list of element ids that contain additional information about the field that can be used to as the aria\n * description of the field. This is correctly omitting `titleId` which would be \"labeling\" rather than \"describing\" the\n * element.\n *\n * @param id - Either simple string id or an IdSchema from which to extract it\n * @param [includeExamples=false] - Optional flag, if true, will add the `examplesId` into the list\n * @returns - The string containing the list of ids for use in an `aria-describedBy` attribute\n */\nexport function ariaDescribedByIds<T = any>(id: IdSchema<T> | string, includeExamples = false) {\n  const examples = includeExamples ? ` ${examplesId<T>(id)}` : '';\n  return `${errorId<T>(id)} ${descriptionId<T>(id)} ${helpId<T>(id)}${examples}`;\n}\n\n/** Return a consistent `id` for the `optionIndex`s of a `Radio` or `Checkboxes` widget\n *\n * @param id - The id of the parent component for the option\n * @param optionIndex - The index of the option for which the id is desired\n * @returns - An id for the option index based on the parent `id`\n */\nexport function optionId(id: string, optionIndex: number) {\n  return `${id}-${optionIndex}`;\n}\n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,iBAAiB;AAGtC,SAASC,MAAM,QAAQ,aAAa;AAEpC;;;;;AAKA,SAASC,WAAWA,CAAUC,EAAwB,EAAEC,MAAc;EACpE,MAAMC,KAAK,GAAGL,QAAQ,CAACG,EAAE,CAAC,GAAGA,EAAE,GAAGA,EAAE,CAACF,MAAM,CAAC;EAC5C,UAAAK,MAAA,CAAUD,KAAK,QAAAC,MAAA,CAAKF,MAAM;AAC5B;AACA;;;;;AAKA,OAAM,SAAUG,aAAaA,CAAUJ,EAAwB;EAC7D,OAAOD,WAAW,CAAIC,EAAE,EAAE,aAAa,CAAC;AAC1C;AAEA;;;;;AAKA,OAAM,SAAUK,OAAOA,CAAUL,EAAwB;EACvD,OAAOD,WAAW,CAAIC,EAAE,EAAE,OAAO,CAAC;AACpC;AAEA;;;;;AAKA,OAAM,SAAUM,UAAUA,CAAUN,EAAwB;EAC1D,OAAOD,WAAW,CAAIC,EAAE,EAAE,UAAU,CAAC;AACvC;AAEA;;;;;AAKA,OAAM,SAAUO,MAAMA,CAAUP,EAAwB;EACtD,OAAOD,WAAW,CAAIC,EAAE,EAAE,MAAM,CAAC;AACnC;AAEA;;;;;AAKA,OAAM,SAAUQ,OAAOA,CAAUR,EAAwB;EACvD,OAAOD,WAAW,CAAIC,EAAE,EAAE,OAAO,CAAC;AACpC;AAEA;;;;;;;;AAQA,OAAM,SAAUS,kBAAkBA,CAAUT,EAAwB,EAAyB;EAAA,IAAvBU,eAAe,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;EAC3F,MAAMG,QAAQ,GAAGJ,eAAe,OAAAP,MAAA,CAAOG,UAAU,CAAIN,EAAE,CAAC,IAAK,EAAE;EAC/D,UAAAG,MAAA,CAAUE,OAAO,CAAIL,EAAE,CAAC,OAAAG,MAAA,CAAIC,aAAa,CAAIJ,EAAE,CAAC,OAAAG,MAAA,CAAII,MAAM,CAAIP,EAAE,CAAC,EAAAG,MAAA,CAAGW,QAAQ;AAC9E;AAEA;;;;;;AAMA,OAAM,SAAUC,QAAQA,CAACf,EAAU,EAAEgB,WAAmB;EACtD,UAAAb,MAAA,CAAUH,EAAE,OAAAG,MAAA,CAAIa,WAAW;AAC7B"},"metadata":{},"sourceType":"module","externalDependencies":[]}