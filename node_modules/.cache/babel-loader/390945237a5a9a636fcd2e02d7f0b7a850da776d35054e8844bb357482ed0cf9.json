{"ast":null,"code":"import enumOptionsIsSelected from './enumOptionsIsSelected';\n/** Returns the index(es) of the options in `allEnumOptions` whose value(s) match the ones in `value`. All the\n * `enumOptions` are filtered based on whether they are a \"selected\" `value` and the index of each selected one is then\n * stored in an array. If `multiple` is true, that array is returned, otherwise the first element in the array is\n * returned.\n *\n * @param value - The single value or list of values for which indexes are desired\n * @param [allEnumOptions=[]] - The list of all the known enumOptions\n * @param [multiple=false] - Optional flag, if true will return a list of index, otherwise a single one\n * @returns - A single string index for the first `value` in `allEnumOptions`, if not `multiple`. Otherwise, the list\n *        of indexes for (each of) the value(s) in `value`.\n */\nexport default function enumOptionsIndexForValue(value, allEnumOptions = [], multiple = false) {\n  const selectedIndexes = allEnumOptions.map((opt, index) => enumOptionsIsSelected(opt.value, value) ? String(index) : undefined).filter(opt => typeof opt !== 'undefined');\n  if (!multiple) {\n    return selectedIndexes[0];\n  }\n  return selectedIndexes;\n}","map":{"version":3,"names":["enumOptionsIsSelected","enumOptionsIndexForValue","value","allEnumOptions","multiple","selectedIndexes","map","opt","index","String","undefined","filter"],"sources":["D:\\Reactjs\\my-app\\node_modules\\@rjsf\\utils\\src\\enumOptionsIndexForValue.ts"],"sourcesContent":["import { EnumOptionsType, RJSFSchema, StrictRJSFSchema } from './types';\nimport enumOptionsIsSelected from './enumOptionsIsSelected';\n\n/** Returns the index(es) of the options in `allEnumOptions` whose value(s) match the ones in `value`. All the\n * `enumOptions` are filtered based on whether they are a \"selected\" `value` and the index of each selected one is then\n * stored in an array. If `multiple` is true, that array is returned, otherwise the first element in the array is\n * returned.\n *\n * @param value - The single value or list of values for which indexes are desired\n * @param [allEnumOptions=[]] - The list of all the known enumOptions\n * @param [multiple=false] - Optional flag, if true will return a list of index, otherwise a single one\n * @returns - A single string index for the first `value` in `allEnumOptions`, if not `multiple`. Otherwise, the list\n *        of indexes for (each of) the value(s) in `value`.\n */\nexport default function enumOptionsIndexForValue<S extends StrictRJSFSchema = RJSFSchema>(\n  value: EnumOptionsType<S>['value'] | EnumOptionsType<S>['value'][],\n  allEnumOptions: EnumOptionsType<S>[] = [],\n  multiple = false\n): string | string[] | undefined {\n  const selectedIndexes: string[] = allEnumOptions\n    .map((opt, index) => (enumOptionsIsSelected(opt.value, value) ? String(index) : undefined))\n    .filter((opt) => typeof opt !== 'undefined') as string[];\n  if (!multiple) {\n    return selectedIndexes[0];\n  }\n  return selectedIndexes;\n}\n"],"mappings":"AACA,OAAOA,qBAAqB,MAAM,yBAAyB;AAE3D;;;;;;;;;;;AAWA,eAAc,SAAUC,wBAAwBA,CAC9CC,KAAkE,EAClEC,cAAA,GAAuC,EAAE,EACzCC,QAAQ,GAAG,KAAK;EAEhB,MAAMC,eAAe,GAAaF,cAAc,CAC7CG,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,KAAMR,qBAAqB,CAACO,GAAG,CAACL,KAAK,EAAEA,KAAK,CAAC,GAAGO,MAAM,CAACD,KAAK,CAAC,GAAGE,SAAU,CAAC,CAC1FC,MAAM,CAAEJ,GAAG,IAAK,OAAOA,GAAG,KAAK,WAAW,CAAa;EAC1D,IAAI,CAACH,QAAQ,EAAE;IACb,OAAOC,eAAe,CAAC,CAAC,CAAC;;EAE3B,OAAOA,eAAe;AACxB"},"metadata":{},"sourceType":"module","externalDependencies":[]}