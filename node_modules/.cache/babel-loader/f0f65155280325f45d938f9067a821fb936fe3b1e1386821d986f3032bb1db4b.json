{"ast":null,"code":"/** Returns the template with the given `name` from either the `uiSchema` if it is defined or from the `registry`\n * otherwise. NOTE, since `ButtonTemplates` are not overridden in `uiSchema` only those in the `registry` are returned.\n *\n * @param name - The name of the template to fetch, restricted to the keys of `TemplatesType`\n * @param registry - The `Registry` from which to read the template\n * @param [uiOptions={}] - The `UIOptionsType` from which to read an alternate template\n * @returns - The template from either the `uiSchema` or `registry` for the `name`\n */\nexport default function getTemplate(name, registry) {\n  let uiOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    templates\n  } = registry;\n  if (name === 'ButtonTemplates') {\n    return templates[name];\n  }\n  return (\n    // Evaluating uiOptions[name] results in TS2590: Expression produces a union type that is too complex to represent\n    // To avoid that, we cast uiOptions to `any` before accessing the name field\n    uiOptions[name] || templates[name]\n  );\n}","map":{"version":3,"names":["getTemplate","name","registry","uiOptions","arguments","length","undefined","templates"],"sources":["D:\\Reactjs\\my-app\\node_modules\\@rjsf\\utils\\src\\getTemplate.ts"],"sourcesContent":["import { FormContextType, TemplatesType, Registry, UIOptionsType, StrictRJSFSchema, RJSFSchema } from './types';\n\n/** Returns the template with the given `name` from either the `uiSchema` if it is defined or from the `registry`\n * otherwise. NOTE, since `ButtonTemplates` are not overridden in `uiSchema` only those in the `registry` are returned.\n *\n * @param name - The name of the template to fetch, restricted to the keys of `TemplatesType`\n * @param registry - The `Registry` from which to read the template\n * @param [uiOptions={}] - The `UIOptionsType` from which to read an alternate template\n * @returns - The template from either the `uiSchema` or `registry` for the `name`\n */\nexport default function getTemplate<\n  Name extends keyof TemplatesType<T, S, F>,\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(name: Name, registry: Registry<T, S, F>, uiOptions: UIOptionsType<T, S, F> = {}): TemplatesType<T, S, F>[Name] {\n  const { templates } = registry;\n  if (name === 'ButtonTemplates') {\n    return templates[name];\n  }\n  return (\n    // Evaluating uiOptions[name] results in TS2590: Expression produces a union type that is too complex to represent\n    // To avoid that, we cast uiOptions to `any` before accessing the name field\n    ((uiOptions as any)[name] as TemplatesType<T, S, F>[Name]) || templates[name]\n  );\n}\n"],"mappings":"AAEA;;;;;;;;AAQA,eAAc,SAAUA,WAAWA,CAKjCC,IAAU,EAAEC,QAA2B,EAAwC;EAAA,IAAtCC,SAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAoC,EAAE;EAC/E,MAAM;IAAEG;EAAS,CAAE,GAAGL,QAAQ;EAC9B,IAAID,IAAI,KAAK,iBAAiB,EAAE;IAC9B,OAAOM,SAAS,CAACN,IAAI,CAAC;;EAExB;IACE;IACA;IACEE,SAAiB,CAACF,IAAI,CAAkC,IAAIM,SAAS,CAACN,IAAI;EAAC;AAEjF"},"metadata":{},"sourceType":"module","externalDependencies":[]}