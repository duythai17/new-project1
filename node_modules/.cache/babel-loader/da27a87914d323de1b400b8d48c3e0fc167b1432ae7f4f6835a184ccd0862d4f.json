{"ast":null,"code":"import isPlainObject from 'lodash/isPlainObject';\nimport { ERRORS_KEY } from './constants';\n/** Converts an `errorSchema` into a list of `RJSFValidationErrors`\n *\n * @param errorSchema - The `ErrorSchema` instance to convert\n * @param [fieldPath=[]] - The current field path, defaults to [] if not specified\n * @returns - The list of `RJSFValidationErrors` extracted from the `errorSchema`\n */\nexport default function toErrorList(errorSchema) {\n  let fieldPath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  if (!errorSchema) {\n    return [];\n  }\n  let errorList = [];\n  if (ERRORS_KEY in errorSchema) {\n    errorList = errorList.concat(errorSchema[ERRORS_KEY].map(message => {\n      const property = \".\".concat(fieldPath.join('.'));\n      return {\n        property,\n        message,\n        stack: \"\".concat(property, \" \").concat(message)\n      };\n    }));\n  }\n  return Object.keys(errorSchema).reduce((acc, key) => {\n    if (key !== ERRORS_KEY) {\n      const childSchema = errorSchema[key];\n      if (isPlainObject(childSchema)) {\n        acc = acc.concat(toErrorList(childSchema, [...fieldPath, key]));\n      }\n    }\n    return acc;\n  }, errorList);\n}","map":{"version":3,"names":["isPlainObject","ERRORS_KEY","toErrorList","errorSchema","fieldPath","arguments","length","undefined","errorList","concat","map","message","property","join","stack","Object","keys","reduce","acc","key","childSchema"],"sources":["D:\\Reactjs\\my-app\\node_modules\\@rjsf\\utils\\src\\toErrorList.ts"],"sourcesContent":["import isPlainObject from 'lodash/isPlainObject';\n\nimport { ERRORS_KEY } from './constants';\nimport { ErrorSchema, GenericObjectType, RJSFValidationError } from './types';\n\n/** Converts an `errorSchema` into a list of `RJSFValidationErrors`\n *\n * @param errorSchema - The `ErrorSchema` instance to convert\n * @param [fieldPath=[]] - The current field path, defaults to [] if not specified\n * @returns - The list of `RJSFValidationErrors` extracted from the `errorSchema`\n */\nexport default function toErrorList<T = any>(\n  errorSchema?: ErrorSchema<T>,\n  fieldPath: string[] = []\n): RJSFValidationError[] {\n  if (!errorSchema) {\n    return [];\n  }\n  let errorList: RJSFValidationError[] = [];\n  if (ERRORS_KEY in errorSchema) {\n    errorList = errorList.concat(\n      errorSchema[ERRORS_KEY]!.map((message: string) => {\n        const property = `.${fieldPath.join('.')}`;\n        return {\n          property,\n          message,\n          stack: `${property} ${message}`,\n        };\n      })\n    );\n  }\n  return Object.keys(errorSchema).reduce((acc, key) => {\n    if (key !== ERRORS_KEY) {\n      const childSchema = (errorSchema as GenericObjectType)[key];\n      if (isPlainObject(childSchema)) {\n        acc = acc.concat(toErrorList(childSchema, [...fieldPath, key]));\n      }\n    }\n    return acc;\n  }, errorList);\n}\n"],"mappings":"AAAA,OAAOA,aAAa,MAAM,sBAAsB;AAEhD,SAASC,UAAU,QAAQ,aAAa;AAGxC;;;;;;AAMA,eAAc,SAAUC,WAAWA,CACjCC,WAA4B,EACJ;EAAA,IAAxBC,SAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAsB,EAAE;EAExB,IAAI,CAACF,WAAW,EAAE;IAChB,OAAO,EAAE;;EAEX,IAAIK,SAAS,GAA0B,EAAE;EACzC,IAAIP,UAAU,IAAIE,WAAW,EAAE;IAC7BK,SAAS,GAAGA,SAAS,CAACC,MAAM,CAC1BN,WAAW,CAACF,UAAU,CAAE,CAACS,GAAG,CAAEC,OAAe,IAAI;MAC/C,MAAMC,QAAQ,OAAAH,MAAA,CAAOL,SAAS,CAACS,IAAI,CAAC,GAAG,CAAC,CAAE;MAC1C,OAAO;QACLD,QAAQ;QACRD,OAAO;QACPG,KAAK,KAAAL,MAAA,CAAKG,QAAQ,OAAAH,MAAA,CAAIE,OAAO;OAC9B;IACH,CAAC,CAAC,CACH;;EAEH,OAAOI,MAAM,CAACC,IAAI,CAACb,WAAW,CAAC,CAACc,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAI;IAClD,IAAIA,GAAG,KAAKlB,UAAU,EAAE;MACtB,MAAMmB,WAAW,GAAIjB,WAAiC,CAACgB,GAAG,CAAC;MAC3D,IAAInB,aAAa,CAACoB,WAAW,CAAC,EAAE;QAC9BF,GAAG,GAAGA,GAAG,CAACT,MAAM,CAACP,WAAW,CAACkB,WAAW,EAAE,CAAC,GAAGhB,SAAS,EAAEe,GAAG,CAAC,CAAC,CAAC;;;IAGnE,OAAOD,GAAG;EACZ,CAAC,EAAEV,SAAS,CAAC;AACf"},"metadata":{},"sourceType":"module","externalDependencies":[]}