{"ast":null,"code":"import guessType from './guessType';\n/** Gets the type of a given `schema`. If the type is not explicitly defined, then an attempt is made to infer it from\n * other elements of the schema as follows:\n * - schema.const: Returns the `guessType()` of that value\n * - schema.enum: Returns `string`\n * - schema.properties: Returns `object`\n * - schema.additionalProperties: Returns `object`\n * - type is an array with a length of 2 and one type is 'null': Returns the other type\n *\n * @param schema - The schema for which to get the type\n * @returns - The type of the schema\n */\nexport default function getSchemaType(schema) {\n  let {\n    type\n  } = schema;\n  if (!type && schema.const) {\n    return guessType(schema.const);\n  }\n  if (!type && schema.enum) {\n    return 'string';\n  }\n  if (!type && (schema.properties || schema.additionalProperties)) {\n    return 'object';\n  }\n  if (Array.isArray(type)) {\n    if (type.length === 2 && type.includes('null')) {\n      type = type.find(type => type !== 'null');\n    } else {\n      type = type[0];\n    }\n  }\n  return type;\n}","map":{"version":3,"names":["guessType","getSchemaType","schema","type","const","enum","properties","additionalProperties","Array","isArray","length","includes","find"],"sources":["D:\\Reactjs\\my-app\\node_modules\\@rjsf\\utils\\src\\getSchemaType.ts"],"sourcesContent":["import guessType from './guessType';\nimport { RJSFSchema, StrictRJSFSchema } from './types';\n\n/** Gets the type of a given `schema`. If the type is not explicitly defined, then an attempt is made to infer it from\n * other elements of the schema as follows:\n * - schema.const: Returns the `guessType()` of that value\n * - schema.enum: Returns `string`\n * - schema.properties: Returns `object`\n * - schema.additionalProperties: Returns `object`\n * - type is an array with a length of 2 and one type is 'null': Returns the other type\n *\n * @param schema - The schema for which to get the type\n * @returns - The type of the schema\n */\nexport default function getSchemaType<S extends StrictRJSFSchema = RJSFSchema>(\n  schema: S\n): string | string[] | undefined {\n  let { type } = schema;\n\n  if (!type && schema.const) {\n    return guessType(schema.const);\n  }\n\n  if (!type && schema.enum) {\n    return 'string';\n  }\n\n  if (!type && (schema.properties || schema.additionalProperties)) {\n    return 'object';\n  }\n\n  if (Array.isArray(type)) {\n    if (type.length === 2 && type.includes('null')) {\n      type = type.find((type) => type !== 'null');\n    } else {\n      type = type[0];\n    }\n  }\n\n  return type;\n}\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,aAAa;AAGnC;;;;;;;;;;;AAWA,eAAc,SAAUC,aAAaA,CACnCC,MAAS;EAET,IAAI;IAAEC;EAAI,CAAE,GAAGD,MAAM;EAErB,IAAI,CAACC,IAAI,IAAID,MAAM,CAACE,KAAK,EAAE;IACzB,OAAOJ,SAAS,CAACE,MAAM,CAACE,KAAK,CAAC;;EAGhC,IAAI,CAACD,IAAI,IAAID,MAAM,CAACG,IAAI,EAAE;IACxB,OAAO,QAAQ;;EAGjB,IAAI,CAACF,IAAI,KAAKD,MAAM,CAACI,UAAU,IAAIJ,MAAM,CAACK,oBAAoB,CAAC,EAAE;IAC/D,OAAO,QAAQ;;EAGjB,IAAIC,KAAK,CAACC,OAAO,CAACN,IAAI,CAAC,EAAE;IACvB,IAAIA,IAAI,CAACO,MAAM,KAAK,CAAC,IAAIP,IAAI,CAACQ,QAAQ,CAAC,MAAM,CAAC,EAAE;MAC9CR,IAAI,GAAGA,IAAI,CAACS,IAAI,CAAET,IAAI,IAAKA,IAAI,KAAK,MAAM,CAAC;KAC5C,MAAM;MACLA,IAAI,GAAGA,IAAI,CAAC,CAAC,CAAC;;;EAIlB,OAAOA,IAAI;AACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}