{"ast":null,"code":"/** Potentially substitutes all replaceable parameters with the associated value(s) from the `params` if available. When\n * a `params` array is provided, each value in the array is used to replace any of the replaceable parameters in the\n * `inputString` using the `%1`, `%2`, etc. replacement specifiers.\n *\n * @param inputString - The string which will be potentially updated with replacement parameters\n * @param params - The optional list of replaceable parameter values to substitute into the english string\n * @returns - The updated string with any replacement specifiers replaced\n */\nexport default function replaceStringParameters(inputString, params) {\n  let output = inputString;\n  if (Array.isArray(params)) {\n    const parts = output.split(/(%\\d)/);\n    params.forEach((param, index) => {\n      const partIndex = parts.findIndex(part => part === `%${index + 1}`);\n      if (partIndex >= 0) {\n        parts[partIndex] = param;\n      }\n    });\n    output = parts.join('');\n  }\n  return output;\n}","map":{"version":3,"names":["replaceStringParameters","inputString","params","output","Array","isArray","parts","split","forEach","param","index","partIndex","findIndex","part","join"],"sources":["D:\\Reactjs\\my-app\\node_modules\\@rjsf\\utils\\src\\replaceStringParameters.ts"],"sourcesContent":["/** Potentially substitutes all replaceable parameters with the associated value(s) from the `params` if available. When\n * a `params` array is provided, each value in the array is used to replace any of the replaceable parameters in the\n * `inputString` using the `%1`, `%2`, etc. replacement specifiers.\n *\n * @param inputString - The string which will be potentially updated with replacement parameters\n * @param params - The optional list of replaceable parameter values to substitute into the english string\n * @returns - The updated string with any replacement specifiers replaced\n */\nexport default function replaceStringParameters(inputString: string, params?: string[]) {\n  let output = inputString;\n  if (Array.isArray(params)) {\n    const parts = output.split(/(%\\d)/);\n    params.forEach((param, index) => {\n      const partIndex = parts.findIndex((part) => part === `%${index + 1}`);\n      if (partIndex >= 0) {\n        parts[partIndex] = param;\n      }\n    });\n    output = parts.join('');\n  }\n  return output;\n}\n"],"mappings":"AAAA;;;;;;;;AAQA,eAAc,SAAUA,uBAAuBA,CAACC,WAAmB,EAAEC,MAAiB;EACpF,IAAIC,MAAM,GAAGF,WAAW;EACxB,IAAIG,KAAK,CAACC,OAAO,CAACH,MAAM,CAAC,EAAE;IACzB,MAAMI,KAAK,GAAGH,MAAM,CAACI,KAAK,CAAC,OAAO,CAAC;IACnCL,MAAM,CAACM,OAAO,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAI;MAC9B,MAAMC,SAAS,GAAGL,KAAK,CAACM,SAAS,CAAEC,IAAI,IAAKA,IAAI,KAAK,IAAIH,KAAK,GAAG,CAAC,EAAE,CAAC;MACrE,IAAIC,SAAS,IAAI,CAAC,EAAE;QAClBL,KAAK,CAACK,SAAS,CAAC,GAAGF,KAAK;;IAE5B,CAAC,CAAC;IACFN,MAAM,GAAGG,KAAK,CAACQ,IAAI,CAAC,EAAE,CAAC;;EAEzB,OAAOX,MAAM;AACf"},"metadata":{},"sourceType":"module","externalDependencies":[]}