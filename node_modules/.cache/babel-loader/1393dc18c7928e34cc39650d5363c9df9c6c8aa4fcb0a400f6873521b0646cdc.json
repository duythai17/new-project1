{"ast":null,"code":"/** Check to see if a `schema` specifies that a value must be true. This happens when:\n * - `schema.const` is truthy\n * - `schema.enum` == `[true]`\n * - `schema.anyOf` or `schema.oneOf` has a single value which recursively returns true\n * - `schema.allOf` has at least one value which recursively returns true\n *\n * @param schema - The schema to check\n * @returns - True if the schema specifies a value that must be true, false otherwise\n */\nexport default function schemaRequiresTrueValue(schema) {\n  // Check if const is a truthy value\n  if (schema.const) {\n    return true;\n  }\n  // Check if an enum has a single value of true\n  if (schema.enum && schema.enum.length === 1 && schema.enum[0] === true) {\n    return true;\n  }\n  // If anyOf has a single value, evaluate the subschema\n  if (schema.anyOf && schema.anyOf.length === 1) {\n    return schemaRequiresTrueValue(schema.anyOf[0]);\n  }\n  // If oneOf has a single value, evaluate the subschema\n  if (schema.oneOf && schema.oneOf.length === 1) {\n    return schemaRequiresTrueValue(schema.oneOf[0]);\n  }\n  // Evaluate each subschema in allOf, to see if one of them requires a true value\n  if (schema.allOf) {\n    const schemaSome = subSchema => schemaRequiresTrueValue(subSchema);\n    return schema.allOf.some(schemaSome);\n  }\n  return false;\n}","map":{"version":3,"names":["schemaRequiresTrueValue","schema","const","enum","length","anyOf","oneOf","allOf","schemaSome","subSchema","some"],"sources":["D:\\Reactjs\\my-app\\node_modules\\@rjsf\\utils\\src\\schemaRequiresTrueValue.ts"],"sourcesContent":["import { RJSFSchema, StrictRJSFSchema } from './types';\n\n/** Check to see if a `schema` specifies that a value must be true. This happens when:\n * - `schema.const` is truthy\n * - `schema.enum` == `[true]`\n * - `schema.anyOf` or `schema.oneOf` has a single value which recursively returns true\n * - `schema.allOf` has at least one value which recursively returns true\n *\n * @param schema - The schema to check\n * @returns - True if the schema specifies a value that must be true, false otherwise\n */\nexport default function schemaRequiresTrueValue<S extends StrictRJSFSchema = RJSFSchema>(schema: S): boolean {\n  // Check if const is a truthy value\n  if (schema.const) {\n    return true;\n  }\n\n  // Check if an enum has a single value of true\n  if (schema.enum && schema.enum.length === 1 && schema.enum[0] === true) {\n    return true;\n  }\n\n  // If anyOf has a single value, evaluate the subschema\n  if (schema.anyOf && schema.anyOf.length === 1) {\n    return schemaRequiresTrueValue(schema.anyOf[0] as S);\n  }\n\n  // If oneOf has a single value, evaluate the subschema\n  if (schema.oneOf && schema.oneOf.length === 1) {\n    return schemaRequiresTrueValue(schema.oneOf[0] as S);\n  }\n\n  // Evaluate each subschema in allOf, to see if one of them requires a true value\n  if (schema.allOf) {\n    const schemaSome = (subSchema: S['additionalProperties']) => schemaRequiresTrueValue(subSchema as S);\n    return schema.allOf.some(schemaSome);\n  }\n\n  return false;\n}\n"],"mappings":"AAEA;;;;;;;;;AASA,eAAc,SAAUA,uBAAuBA,CAA0CC,MAAS;EAChG;EACA,IAAIA,MAAM,CAACC,KAAK,EAAE;IAChB,OAAO,IAAI;;EAGb;EACA,IAAID,MAAM,CAACE,IAAI,IAAIF,MAAM,CAACE,IAAI,CAACC,MAAM,KAAK,CAAC,IAAIH,MAAM,CAACE,IAAI,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;IACtE,OAAO,IAAI;;EAGb;EACA,IAAIF,MAAM,CAACI,KAAK,IAAIJ,MAAM,CAACI,KAAK,CAACD,MAAM,KAAK,CAAC,EAAE;IAC7C,OAAOJ,uBAAuB,CAACC,MAAM,CAACI,KAAK,CAAC,CAAC,CAAM,CAAC;;EAGtD;EACA,IAAIJ,MAAM,CAACK,KAAK,IAAIL,MAAM,CAACK,KAAK,CAACF,MAAM,KAAK,CAAC,EAAE;IAC7C,OAAOJ,uBAAuB,CAACC,MAAM,CAACK,KAAK,CAAC,CAAC,CAAM,CAAC;;EAGtD;EACA,IAAIL,MAAM,CAACM,KAAK,EAAE;IAChB,MAAMC,UAAU,GAAIC,SAAoC,IAAKT,uBAAuB,CAACS,SAAc,CAAC;IACpG,OAAOR,MAAM,CAACM,KAAK,CAACG,IAAI,CAACF,UAAU,CAAC;;EAGtC,OAAO,KAAK;AACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}