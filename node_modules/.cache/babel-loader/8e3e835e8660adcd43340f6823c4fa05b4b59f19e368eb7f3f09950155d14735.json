{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { descriptionId, getTemplate, getUiOptions } from '@rjsf/utils';\n/** The `ArrayFieldDescriptionTemplate` component renders a `DescriptionFieldTemplate` with an `id` derived from\n * the `idSchema`.\n *\n * @param props - The `ArrayFieldDescriptionProps` for the component\n */\nexport default function ArrayFieldDescriptionTemplate(props) {\n  const {\n    idSchema,\n    description,\n    registry,\n    schema,\n    uiSchema\n  } = props;\n  const options = getUiOptions(uiSchema, registry.globalUiOptions);\n  const {\n    label: displayLabel = true\n  } = options;\n  if (!description || !displayLabel) {\n    return null;\n  }\n  const DescriptionFieldTemplate = getTemplate('DescriptionFieldTemplate', registry, options);\n  return _jsx(DescriptionFieldTemplate, {\n    id: descriptionId(idSchema),\n    description: description,\n    schema: schema,\n    uiSchema: uiSchema,\n    registry: registry\n  });\n}","map":{"version":3,"names":["descriptionId","getTemplate","getUiOptions","ArrayFieldDescriptionTemplate","props","idSchema","description","registry","schema","uiSchema","options","globalUiOptions","label","displayLabel","DescriptionFieldTemplate","_jsx","id"],"sources":["D:\\Reactjs\\my-app\\node_modules\\@rjsf\\core\\src\\components\\templates\\ArrayFieldDescriptionTemplate.tsx"],"sourcesContent":["import {\n  descriptionId,\n  getTemplate,\n  getUiOptions,\n  ArrayFieldDescriptionProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from '@rjsf/utils';\n\n/** The `ArrayFieldDescriptionTemplate` component renders a `DescriptionFieldTemplate` with an `id` derived from\n * the `idSchema`.\n *\n * @param props - The `ArrayFieldDescriptionProps` for the component\n */\nexport default function ArrayFieldDescriptionTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ArrayFieldDescriptionProps<T, S, F>) {\n  const { idSchema, description, registry, schema, uiSchema } = props;\n  const options = getUiOptions<T, S, F>(uiSchema, registry.globalUiOptions);\n  const { label: displayLabel = true } = options;\n  if (!description || !displayLabel) {\n    return null;\n  }\n  const DescriptionFieldTemplate = getTemplate<'DescriptionFieldTemplate', T, S, F>(\n    'DescriptionFieldTemplate',\n    registry,\n    options\n  );\n  return (\n    <DescriptionFieldTemplate\n      id={descriptionId<T>(idSchema)}\n      description={description}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n}\n"],"mappings":";AAAA,SACEA,aAAa,EACbC,WAAW,EACXC,YAAY,QAKP,aAAa;AAEpB;;;;;AAKA,eAAc,SAAUC,6BAA6BA,CAInDC,KAA0C;EAC1C,MAAM;IAAEC,QAAQ;IAAEC,WAAW;IAAEC,QAAQ;IAAEC,MAAM;IAAEC;EAAQ,CAAE,GAAGL,KAAK;EACnE,MAAMM,OAAO,GAAGR,YAAY,CAAUO,QAAQ,EAAEF,QAAQ,CAACI,eAAe,CAAC;EACzE,MAAM;IAAEC,KAAK,EAAEC,YAAY,GAAG;EAAI,CAAE,GAAGH,OAAO;EAC9C,IAAI,CAACJ,WAAW,IAAI,CAACO,YAAY,EAAE;IACjC,OAAO,IAAI;;EAEb,MAAMC,wBAAwB,GAAGb,WAAW,CAC1C,0BAA0B,EAC1BM,QAAQ,EACRG,OAAO,CACR;EACD,OACEK,IAAA,CAACD,wBAAwB;IACvBE,EAAE,EAAEhB,aAAa,CAAIK,QAAQ,CAAC;IAC9BC,WAAW,EAAEA,WAAW;IACxBE,MAAM,EAAEA,MAAM;IACdC,QAAQ,EAAEA,QAAQ;IAClBF,QAAQ,EAAEA;EAAQ,EAClB;AAEN"},"metadata":{},"sourceType":"module","externalDependencies":[]}