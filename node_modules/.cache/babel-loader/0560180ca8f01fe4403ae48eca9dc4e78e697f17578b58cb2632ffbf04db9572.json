{"ast":null,"code":"import isEmpty from 'lodash/isEmpty';\nimport mergeObjects from '../mergeObjects';\n/** Merges the errors in `additionalErrorSchema` into the existing `validationData` by combining the hierarchies in the\n * two `ErrorSchema`s and then appending the error list from the `additionalErrorSchema` obtained by calling\n * `validator.toErrorList()` onto the `errors` in the `validationData`. If no `additionalErrorSchema` is passed, then\n * `validationData` is returned.\n *\n * @param validator - The validator used to convert an ErrorSchema to a list of errors\n * @param validationData - The current `ValidationData` into which to merge the additional errors\n * @param [additionalErrorSchema] - The additional set of errors in an `ErrorSchema`\n * @returns - The `validationData` with the additional errors from `additionalErrorSchema` merged into it, if provided.\n * @deprecated - Use the `validationDataMerge()` function exported from `@rjsf/utils` instead. This function will be\n *        removed in the next major release.\n */\nexport default function mergeValidationData(validator, validationData, additionalErrorSchema) {\n  if (!additionalErrorSchema) {\n    return validationData;\n  }\n  const {\n    errors: oldErrors,\n    errorSchema: oldErrorSchema\n  } = validationData;\n  let errors = validator.toErrorList(additionalErrorSchema);\n  let errorSchema = additionalErrorSchema;\n  if (!isEmpty(oldErrorSchema)) {\n    errorSchema = mergeObjects(oldErrorSchema, additionalErrorSchema, true);\n    errors = [...oldErrors].concat(errors);\n  }\n  return {\n    errorSchema,\n    errors\n  };\n}","map":{"version":3,"names":["isEmpty","mergeObjects","mergeValidationData","validator","validationData","additionalErrorSchema","errors","oldErrors","errorSchema","oldErrorSchema","toErrorList","concat"],"sources":["D:\\Reactjs\\my-app\\node_modules\\@rjsf\\utils\\src\\schema\\mergeValidationData.ts"],"sourcesContent":["import isEmpty from 'lodash/isEmpty';\n\nimport mergeObjects from '../mergeObjects';\nimport { ErrorSchema, FormContextType, RJSFSchema, StrictRJSFSchema, ValidationData, ValidatorType } from '../types';\n\n/** Merges the errors in `additionalErrorSchema` into the existing `validationData` by combining the hierarchies in the\n * two `ErrorSchema`s and then appending the error list from the `additionalErrorSchema` obtained by calling\n * `validator.toErrorList()` onto the `errors` in the `validationData`. If no `additionalErrorSchema` is passed, then\n * `validationData` is returned.\n *\n * @param validator - The validator used to convert an ErrorSchema to a list of errors\n * @param validationData - The current `ValidationData` into which to merge the additional errors\n * @param [additionalErrorSchema] - The additional set of errors in an `ErrorSchema`\n * @returns - The `validationData` with the additional errors from `additionalErrorSchema` merged into it, if provided.\n * @deprecated - Use the `validationDataMerge()` function exported from `@rjsf/utils` instead. This function will be\n *        removed in the next major release.\n */\nexport default function mergeValidationData<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  validator: ValidatorType<T, S, F>,\n  validationData: ValidationData<T>,\n  additionalErrorSchema?: ErrorSchema<T>\n): ValidationData<T> {\n  if (!additionalErrorSchema) {\n    return validationData;\n  }\n  const { errors: oldErrors, errorSchema: oldErrorSchema } = validationData;\n  let errors = validator.toErrorList(additionalErrorSchema);\n  let errorSchema = additionalErrorSchema;\n  if (!isEmpty(oldErrorSchema)) {\n    errorSchema = mergeObjects(oldErrorSchema, additionalErrorSchema, true) as ErrorSchema<T>;\n    errors = [...oldErrors].concat(errors);\n  }\n  return { errorSchema, errors };\n}\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,gBAAgB;AAEpC,OAAOC,YAAY,MAAM,iBAAiB;AAG1C;;;;;;;;;;;;AAYA,eAAc,SAAUC,mBAAmBA,CAKzCC,SAAiC,EACjCC,cAAiC,EACjCC,qBAAsC;EAEtC,IAAI,CAACA,qBAAqB,EAAE;IAC1B,OAAOD,cAAc;;EAEvB,MAAM;IAAEE,MAAM,EAAEC,SAAS;IAAEC,WAAW,EAAEC;EAAc,CAAE,GAAGL,cAAc;EACzE,IAAIE,MAAM,GAAGH,SAAS,CAACO,WAAW,CAACL,qBAAqB,CAAC;EACzD,IAAIG,WAAW,GAAGH,qBAAqB;EACvC,IAAI,CAACL,OAAO,CAACS,cAAc,CAAC,EAAE;IAC5BD,WAAW,GAAGP,YAAY,CAACQ,cAAc,EAAEJ,qBAAqB,EAAE,IAAI,CAAmB;IACzFC,MAAM,GAAG,CAAC,GAAGC,SAAS,CAAC,CAACI,MAAM,CAACL,MAAM,CAAC;;EAExC,OAAO;IAAEE,WAAW;IAAEF;EAAM,CAAE;AAChC"},"metadata":{},"sourceType":"module","externalDependencies":[]}