{"ast":null,"code":"// Import necessary libraries and CSS file\nimport React,{useEffect,useState}from'react';import axios from'axios';import'./MongoDataComponent.css';// Import your CSS file for styling\n// Define your component\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const MongoDataComponent=()=>{// State for weight data and setpoint\nconst[weightData,setWeightData]=useState([]);const[setpointData,setSetpoint]=useState([]);// Function to fetch data from MongoDB\nconst fetchData=async()=>{try{// Fetch weight data\nconst weightResponse=await axios.get('https://ap-southeast-1.aws.data.mongodb-api.com/app/data-fmace/endpoint/get_updatedvalue');setWeightData(weightResponse.data);// Fetch setpoint data\nconst setpointResponse=await axios.get('https://ap-southeast-1.aws.data.mongodb-api.com/app/data-fmace/endpoint/get_setpoint');setSetpoint(setpointResponse.data);}catch(error){console.error('Error fetching data:',error);}};// Function to start polling\nconst startPolling=()=>{const pollingInterval=setInterval(fetchData,1000);// Adjust the interval as needed (e.g., 5000 for every 5 seconds)\nreturn()=>clearInterval(pollingInterval);};// useEffect to run when the component mounts\nuseEffect(()=>{fetchData();// Fetch data when the component mounts\nconst stopPolling=startPolling();// Start polling\nreturn()=>{stopPolling();// Stop polling when the component is unmounted\n};},[]);// Render the component UI\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"data-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"weight-data-container\",children:/*#__PURE__*/_jsxs(\"h1\",{className:\"weight-data-title\",children:[/*#__PURE__*/_jsx(\"span\",{children:\"Weight Data: \"}),weightData.length>0?/*#__PURE__*/_jsxs(\"span\",{className:\"weight-data-value\",children:[weightData[0].weight,\" gram\"]}):/*#__PURE__*/_jsx(\"span\",{className:\"no-data-message\",children:\"No weight data available.\"})]})}),/*#__PURE__*/_jsx(\"div\",{className:\"setpoint-data-container\",children:/*#__PURE__*/_jsxs(\"h1\",{className:\"setpoint-data-title\",children:[/*#__PURE__*/_jsx(\"span\",{children:\"Setpoint: \"}),setpointData.length>0?/*#__PURE__*/_jsxs(\"span\",{className:\"setpoint-data-value\",children:[setpointData[0].setpoint,\" gram\"]}):/*#__PURE__*/_jsx(\"span\",{className:\"no-data-message\",children:\"No setpoint data available.\"})]})})]});};// Export the component\nexport default MongoDataComponent;","map":{"version":3,"names":["React","useEffect","useState","axios","jsx","_jsx","jsxs","_jsxs","MongoDataComponent","weightData","setWeightData","setpointData","setSetpoint","fetchData","weightResponse","get","data","setpointResponse","error","console","startPolling","pollingInterval","setInterval","clearInterval","stopPolling","className","children","length","weight","setpoint"],"sources":["D:/Reactjs/my-app/src/components/MongoDataComponent.jsx"],"sourcesContent":["// Import necessary libraries and CSS file\r\nimport React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport './MongoDataComponent.css'; // Import your CSS file for styling\r\n\r\n// Define your component\r\nconst MongoDataComponent = () => {\r\n  // State for weight data and setpoint\r\n  const [weightData, setWeightData] = useState([]);\r\n  const [setpointData, setSetpoint] = useState([]);\r\n\r\n  // Function to fetch data from MongoDB\r\n  const fetchData = async () => {\r\n    try {\r\n      // Fetch weight data\r\n      const weightResponse = await axios.get('https://ap-southeast-1.aws.data.mongodb-api.com/app/data-fmace/endpoint/get_updatedvalue');\r\n      setWeightData(weightResponse.data);\r\n\r\n      // Fetch setpoint data\r\n      const setpointResponse = await axios.get('https://ap-southeast-1.aws.data.mongodb-api.com/app/data-fmace/endpoint/get_setpoint');\r\n      setSetpoint(setpointResponse.data);\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n    }\r\n  };\r\n\r\n  // Function to start polling\r\n  const startPolling = () => {\r\n    const pollingInterval = setInterval(fetchData, 1000); // Adjust the interval as needed (e.g., 5000 for every 5 seconds)\r\n    return () => clearInterval(pollingInterval);\r\n  };\r\n\r\n  // useEffect to run when the component mounts\r\n  useEffect(() => {\r\n    fetchData(); // Fetch data when the component mounts\r\n    const stopPolling = startPolling(); // Start polling\r\n\r\n    return () => {\r\n      stopPolling(); // Stop polling when the component is unmounted\r\n    };\r\n  }, []);\r\n\r\n  // Render the component UI\r\n  return (\r\n    <div className=\"data-container\">\r\n      <div className=\"weight-data-container\">\r\n        <h1 className=\"weight-data-title\">\r\n          <span>Weight Data: </span>\r\n          {weightData.length > 0 ? (\r\n            <span className=\"weight-data-value\">{weightData[0].weight} gram</span>\r\n          ) : (\r\n            <span className=\"no-data-message\">No weight data available.</span>\r\n          )}\r\n        </h1>\r\n      </div>\r\n\r\n      <div className=\"setpoint-data-container\">\r\n        <h1 className=\"setpoint-data-title\">\r\n          <span>Setpoint: </span>\r\n          {setpointData.length > 0 ? (\r\n            <span className=\"setpoint-data-value\">{setpointData[0].setpoint} gram</span>\r\n          ) : (\r\n            <span className=\"no-data-message\">No setpoint data available.</span>\r\n          )}\r\n        </h1>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Export the component\r\nexport default MongoDataComponent;\r\n"],"mappings":"AAAA;AACA,MAAO,CAAAA,KAAK,EAAIC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAClD,MAAO,CAAAC,KAAK,KAAM,OAAO,CACzB,MAAO,0BAA0B,CAAE;AAEnC;AAAA,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBACA,KAAM,CAAAC,kBAAkB,CAAGA,CAAA,GAAM,CAC/B;AACA,KAAM,CAACC,UAAU,CAAEC,aAAa,CAAC,CAAGR,QAAQ,CAAC,EAAE,CAAC,CAChD,KAAM,CAACS,YAAY,CAAEC,WAAW,CAAC,CAAGV,QAAQ,CAAC,EAAE,CAAC,CAEhD;AACA,KAAM,CAAAW,SAAS,CAAG,KAAAA,CAAA,GAAY,CAC5B,GAAI,CACF;AACA,KAAM,CAAAC,cAAc,CAAG,KAAM,CAAAX,KAAK,CAACY,GAAG,CAAC,0FAA0F,CAAC,CAClIL,aAAa,CAACI,cAAc,CAACE,IAAI,CAAC,CAElC;AACA,KAAM,CAAAC,gBAAgB,CAAG,KAAM,CAAAd,KAAK,CAACY,GAAG,CAAC,sFAAsF,CAAC,CAChIH,WAAW,CAACK,gBAAgB,CAACD,IAAI,CAAC,CACpC,CAAE,MAAOE,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,CAAEA,KAAK,CAAC,CAC9C,CACF,CAAC,CAED;AACA,KAAM,CAAAE,YAAY,CAAGA,CAAA,GAAM,CACzB,KAAM,CAAAC,eAAe,CAAGC,WAAW,CAACT,SAAS,CAAE,IAAI,CAAC,CAAE;AACtD,MAAO,IAAMU,aAAa,CAACF,eAAe,CAAC,CAC7C,CAAC,CAED;AACApB,SAAS,CAAC,IAAM,CACdY,SAAS,CAAC,CAAC,CAAE;AACb,KAAM,CAAAW,WAAW,CAAGJ,YAAY,CAAC,CAAC,CAAE;AAEpC,MAAO,IAAM,CACXI,WAAW,CAAC,CAAC,CAAE;AACjB,CAAC,CACH,CAAC,CAAE,EAAE,CAAC,CAEN;AACA,mBACEjB,KAAA,QAAKkB,SAAS,CAAC,gBAAgB,CAAAC,QAAA,eAC7BrB,IAAA,QAAKoB,SAAS,CAAC,uBAAuB,CAAAC,QAAA,cACpCnB,KAAA,OAAIkB,SAAS,CAAC,mBAAmB,CAAAC,QAAA,eAC/BrB,IAAA,SAAAqB,QAAA,CAAM,eAAa,CAAM,CAAC,CACzBjB,UAAU,CAACkB,MAAM,CAAG,CAAC,cACpBpB,KAAA,SAAMkB,SAAS,CAAC,mBAAmB,CAAAC,QAAA,EAAEjB,UAAU,CAAC,CAAC,CAAC,CAACmB,MAAM,CAAC,OAAK,EAAM,CAAC,cAEtEvB,IAAA,SAAMoB,SAAS,CAAC,iBAAiB,CAAAC,QAAA,CAAC,2BAAyB,CAAM,CAClE,EACC,CAAC,CACF,CAAC,cAENrB,IAAA,QAAKoB,SAAS,CAAC,yBAAyB,CAAAC,QAAA,cACtCnB,KAAA,OAAIkB,SAAS,CAAC,qBAAqB,CAAAC,QAAA,eACjCrB,IAAA,SAAAqB,QAAA,CAAM,YAAU,CAAM,CAAC,CACtBf,YAAY,CAACgB,MAAM,CAAG,CAAC,cACtBpB,KAAA,SAAMkB,SAAS,CAAC,qBAAqB,CAAAC,QAAA,EAAEf,YAAY,CAAC,CAAC,CAAC,CAACkB,QAAQ,CAAC,OAAK,EAAM,CAAC,cAE5ExB,IAAA,SAAMoB,SAAS,CAAC,iBAAiB,CAAAC,QAAA,CAAC,6BAA2B,CAAM,CACpE,EACC,CAAC,CACF,CAAC,EACH,CAAC,CAEV,CAAC,CAED;AACA,cAAe,CAAAlB,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}